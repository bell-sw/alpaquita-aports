From f36283e61136e78bf4999dc63dc3363c6c7ecfb1 Mon Sep 17 00:00:00 2001
From: Johannes Holland <johannes.holland@infineon.com>
Date: Fri, 16 Jul 2021 20:29:28 +0200
Subject: [PATCH] tests: enable tcti-pcap tests on big endian platforms

Signed-off-by: Johannes Holland <johannes.holland@infineon.com>
---
 test/unit/tcti-pcap.c | 62 +++++++++++++++++++++----------------------
 1 file changed, 31 insertions(+), 31 deletions(-)

diff --git a/test/unit/tcti-pcap.c b/test/unit/tcti-pcap.c
index 06b6a56b..c540de77 100644
--- a/test/unit/tcti-pcap.c
+++ b/test/unit/tcti-pcap.c
@@ -16,6 +16,7 @@
 #include <string.h>
 #include <time.h>
 #include <sys/stat.h>
+#include <netinet/in.h>
 
 #include <setjmp.h>
 #include <cmocka.h>
@@ -26,6 +27,14 @@
 #include "tss2-tcti/tcti-common.h"
 #include "tss2-tcti/tcti-pcap.h"
 
+#if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
+#define _LE32TOH(a,b,c,d) d,c,b,a
+#define _LE16TOH(a,b) b,a
+#else
+#define _LE32TOH(a,b,c,d) a,b,c,d
+#define _LE16TOH(a,b) a,b
+#endif
+
 #define TCTI_STUB_CONF      "stub"
 #define TCTI_PCAP_ENV_VAR   "pcap_env_var"
 #define TCTI_PCAP_FILE      "pcap_file"
@@ -43,34 +52,34 @@
 #define TCTI_PCAP_HOST_PORT_BYTES  0xcd, 0xef
 #define TCTI_PCAP_TIMESTAMP_SEC    ((uint64_t) 0x0001020304050607 / 1000000)
 #define TCTI_PCAP_TIMESTAMP_NSEC   (((uint64_t) 0x0001020304050607 % 1000000) * 1000)
-#define TCTI_PCAP_TIMESTAMP_BYTES  0x03, 0x02, 0x01, 0x00,  0x07, 0x06, 0x05, 0x04
+#define TCTI_PCAP_TIMESTAMP_BYTES  _LE32TOH(0x03, 0x02, 0x01, 0x00),  _LE32TOH(0x07, 0x06, 0x05, 0x04)
 
 static const uint8_t pcap_header[] = {
     /* section header block */
-    0x0a, 0x0d, 0x0d, 0x0a,
-    0x1c, 0x00, 0x00, 0x00,
-    0x4d, 0x3c, 0x2b, 0x1a,
-    0x01, 0x00,
+    _LE32TOH(0x0a, 0x0d, 0x0d, 0x0a),
+    _LE32TOH(0x1c, 0x00, 0x00, 0x00),
+    _LE32TOH(0x4d, 0x3c, 0x2b, 0x1a),
+    _LE16TOH(0x01, 0x00),
     0x00, 0x00,
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0x1c, 0x00, 0x00, 0x00,
+    _LE32TOH(0x1c, 0x00, 0x00, 0x00),
     /* interface description block */
-    0x01, 0x00, 0x00, 0x00,
-    0x14, 0x00, 0x00, 0x00,
-    0xE4, 0x00,
+    _LE32TOH(0x01, 0x00, 0x00, 0x00),
+    _LE32TOH(0x14, 0x00, 0x00, 0x00),
+    _LE16TOH(0xE4, 0x00),
     0x00, 0x00,
     0x00, 0x00, 0x00, 0x00,
-    0x14, 0x00, 0x00, 0x00
+    _LE32TOH(0x14, 0x00, 0x00, 0x00)
 };
 
 static uint8_t pcap_rx_epb_data[] = {
     /* enhanced packet block header */
-    0x06, 0x00, 0x00, 0x00,
-    0x4c, 0x00, 0x00, 0x00,
+    _LE32TOH(0x06, 0x00, 0x00, 0x00),
+    _LE32TOH(0x4c, 0x00, 0x00, 0x00),
     0x00, 0x00, 0x00, 0x00,
     TCTI_PCAP_TIMESTAMP_BYTES,
-    0x2b, 0x00, 0x00, 0x00,
-    0x2b, 0x00, 0x00, 0x00,
+    _LE32TOH(0x2b, 0x00, 0x00, 0x00),
+    _LE32TOH(0x2b, 0x00, 0x00, 0x00),
     /* ipv4 header */
     0x45,
     0x00,
@@ -96,17 +105,17 @@ static uint8_t pcap_rx_epb_data[] = {
     /* epb padding */
     0x00,
     /* epb footer */
-    0x4c, 0x00, 0x00, 0x00
+    _LE32TOH(0x4c, 0x00, 0x00, 0x00)
 };
 
 static uint8_t pcap_tx_epb_data[] = {
     /* enhanced packet block header */
-    0x06, 0x00, 0x00, 0x00,
-    0x4c, 0x00, 0x00, 0x00,
+    _LE32TOH(0x06, 0x00, 0x00, 0x00),
+    _LE32TOH(0x4c, 0x00, 0x00, 0x00),
     0x00, 0x00, 0x00, 0x00,
     TCTI_PCAP_TIMESTAMP_BYTES,
-    0x2b, 0x00, 0x00, 0x00,
-    0x2b, 0x00, 0x00, 0x00,
+    _LE32TOH(0x2b, 0x00, 0x00, 0x00),
+    _LE32TOH(0x2b, 0x00, 0x00, 0x00),
     /* ipv4 header */
     0x45,
     0x00,
@@ -132,7 +141,7 @@ static uint8_t pcap_tx_epb_data[] = {
     /* epb padding */
     0x00,
     /* epb footer */
-    0x4c, 0x00, 0x00, 0x00
+    _LE32TOH(0x4c, 0x00, 0x00, 0x00)
 };
 
 typedef struct {
@@ -367,19 +376,10 @@ update_tcp_seq (void* data, uint32_t size)
     uint32_t seq_no;
 
     seq_no =  *((uint32_t*) (data + offset));
-    /* from big endian to little endian */
-    seq_no = ((seq_no << 24) & 0xff000000) | /* byte 0 to byte 3 */
-             ((seq_no << 8)  & 0x00ff0000) | /* byte 1 to byte 2 */
-             ((seq_no >> 8)  & 0x0000ff00) | /* byte 2 to byte 1 */
-             ((seq_no >> 24) & 0x000000ff);  /* byte 3 to byte 0 */
 
+    seq_no = ntohl (seq_no);
     seq_no += size;
-
-    /* from little endian to big endian */
-    seq_no = ((seq_no << 24) & 0xff000000) | /* byte 0 to byte 3 */
-             ((seq_no << 8)  & 0x00ff0000) | /* byte 1 to byte 2 */
-             ((seq_no >> 8)  & 0x0000ff00) | /* byte 2 to byte 1 */
-             ((seq_no >> 24) & 0x000000ff);  /* byte 3 to byte 0 */
+    seq_no = htonl (seq_no);
 
     *((uint32_t*) (data + offset)) = seq_no;
 }
-- 
2.33.0

