From 25cba1362d42f483f797651609100e732f53cb37 Mon Sep 17 00:00:00 2001
From: Jonathan Giddy <jgiddy@mesosphere.com>
Date: Fri, 29 Mar 2019 17:00:19 +0000
Subject: [PATCH] Set histogram buckets on first request

The `ngx_http_vhost_traffic_status_node_init` function initializes
the data structures and processes the first request. However it
was not updating the histogram buckets. Refactor the common code
from this function and `ngx_http_vhost_traffic_status_node_set`
into a common `ngx_http_vhost_traffic_status_node_update` function
to fix this and to reduce the chance of similar problems.
---
 src/ngx_http_vhost_traffic_status_node.c | 59 +++++++++++-------------
 src/ngx_http_vhost_traffic_status_node.h |  2 +
 2 files changed, 30 insertions(+), 31 deletions(-)

Patch-Source: https://github.com/vozlt/nginx-module-vts/pull/163

diff --git a/src/ngx_http_vhost_traffic_status_node.c b/src/ngx_http_vhost_traffic_status_node.c
index 1688bee..b91f2ce 100644
--- a/src/ngx_http_vhost_traffic_status_node.c
+++ b/src/ngx_http_vhost_traffic_status_node.c
@@ -312,12 +312,15 @@ ngx_http_vhost_traffic_status_node_zero(ngx_http_vhost_traffic_status_node_t *vt
 
 }
 
-
+/*
+   Initialize the node and update it with the first request.
+   Set the `stat_request_time` to the time of the first request.
+*/
 void
 ngx_http_vhost_traffic_status_node_init(ngx_http_request_t *r,
     ngx_http_vhost_traffic_status_node_t *vtsn)
 {
-    ngx_uint_t status = r->headers_out.status;
+    ngx_msec_int_t                             ms;
 
     /* init serverZone */
     ngx_http_vhost_traffic_status_node_zero(vtsn);
@@ -333,49 +336,50 @@ ngx_http_vhost_traffic_status_node_init(ngx_http_request_t *r,
         &vtsn->stat_upstream.response_buckets);
 
     /* set serverZone */
-    vtsn->stat_request_counter = 1;
-    vtsn->stat_in_bytes = (ngx_atomic_uint_t) r->request_length;
-    vtsn->stat_out_bytes = (ngx_atomic_uint_t) r->connection->sent;
-
-    ngx_http_vhost_traffic_status_add_rc(status, vtsn);
-
-    vtsn->stat_request_time = (ngx_msec_t) ngx_http_vhost_traffic_status_request_time(r);
-    vtsn->stat_request_time_counter = (ngx_atomic_uint_t) vtsn->stat_request_time;
-
-    ngx_http_vhost_traffic_status_node_time_queue_insert(&vtsn->stat_request_times,
-        vtsn->stat_request_time);
-
-#if (NGX_HTTP_CACHE)
-    if (r->upstream != NULL && r->upstream->cache_status != 0) {
-        ngx_http_vhost_traffic_status_add_cc(r->upstream->cache_status, vtsn);
-    }
-#endif
+    ms = ngx_http_vhost_traffic_status_request_time(r);
+    vtsn->stat_request_time = (ngx_msec_t) ms;
 
+    ngx_http_vhost_traffic_status_node_update(r, vtsn, ms);
 }
 
-
+/*
+   Update the node from a subsequent request. Now there is more than one request,
+   calculate the average request time.
+*/
 void
 ngx_http_vhost_traffic_status_node_set(ngx_http_request_t *r,
     ngx_http_vhost_traffic_status_node_t *vtsn)
 {
-    ngx_uint_t                                 status;
     ngx_msec_int_t                             ms;
     ngx_http_vhost_traffic_status_node_t       ovtsn;
     ngx_http_vhost_traffic_status_loc_conf_t  *vtscf;
 
     vtscf = ngx_http_get_module_loc_conf(r, ngx_http_vhost_traffic_status_module);
 
-    status = r->headers_out.status;
     ovtsn = *vtsn;
 
+    ms = ngx_http_vhost_traffic_status_request_time(r);
+    ngx_http_vhost_traffic_status_node_update(r, vtsn, ms);
+
+    vtsn->stat_request_time = ngx_http_vhost_traffic_status_node_time_queue_average(
+                                  &vtsn->stat_request_times, vtscf->average_method,
+                                  vtscf->average_period);
+
+    ngx_http_vhost_traffic_status_add_oc((&ovtsn), vtsn);
+}
+
+void
+ngx_http_vhost_traffic_status_node_update(ngx_http_request_t *r,
+    ngx_http_vhost_traffic_status_node_t *vtsn, ngx_msec_int_t ms)
+{
+    ngx_uint_t status = r->headers_out.status;
+
     vtsn->stat_request_counter++;
     vtsn->stat_in_bytes += (ngx_atomic_uint_t) r->request_length;
     vtsn->stat_out_bytes += (ngx_atomic_uint_t) r->connection->sent;
 
     ngx_http_vhost_traffic_status_add_rc(status, vtsn);
 
-    ms = ngx_http_vhost_traffic_status_request_time(r);
-
     vtsn->stat_request_time_counter += (ngx_atomic_uint_t) ms;
 
     ngx_http_vhost_traffic_status_node_time_queue_insert(&vtsn->stat_request_times,
@@ -384,20 +388,13 @@ ngx_http_vhost_traffic_status_node_set(ngx_http_request_t *r,
     ngx_http_vhost_traffic_status_node_histogram_observe(&vtsn->stat_request_buckets,
                                                          ms);
 
-    vtsn->stat_request_time = ngx_http_vhost_traffic_status_node_time_queue_average(
-                                  &vtsn->stat_request_times, vtscf->average_method,
-                                  vtscf->average_period);
-
 #if (NGX_HTTP_CACHE)
     if (r->upstream != NULL && r->upstream->cache_status != 0) {
         ngx_http_vhost_traffic_status_add_cc(r->upstream->cache_status, vtsn);
     }
 #endif
-
-    ngx_http_vhost_traffic_status_add_oc((&ovtsn), vtsn);
 }
 
-
 void
 ngx_http_vhost_traffic_status_node_time_queue_zero(
     ngx_http_vhost_traffic_status_node_time_queue_t *q)
diff --git a/src/ngx_http_vhost_traffic_status_node.h b/src/ngx_http_vhost_traffic_status_node.h
index 9ea6f23..3bbb53e 100644
--- a/src/ngx_http_vhost_traffic_status_node.h
+++ b/src/ngx_http_vhost_traffic_status_node.h
@@ -118,6 +118,8 @@ void ngx_http_vhost_traffic_status_node_init(ngx_http_request_t *r,
     ngx_http_vhost_traffic_status_node_t *vtsn);
 void ngx_http_vhost_traffic_status_node_set(ngx_http_request_t *r,
     ngx_http_vhost_traffic_status_node_t *vtsn);
+void ngx_http_vhost_traffic_status_node_update(ngx_http_request_t *r,
+    ngx_http_vhost_traffic_status_node_t *vtsn, ngx_msec_int_t ms);
 
 void ngx_http_vhost_traffic_status_node_time_queue_zero(
     ngx_http_vhost_traffic_status_node_time_queue_t *q);
