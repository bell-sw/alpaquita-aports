needed since https://github.com/bminor/musl/commit/25e6fee27f4a293728dd15b659170e7b9c7db9bc
--
diff --git a/storage/connect/filamvct.cpp b/storage/connect/filamvct.cpp
index 184df646..f462060a 100644
--- a/storage/connect/filamvct.cpp
+++ b/storage/connect/filamvct.cpp
@@ -3084,7 +3084,7 @@ bool BGVFAM::BigSeek(PGLOBAL g, HANDLE h, BIGINT pos, bool b)
     return true;
     } // endif
 #else   // !_WIN32
-  if (lseek64(h, pos, (b) ? SEEK_END : SEEK_SET) < 0) {
+  if (lseek(h, pos, (b) ? SEEK_END : SEEK_SET) < 0) {
     snprintf(g->Message, sizeof(g->Message), MSG(ERROR_IN_LSK), errno);
     return true;
     } // endif
@@ -3238,7 +3238,7 @@ int BGVFAM::GetBlockInfo(PGLOBAL g)
 
   if (h == INVALID_HANDLE_VALUE || !len.QuadPart) {
 #else   // !_WIN32
-  h = open64(filename, O_RDONLY, 0);
+  h = open(filename, O_RDONLY, 0);
 
   if (h == INVALID_HANDLE_VALUE || !_filelength(h)) {
 #endif  // !_WIN32
@@ -3314,7 +3314,7 @@ bool BGVFAM::SetBlockInfo(PGLOBAL g)
 #else   // !_WIN32
     int oflag = (b) ?  O_RDWR : O_RDWR | O_TRUNC;
 
-    h = open64(filename, oflag, 0);
+    h = open(filename, oflag, 0);
 #endif  // !_WIN32
 
     if (h == INVALID_HANDLE_VALUE) {
@@ -3409,7 +3409,7 @@ bool BGVFAM::MakeEmptyFile(PGLOBAL g, PCSZ fn)
   int    h;
   BIGINT pos;
 
-  h= open64(filename, O_CREAT | O_WRONLY, S_IREAD | S_IWRITE);
+  h= open(filename, O_CREAT | O_WRONLY, S_IREAD | S_IWRITE);
 
   if (h == -1)
     return true;
@@ -3420,7 +3420,7 @@ bool BGVFAM::MakeEmptyFile(PGLOBAL g, PCSZ fn)
     htrc("MEF: pos=%lld n=%d maxblk=%d blksize=%d\n",
                pos, n, MaxBlk, Blksize);
 
-  if (lseek64(h, pos, SEEK_SET) < 0)
+  if (lseek(h, pos, SEEK_SET) < 0)
     goto err;
 
   // This actually fills the empty file
@@ -3619,7 +3619,7 @@ bool BGVFAM::OpenTableFile(PGLOBAL g)
       return true;
     } // endswitch
 
-  Hfile = open64(filename, oflag, pmd); // Enable file size > 2G
+  Hfile = open(filename, oflag, pmd); // Enable file size > 2G
 
   if (Hfile == INVALID_HANDLE_VALUE) {
     rc = errno;
@@ -3933,7 +3933,7 @@ int BGVFAM::DeleteRecords(PGLOBAL g, int irc)
           return RC_FX;
           } // endif error
 #else   // !_WIN32
-        if (ftruncate64(Hfile, (BIGINT)(Tpos * Lrecl))) {
+        if (ftruncate(Hfile, (BIGINT)(Tpos * Lrecl))) {
           snprintf(g->Message, sizeof(g->Message), MSG(TRUNCATE_ERROR), strerror(errno));
           return RC_FX;
           } // endif
@@ -3993,7 +3993,7 @@ bool BGVFAM::OpenTempFile(PGLOBAL g)
 #else    // UNIX
   int oflag = (MaxBlk) ? O_WRONLY : O_WRONLY | O_TRUNC;
 
-  Tfile = open64(tempname, oflag, S_IWRITE);
+  Tfile = open(tempname, oflag, S_IWRITE);
 
   if (Tfile == INVALID_HANDLE_VALUE) {
     int rc = errno;
@@ -4250,7 +4250,7 @@ void BGVFAM::Rewind(void)
 #if defined(_WIN32)  //OB
   SetFilePointer(Hfile, 0, NULL, FILE_BEGIN);
 #else    // UNIX
-  lseek64(Hfile, 0, SEEK_SET);
+  lseek(Hfile, 0, SEEK_SET);
 #endif   // UNIX
 #endif // 0
   } // end of Rewind
diff --git a/storage/connect/xindex.cpp b/storage/connect/xindex.cpp
index 4bcbbfd4..1144f89a 100644
--- a/storage/connect/xindex.cpp
+++ b/storage/connect/xindex.cpp
@@ -2652,7 +2652,7 @@ bool XHUGE::Open(PGLOBAL g, char *filename, int id, MODE mode)
     /*******************************************************************/
     /* Position the cursor at end of file so ftell returns file size.  */
     /*******************************************************************/
-    if (!(NewOff.Val = (longlong)lseek64(Hfile, 0LL, SEEK_END))) {
+    if (!(NewOff.Val = (longlong)lseek(Hfile, 0LL, SEEK_END))) {
       snprintf(g->Message, sizeof(g->Message), MSG(FUNC_ERRNO), errno, "Seek");
       return true;
       } // endif
@@ -2681,7 +2681,7 @@ bool XHUGE::Open(PGLOBAL g, char *filename, int id, MODE mode)
       htrc("noff[%d]=%lld\n", id, noff[id].Val);
 
     // Position the cursor at the offset of this index
-    if (lseek64(Hfile, noff[id].Val, SEEK_SET) < 0) {
+    if (lseek(Hfile, noff[id].Val, SEEK_SET) < 0) {
       snprintf(g->Message, sizeof(g->Message), "(XHUGE)lseek64: %s (%lld)", strerror(errno), noff[id].Val);
       printf("%s\n", g->Message);
 //    snprintf(g->Message, sizeof(g->Message), MSG(FUNC_ERRNO), errno, "Hseek");
@@ -2709,10 +2709,10 @@ bool XHUGE::Seek(PGLOBAL g, int low, int high, int origin)
     } // endif
 
 #else // UNIX
-  off64_t pos = (off64_t)low
-              + (off64_t)high * ((off64_t)0x100 * (off64_t)0x1000000);
+  off_t pos = (off_t)low
+              + (off_t)high * ((off_t)0x100 * (off_t)0x1000000);
 
-  if (lseek64(Hfile, pos, origin) < 0) {
+  if (lseek(Hfile, pos, origin) < 0) {
     snprintf(g->Message, sizeof(g->Message), MSG(ERROR_IN_LSK), errno);
 
     if (trace(1))
@@ -2841,7 +2841,7 @@ void XHUGE::Close(char *fn, int id)
 #else   // !_WIN32
   if (id >= 0 && fn) {
     if (Hfile != INVALID_HANDLE_VALUE) {
-      if (lseek64(Hfile, id * sizeof(IOFF), SEEK_SET) >= 0) {
+      if (lseek(Hfile, id * sizeof(IOFF), SEEK_SET) >= 0) {
         ssize_t nbw = write(Hfile, &NewOff, sizeof(IOFF));
 			  
         if (nbw != (signed)sizeof(IOFF))
