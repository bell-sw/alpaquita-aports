From 8f363e18cd9a48fe9d3ed85bab6fa0c392745ef1 Mon Sep 17 00:00:00 2001
From: Stanislav Kholmanskikh <stanislav.kholmanskikh@bell-sw.com>
Date: Wed, 26 Jun 2024 12:59:43 +0300
Subject: [PATCH] Update tests for py3-jsonschema 4.21

4.21 changed the format of error messages.
---
 tests/unittests/config/test_cc_apk_configure.py      |  4 ++--
 tests/unittests/config/test_cc_apt_configure.py      | 12 ++++++------
 tests/unittests/config/test_cc_bootcmd.py            |  4 ++--
 tests/unittests/config/test_cc_ca_certs.py           |  4 ++--
 tests/unittests/config/test_cc_chef.py               |  4 ++--
 tests/unittests/config/test_cc_lxd.py                |  2 +-
 tests/unittests/config/test_cc_mounts.py             |  4 ++--
 .../config/test_cc_package_update_upgrade_install.py |  2 +-
 tests/unittests/config/test_cc_runcmd.py             |  2 +-
 tests/unittests/config/test_cc_set_passwords.py      |  2 +-
 tests/unittests/config/test_cc_snap.py               | 10 +++++-----
 tests/unittests/config/test_cc_write_files.py        |  2 +-
 tests/unittests/config/test_cc_yum_add_repo.py       |  2 +-
 13 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/tests/unittests/config/test_cc_apk_configure.py b/tests/unittests/config/test_cc_apk_configure.py
index 273f7e8..d040058 100644
--- a/tests/unittests/config/test_cc_apk_configure.py
+++ b/tests/unittests/config/test_cc_apk_configure.py
@@ -355,7 +355,7 @@ class TestApkConfigureSchema:
             (
                 {"apk_repos": {"alpine_repo": {}}},
                 "apk_repos.alpine_repo: 'version' is a required property,"
-                " apk_repos.alpine_repo: {} does not have enough properties",
+                " apk_repos.alpine_repo: {} should be non-empty",
             ),
             (
                 {"apk_repos": {"alpine_repo": True}},
@@ -368,7 +368,7 @@ class TestApkConfigureSchema:
             ),
             (
                 {"apk_repos": {}},
-                "apk_repos: {} does not have enough properties",
+                "apk_repos: {} should be non-empty",
             ),
             (
                 {"apk_repos": {"local_repo_base_url": None}},
diff --git a/tests/unittests/config/test_cc_apt_configure.py b/tests/unittests/config/test_cc_apt_configure.py
index bd1bb96..519b259 100644
--- a/tests/unittests/config/test_cc_apt_configure.py
+++ b/tests/unittests/config/test_cc_apt_configure.py
@@ -32,7 +32,7 @@ class TestAPTConfigureSchema:
                     " ('boguskey' was unexpected)"
                 ),
             ),
-            ({"apt": {}}, "apt: {} does not have enough properties"),
+            ({"apt": {}}, "apt: {} should be non-empty"),
             (
                 {"apt": {"preserve_sources_list": 1}},
                 "apt.preserve_sources_list: 1 is not of type 'boolean'",
@@ -43,7 +43,7 @@ class TestAPTConfigureSchema:
             ),
             (
                 {"apt": {"disable_suites": []}},
-                re.escape("apt.disable_suites: [] is too short"),
+                re.escape("apt.disable_suites: [] should be non-empty"),
             ),
             (
                 {"apt": {"disable_suites": [1]}},
@@ -63,7 +63,7 @@ class TestAPTConfigureSchema:
             ),
             (
                 {"apt": {"primary": []}},
-                re.escape("apt.primary: [] is too short"),
+                re.escape("apt.primary: [] should be non-empty"),
             ),
             (
                 {"apt": {"primary": ["nonobj"]}},
@@ -100,7 +100,7 @@ class TestAPTConfigureSchema:
             ),
             (
                 {"apt": {"primary": [{"arches": ["amd64"], "search": []}]}},
-                re.escape("apt.primary.0.search: [] is too short"),
+                re.escape("apt.primary.0.search: [] should be non-empty"),
             ),
             (
                 {
@@ -132,7 +132,7 @@ class TestAPTConfigureSchema:
             ),
             (
                 {"apt": {"debconf_selections": {}}},
-                "apt.debconf_selections: {} does not have enough properties",
+                "apt.debconf_selections: {} should be non-empty",
             ),
             (
                 {"apt": {"sources_list": True}},
@@ -168,7 +168,7 @@ class TestAPTConfigureSchema:
             ),
             (
                 {"apt": {"sources": {"opaquekey": {}}}},
-                "apt.sources.opaquekey: {} does not have enough properties",
+                "apt.sources.opaquekey: {} should be non-empty",
             ),
             (
                 {"apt": {"sources": {"opaquekey": {"boguskey": True}}}},
diff --git a/tests/unittests/config/test_cc_bootcmd.py b/tests/unittests/config/test_cc_bootcmd.py
index ee84f8d..80a5325 100644
--- a/tests/unittests/config/test_cc_bootcmd.py
+++ b/tests/unittests/config/test_cc_bootcmd.py
@@ -128,11 +128,11 @@ class TestBootCMDSchema:
                 "Cloud config schema errors: bootcmd: 1 is not of type"
                 " 'array'",
             ),
-            ({"bootcmd": []}, re.escape("bootcmd: [] is too short")),
+            ({"bootcmd": []}, re.escape("bootcmd: [] should be non-empty")),
             (
                 {"bootcmd": []},
                 re.escape(
-                    "Cloud config schema errors: bootcmd: [] is too short"
+                    "Cloud config schema errors: bootcmd: [] should be non-empty"
                 ),
             ),
             (
diff --git a/tests/unittests/config/test_cc_ca_certs.py b/tests/unittests/config/test_cc_ca_certs.py
index c40f1e8..e21ddb8 100644
--- a/tests/unittests/config/test_cc_ca_certs.py
+++ b/tests/unittests/config/test_cc_ca_certs.py
@@ -396,7 +396,7 @@ class TestCACertsSchema:
             ),
             (
                 {"ca_certs": {}},
-                re.escape("ca_certs: {} does not have enough properties"),
+                re.escape("ca_certs: {} should be non-empty"),
             ),
             (
                 {"ca_certs": {"boguskey": 1}},
@@ -415,7 +415,7 @@ class TestCACertsSchema:
             ),
             (
                 {"ca_certs": {"trusted": []}},
-                re.escape("ca_certs.trusted: [] is too short"),
+                re.escape("ca_certs.trusted: [] should be non-empty"),
             ),
         ),
     )
diff --git a/tests/unittests/config/test_cc_chef.py b/tests/unittests/config/test_cc_chef.py
index 9d8ba1f..20243db 100644
--- a/tests/unittests/config/test_cc_chef.py
+++ b/tests/unittests/config/test_cc_chef.py
@@ -306,7 +306,7 @@ class TestBootCMDSchema:
             ),
             (
                 {"chef": {}},
-                re.escape(" chef: {} does not have enough properties"),
+                re.escape(" chef: {} should be non-empty"),
             ),
             (
                 {"chef": {"boguskey": True}},
@@ -321,7 +321,7 @@ class TestBootCMDSchema:
             ),
             (
                 {"chef": {"directories": []}},
-                re.escape("chef.directories: [] is too short"),
+                re.escape("chef.directories: [] should be non-empty"),
             ),
             (
                 {"chef": {"directories": [1]}},
diff --git a/tests/unittests/config/test_cc_lxd.py b/tests/unittests/config/test_cc_lxd.py
index 4298562..b2476b7 100644
--- a/tests/unittests/config/test_cc_lxd.py
+++ b/tests/unittests/config/test_cc_lxd.py
@@ -385,7 +385,7 @@ class TestLXDSchema:
             # Require bridge.mode
             ({"lxd": {"bridge": {}}}, "bridge: 'mode' is a required property"),
             # Require init or bridge keys
-            ({"lxd": {}}, "lxd: {} does not have enough properties"),
+            ({"lxd": {}}, "lxd: {} should be non-empty"),
             # Require some non-empty preseed config of type string
             ({"lxd": {"preseed": {}}}, "not of type 'string'"),
             ({"lxd": {"preseed": ""}}, None),
diff --git a/tests/unittests/config/test_cc_mounts.py b/tests/unittests/config/test_cc_mounts.py
index bd3432a..9b1943a 100644
--- a/tests/unittests/config/test_cc_mounts.py
+++ b/tests/unittests/config/test_cc_mounts.py
@@ -584,9 +584,9 @@ class TestMountsSchema:
         "config, error_msg",
         [
             # We expect to see one mount if provided in user-data.
-            ({"mounts": []}, re.escape("mounts: [] is too short")),
+            ({"mounts": []}, re.escape("mounts: [] should be non-empty")),
             # Disallow less than 1 item per mount entry
-            ({"mounts": [[]]}, re.escape("mounts.0: [] is too short")),
+            ({"mounts": [[]]}, re.escape("mounts.0: [] should be non-empty")),
             # Disallow more than 6 items per mount entry
             ({"mounts": [["1"] * 7]}, "mounts.0:.* is too long"),
             # Disallow mount_default_fields will anything other than 6 items
diff --git a/tests/unittests/config/test_cc_package_update_upgrade_install.py b/tests/unittests/config/test_cc_package_update_upgrade_install.py
index 07c5b93..68ed4ec 100644
--- a/tests/unittests/config/test_cc_package_update_upgrade_install.py
+++ b/tests/unittests/config/test_cc_package_update_upgrade_install.py
@@ -17,7 +17,7 @@ class TestPackageUpdateUpgradeSchema:
             # packages list with three entries (2 required)
             ({"packages": ["p1", ["p2", "p3", "p4"]]}, ""),
             # empty packages list
-            ({"packages": []}, "is too short"),
+            ({"packages": []}, "should be non-empty"),
             (
                 {"apt_update": False},
                 (
diff --git a/tests/unittests/config/test_cc_runcmd.py b/tests/unittests/config/test_cc_runcmd.py
index 9fdc575..3304272 100644
--- a/tests/unittests/config/test_cc_runcmd.py
+++ b/tests/unittests/config/test_cc_runcmd.py
@@ -90,7 +90,7 @@ class TestRunCmdSchema:
             ({"runcmd": ["echo bye", "echo bye"]}, None),
             # Invalid schemas
             ({"runcmd": 1}, "1 is not of type 'array'"),
-            ({"runcmd": []}, r"runcmd: \[\] is too short"),
+            ({"runcmd": []}, r"runcmd: \[\] should be non-empty"),
             (
                 {
                     "runcmd": [
diff --git a/tests/unittests/config/test_cc_set_passwords.py b/tests/unittests/config/test_cc_set_passwords.py
index 1a9fcd3..89a4522 100644
--- a/tests/unittests/config/test_cc_set_passwords.py
+++ b/tests/unittests/config/test_cc_set_passwords.py
@@ -718,7 +718,7 @@ class TestSetPasswordsSchema:
             (
                 {"chpasswd": {"list": []}},
                 pytest.raises(
-                    SchemaValidationError, match=r"\[\] is too short"
+                    SchemaValidationError, match=r"\[\] should be non-empty"
                 ),
             ),
         ],
diff --git a/tests/unittests/config/test_cc_snap.py b/tests/unittests/config/test_cc_snap.py
index 9ca0da3..ca7d92d 100644
--- a/tests/unittests/config/test_cc_snap.py
+++ b/tests/unittests/config/test_cc_snap.py
@@ -279,15 +279,15 @@ class TestSnapSchema:
                 {"snap": {"commands": ["ls"], "invalid-key": ""}},
                 "Additional properties are not allowed",
             ),
-            ({"snap": {}}, "{} does not have enough properties"),
+            ({"snap": {}}, "{} should be non-empty"),
             (
                 {"snap": {"commands": "broken"}},
                 "'broken' is not of type 'object', 'array'",
             ),
-            ({"snap": {"commands": []}}, r"snap.commands: \[\] is too short"),
+            ({"snap": {"commands": []}}, r"snap.commands: \[\] should be non-empty"),
             (
                 {"snap": {"commands": {}}},
-                r"snap.commands: {} does not have enough properties",
+                r"snap.commands: {} should be non-empty",
             ),
             ({"snap": {"commands": [123]}}, ""),
             ({"snap": {"commands": {"01": 123}}}, ""),
@@ -302,10 +302,10 @@ class TestSnapSchema:
                 {"snap": {"assertions": "broken"}},
                 "'broken' is not of type 'object', 'array'",
             ),
-            ({"snap": {"assertions": []}}, r"\[\] is too short"),
+            ({"snap": {"assertions": []}}, r"\[\] should be non-empty"),
             (
                 {"snap": {"assertions": {}}},
-                r"\{} does not have enough properties",
+                r"\{} should be non-empty",
             ),
         ],
     )
diff --git a/tests/unittests/config/test_cc_write_files.py b/tests/unittests/config/test_cc_write_files.py
index 8facf15..d77ddf6 100644
--- a/tests/unittests/config/test_cc_write_files.py
+++ b/tests/unittests/config/test_cc_write_files.py
@@ -222,7 +222,7 @@ class TestWriteFilesSchema:
         [
             # Top-level write_files type validation
             ({"write_files": 1}, "write_files: 1 is not of type 'array'"),
-            ({"write_files": []}, re.escape("write_files: [] is too short")),
+            ({"write_files": []}, re.escape("write_files: [] should be non-empty")),
             (
                 {"write_files": [{}]},
                 "write_files.0: 'path' is a required property",
diff --git a/tests/unittests/config/test_cc_yum_add_repo.py b/tests/unittests/config/test_cc_yum_add_repo.py
index 6da4460..4efa4ff 100644
--- a/tests/unittests/config/test_cc_yum_add_repo.py
+++ b/tests/unittests/config/test_cc_yum_add_repo.py
@@ -139,7 +139,7 @@ class TestAddYumRepoSchema:
             ),
             (
                 {"yum_repos": {}},
-                re.escape("yum_repos: {} does not have enough properties"),
+                re.escape("yum_repos: {} should be non-empty"),
             ),
             # baseurl required
             (
-- 
2.45.2

