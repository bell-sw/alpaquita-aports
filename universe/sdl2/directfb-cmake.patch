Patch-Source: https://github.com/libsdl-org/SDL/pull/6084
this is WIP, but nice to fix cmake and get some testing in
--
From f497d72143dbcf3fdee90927200a5c308e12dc45 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 19 Aug 2022 18:14:23 +0200
Subject: [PATCH 01/10] cmake: Fix CMake warning message + fix code formatting

---
 VisualC/pkg-support/cmake/sdl2-config-version.cmake | 2 +-
 VisualC/pkg-support/cmake/sdl2-config.cmake         | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/VisualC/pkg-support/cmake/sdl2-config-version.cmake b/VisualC/pkg-support/cmake/sdl2-config-version.cmake
index 42bb6e7431cc..b90cf9954887 100644
--- a/VisualC/pkg-support/cmake/sdl2-config-version.cmake
+++ b/VisualC/pkg-support/cmake/sdl2-config-version.cmake
@@ -4,7 +4,7 @@
 # This file is meant to be placed in a cmake subfolder of SDL2-devel-2.x.y-VC
 
 if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/../include/SDL_version.h")
-    message(AUTHOR_WARNING "Could not find SDL_version.h. This script is meant to be placed in the root of SDL2-devel-2.x.y-VC")
+    message(AUTHOR_WARNING "Could not find SDL_version.h. This script is meant to be placed in a cmake subfolder of SDL2-devel-2.x.y-VC")
     return()
 endif()
 
diff --git a/VisualC/pkg-support/cmake/sdl2-config.cmake b/VisualC/pkg-support/cmake/sdl2-config.cmake
index 1a25259c0ea4..7a4115a29ca6 100644
--- a/VisualC/pkg-support/cmake/sdl2-config.cmake
+++ b/VisualC/pkg-support/cmake/sdl2-config.cmake
@@ -82,8 +82,8 @@ if(EXISTS "${_sdl2main_library}")
     if(NOT TARGET SDL2::SDL2main)
         add_library(SDL2::SDL2main STATIC IMPORTED)
         set_target_properties(SDL2::SDL2main
-        PROPERTIES
-            IMPORTED_LOCATION "${_sdl2main_library}"
+            PROPERTIES
+                IMPORTED_LOCATION "${_sdl2main_library}"
         )
     endif()
     set(SDL2_SDL2main_FOUND TRUE)

From f18b4f6f6fc19bcb487880d4cfe677a5515778e8 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Tue, 23 Aug 2022 01:18:43 +0200
Subject: [PATCH 02/10] cmake: start infra to differentiate between
 public/private/interface

These newer variables should make it easier to define where variables end up.
The use of targets allows the generated SDL2Config.cmake to be fully relocatable.
---
 CMakeLists.txt     | 65 +++++++++++++++++++++++++++++++++++++++-------
 cmake/common.cmake | 36 +++++++++++++++++++++++++
 cmake/macros.cmake | 56 +++++++++++++++++++++++++++++++++++++++
 configure          |  6 +++++
 configure.ac       |  3 +++
 sdl2.pc.in         |  2 +-
 6 files changed, 157 insertions(+), 11 deletions(-)
 create mode 100644 cmake/common.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 44e4d725ecd9..ba8e310e1077 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -323,6 +323,24 @@ endif()
 set(SDL_LIBS "-lSDL2")
 set(SDL_CFLAGS )
 
+# (Third-party) libraries
+# List of libraries only used when building SDL
+set(SDL_LINK_LIBRARIES_BUILD_PRIVATE )
+# List of libraries used when building SDL + users of static SDL
+set(SDL_LINK_LIBRARIES_PRIVATE )
+# List of libraries used when building SDL + users of SDL
+set(SDL_LINK_LIBRARIES_PUBLIC )
+
+# Third-party pkg-config module specs
+# Extra module specs when using SDL
+set(SDL_PKGCONFIG_MODULESPECS_PUBLIC )
+# Extra module specs when using static SDL
+set(SDL_PKGCONFIG_MODULESPECS_PRIVATE )
+# Extra include directories specs when using SDL
+set(SDL_PKGCONFIG_INCLUDES_PUBLIC )
+
+# Third-party sdl-config flags
+
 # When building shared lib for Windows with MinGW,
 # avoid the DLL having a "lib" prefix
 if(WINDOWS)
@@ -2863,19 +2881,21 @@ if(NOT WINDOWS OR CYGWIN OR MINGW)
     set(ENABLE_STATIC_FALSE "")
   endif()
   if(SDL_SHARED)
-    set(PKGCONFIG_LIBS_PRIV "
-Libs.private:")
+    set(PKGCONFIG_LIBS_PRIV "\nLibs.private:")
+    set(PKGCONFIG_REQUIRES_PRIV "\nRequires.private:")
     set(ENABLE_SHARED_TRUE "")
     set(ENABLE_SHARED_FALSE "#")
   else()
     set(PKGCONFIG_LIBS_PRIV "")
+    set(PKGCONFIG_REQUIRES_PRIV "")
     set(ENABLE_SHARED_TRUE "#")
     set(ENABLE_SHARED_FALSE "")
   endif()
 
   # Clean up the different lists
   listtostr(EXTRA_LIBS _EXTRA_LIBS "-l")
-  set(SDL_STATIC_LIBS ${SDL_LIBS} ${EXTRA_LDFLAGS} ${_EXTRA_LIBS})
+  listtostr(EXTRA_LDFLAGS _EXTRA_LDFLAGS " ")
+  set(SDL_STATIC_LIBS ${_EXTRA_LDFLAGS} ${_EXTRA_LIBS})
   list(REMOVE_DUPLICATES SDL_STATIC_LIBS)
   listtostr(SDL_STATIC_LIBS _SDL_STATIC_LIBS)
   set(SDL_STATIC_LIBS ${_SDL_STATIC_LIBS})
@@ -2883,16 +2903,27 @@ Libs.private:")
   set(SDL_LIBS ${_SDL_LIBS})
   listtostr(SDL_CFLAGS _SDL_CFLAGS "")
   set(SDL_CFLAGS ${_SDL_CFLAGS})
+  listtostr(SDL_PKGCONFIG_MODULESPECS_PUBLIC SDL_REQUIRES "")
+  listtostr(SDL_PKGCONFIG_MODULESPECS_PRIVATE SDL_REQUIRES_PRIVATE "")
+
+  # sdl2-config shell script needs expanded targets
+  collect_flags_from_target_list(FLAGS_3RD_PRIVATE SDL_LINK_LIBRARIES_PRIVATE)
+  collect_flags_from_target_list(FLAGS_3RD_PUBLIC SDL_LINK_LIBRARIES_PUBLIC)
+  set(sdl_libs_original "${SDL_LIBS}")
+  set(sdl_static_libs_original "${SDL_STATIC_LIBS}")
+  set(SDL_LIBS "${SDL_LIBS} ${FLAGS_3RD_PUBLIC_LDFLAGS}")
+  set(SDL_STATIC_LIBS "${SDL_STATIC_LIBS} ${FLAGS_3RD_PRIVATE_LDFLAGS}")
 
-  # MESSAGE(STATUS "SDL_LIBS: ${SDL_LIBS}")
-  # MESSAGE(STATUS "SDL_STATIC_LIBS: ${SDL_STATIC_LIBS}")
+  configure_file("${SDL2_SOURCE_DIR}/sdl2-config.in"
+      "${SDL2_BINARY_DIR}/sdl2-config" @ONLY)
+
+  # sdl2.pc uses standard flags + module specifiers
+  # SDL2Config.cmake uses standard flags + CMake targets + CMake targets
+  set(SDL_LIBS "${sdl_libs_original}")
+  set(SDL_STATIC_LIBS "${sdl_static_libs_original}")
 
   configure_file("${SDL2_SOURCE_DIR}/sdl2.pc.in"
     "${SDL2_BINARY_DIR}/sdl2.pc" @ONLY)
-  configure_file("${SDL2_SOURCE_DIR}/sdl2-config.in"
-    "${SDL2_BINARY_DIR}/sdl2-config")
-  configure_file("${SDL2_SOURCE_DIR}/sdl2-config.in"
-    "${SDL2_BINARY_DIR}/sdl2-config" @ONLY)
   configure_file("${SDL2_SOURCE_DIR}/SDL2.spec.in"
     "${SDL2_BINARY_DIR}/SDL2.spec" @ONLY)
 endif()
@@ -2995,11 +3026,17 @@ if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
   message(STATUS " CMAKE_C_FLAGS_DEBUG:   ${CMAKE_C_FLAGS_DEBUG}")
   message(STATUS " CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
 endif()
+
+collect_flags_from_target_list(FLAGS_3RD_BUILD_PRIVATE SDL_LINK_LIBRARIES_BUILD_PRIVATE)
+collect_flags_from_target_list(FLAGS_3RD_PRIVATE SDL_LINK_LIBRARIES_PRIVATE)
+collect_flags_from_target_list(FLAGS_3RD_PUBLIC SDL_LINK_LIBRARIES_PUBLIC)
+set(ldflags_3rdparth "${FLAGS_3RD_BUILD_PRIVATE_LDFLAGS} ${FLAGS_3RD_PRIVATE_LDFLAGS} ${FLAGS_3RD_PUBLIC_LDFLAGS}")
+
 message(STATUS "")
 message(STATUS " CFLAGS:        ${CMAKE_C_FLAGS}")
 message(STATUS " EXTRA_CFLAGS:  ${EXTRA_CFLAGS}")
 message(STATUS " EXTRA_LDFLAGS: ${EXTRA_LDFLAGS} ${EXTRA_LDFLAGS_BUILD}")
-message(STATUS " EXTRA_LIBS:    ${EXTRA_LIBS}")
+message(STATUS " EXTRA_LIBS:    ${_EXTRA_LIBS} ${ldflags_3rdparth}")
 message(STATUS "")
 message(STATUS " Build Shared Library: ${SDL_SHARED}")
 message(STATUS " Build Static Library: ${SDL_STATIC}")
@@ -3112,6 +3149,10 @@ if(SDL_SHARED)
   endif()
   # FIXME: if CMAKE_VERSION >= 3.13, use target_link_options for EXTRA_LDFLAGS
   target_link_libraries(SDL2 PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS} ${EXTRA_LDFLAGS_BUILD})
+  target_link_libraries(SDL2 PUBLIC ${SDL_LINK_LIBRARIES_PUBLIC})
+  target_link_libraries(SDL2 PRIVATE ${SDL_LINK_LIBRARIES_PRIVATE})
+  target_link_libraries(SDL2 PRIVATE "$<BUILD_INTERFACE:${SDL_LINK_LIBRARIES_BUILD_PRIVATE}>")
+
   target_include_directories(SDL2 PUBLIC
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include>"
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>"
@@ -3148,6 +3189,9 @@ if(SDL_STATIC)
   # TODO: Win32 platforms keep the same suffix .lib for import and static
   # libraries - do we need to consider this?
   target_link_libraries(SDL2-static PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS})
+  target_link_libraries(SDL2-static PUBLIC ${SDL_LINK_LIBRARIES_PUBLIC})
+  target_link_libraries(SDL2-static PRIVATE ${SDL_LINK_LIBRARIES_PRIVATE})
+  target_link_libraries(SDL2-static PRIVATE "$<BUILD_INTERFACE:${SDL_LINK_LIBRARIES_BUILD_PRIVATE}>")
   target_include_directories(SDL2-static PUBLIC
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include>"
       "$<BUILD_INTERFACE:${SDL2_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>"
@@ -3283,6 +3327,7 @@ if(NOT SDL2_DISABLE_INSTALL)
     FILES
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2Config.cmake
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2ConfigVersion.cmake
+      cmake/common.cmake
     DESTINATION ${PKG_PREFIX}
     COMPONENT Devel
   )
diff --git a/cmake/common.cmake b/cmake/common.cmake
new file mode 100644
index 000000000000..304a6738a913
--- /dev/null
+++ b/cmake/common.cmake
@@ -0,0 +1,36 @@
+function(sdl_find_soname_library SOFILENAME LIB_FILEPATH)
+  if(WIN32 OR OS2)
+    set(${SOFILENAME} "${SOFILENAME}-NOTFOUND" PARENT_SCOPE)
+  else()
+    # reduce the library name for dynamic linking
+    get_filename_component(LIB_REALPATH "${LIB_FILEPATH}" REALPATH)  # resolves symlinks
+    get_filename_component(LIB_REALNAME "${LIB_REALPATH}" NAME)
+    if(LIB_REALPATH STREQUAL "${LIB_FILEPATH}")
+      set(${SOFILENAME} "${SOFILENAME}-NOTFOUND" PARENT_SCOPE)
+    else()
+      if(APPLE)
+        string(REGEX REPLACE "(\\.[0-9]*)\\.[0-9\\.]*dylib$" "\\1.dylib" LIB_REGEXD "${LIB_REALNAME}")
+      else()
+        string(REGEX REPLACE "(\\.[0-9]*)\\.[0-9\\.]*$" "\\1" LIB_REGEXD "${LIB_REALNAME}")
+      endif()
+      set(${SOFILENAME} "${LIB_REGEXD}" PARENT_SCOPE)
+    endif()
+  endif()
+endfunction()
+
+function(sdl_add_soname_library TARGET)
+  get_target_property(lib_filepath ${TARGET} IMPORTED_LOCATION)
+  sdl_find_soname_library(soname "${lib_filepath}")
+  if(soname)
+    set_target_properties(${TARGET}
+      PROPERTIES
+        IMPORTED_SONAME "${soname}"
+        IMPORTED_NO_SONAME "0"
+    )
+  else()
+    set_target_properties(${TARGET}
+      PROPERTIES
+        IMPORTED_NO_SONAME "1"
+    )
+  endif()
+endfunction()
\ No newline at end of file
diff --git a/cmake/macros.cmake b/cmake/macros.cmake
index 267a8afb1274..bbb61540ed67 100644
--- a/cmake/macros.cmake
+++ b/cmake/macros.cmake
@@ -76,6 +76,7 @@ macro(LISTTOSTR _LIST _OUTPUT)
   foreach(_ITEM ${${_LIST}})
     set(${_OUTPUT} "${${_OUTPUT}} ${_LPREFIX}${_ITEM}")
   endforeach()
+  string(STRIP "${_OUTPUT}" _OUTPUT)
 endmacro()
 
 macro(LISTTOSTRREV _LIST _OUTPUT)
@@ -90,6 +91,7 @@ macro(LISTTOSTRREV _LIST _OUTPUT)
   foreach(_ITEM ${${_LIST}})
     set(${_OUTPUT} "${_LPREFIX}${_ITEM} ${${_OUTPUT}}")
   endforeach()
+  string(STRIP "${_OUTPUT}" _OUTPUT)
 endmacro()
 
 if(${CMAKE_VERSION} VERSION_LESS "3.16.0")
@@ -111,3 +113,57 @@ if(CMAKE_VERSION VERSION_LESS 3.13.0)
     link_directories(${ARGN})
   endmacro()
 endif()
+
+function(get_cflags_from_target OUTPUT TARGET)
+  get_target_property(incdirs ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
+  get_target_property(cflags ${TARGET} INTERFACE_COMPILE_OPTIONS)
+  set(result )
+  foreach(incdir IN LISTS incdirs)
+    if(incdir)
+      list(APPEND result "-I${incdir}")
+    endif()
+  endforeach()
+  if(cflags)
+    list(APPEND result ${cflags})
+  endif()
+  set("${OUTPUT}" "${result}" PARENT_SCOPE)
+endfunction()
+
+function(get_ldflags_from_target OUTPUT TARGET)
+  get_target_property(imploc ${TARGET} IMPORTED_LOCATION)
+  get_filename_component(libdir "${imploc}" DIRECTORY)
+  get_filename_component(libname "${imploc}" NAME_WE)
+  if(libstem MATCHES "^lib.*")
+    string(SUBSTRING "${libname}" 3 -1 libname)
+  endif()
+  set(result "-L${libdir} -l${libname}")
+
+  get_target_property(intlibs ${TARGET} INTERFACE_LINK_LIBRARIES)
+  if(intlibs)
+    set(result "${result} ${intlibs}")
+  endif()
+  get_target_property(intldflags ${TARGET} INTERFACE_LINK_FLAGS)
+  if(intldflags)
+    set(result "${result} ${intldflags}")
+  endif()
+  set("${OUTPUT}" "${result}" PARENT_SCOPE)
+endfunction()
+
+function(collect_flags_from_target_list PREFIX TARGET_LIST)
+  set(all_cflags)
+  set(all_ldflags)
+  foreach(target ${${TARGET_LIST}})
+    get_cflags_from_target(cflags ${target})
+    if(cflags)
+      list(APPEND all_cflags ${cflags})
+    endif()
+    get_ldflags_from_target(ldflags ${target})
+    if(ldflags)
+      list(APPEND all_ldflags ${ldflags})
+    endif()
+  endforeach()
+  string(REPLACE ";" " " all_cflags "${all_cflags}")
+  string(REPLACE ";" " " all_ldflags "${all_ldflags}")
+  set("${PREFIX}_CFLAGS" "${all_cflags}" PARENT_SCOPE)
+  set("${PREFIX}_LDFLAGS" "${all_ldflags}" PARENT_SCOPE)
+endfunction()
diff --git a/configure b/configure
index f626d12e4c80..c606102e5887 100755
--- a/configure
+++ b/configure
@@ -679,6 +679,9 @@ ENABLE_SHARED_TRUE
 PKGCONFIG_LIBS_PRIV
 SDL_RLD_FLAGS
 SDL_STATIC_LIBS
+SDL_REQUIRES_PRIVATE
+PKGCONFIG_REQUIRES_PRIV
+SDL_REQUIRES
 SDL_LIBS
 SDL_CFLAGS
 bin_prefix_relpath
@@ -29626,6 +29629,9 @@ done
 
 
 
+
+
+
 if test x$enable_shared = xyes; then
     PKGCONFIG_LIBS_PRIV="
 Libs.private:"
diff --git a/configure.ac b/configure.ac
index 4a4023e19409..23468b2fc7f0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4785,6 +4785,9 @@ AC_SUBST([bin_prefix_relpath])
 dnl Expand the cflags and libraries needed by apps using SDL
 AC_SUBST(SDL_CFLAGS)
 AC_SUBST(SDL_LIBS)
+AC_SUBST(SDL_REQUIRES)
+AC_SUBST(PKGCONFIG_REQUIRES_PRIV)
+AC_SUBST(SDL_REQUIRES_PRIVATE)
 AC_SUBST(SDL_STATIC_LIBS)
 AC_SUBST(SDL_RLD_FLAGS)
 if test x$enable_shared = xyes; then
diff --git a/sdl2.pc.in b/sdl2.pc.in
index ad1a9574fe27..4d07cc12abe1 100644
--- a/sdl2.pc.in
+++ b/sdl2.pc.in
@@ -8,7 +8,7 @@ includedir=@includedir@
 Name: sdl2
 Description: Simple DirectMedia Layer is a cross-platform multimedia library designed to provide low level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.
 Version: @SDL_VERSION@
-Requires:
+Requires: @SDL_REQUIRES@ @PKGCONFIG_REQUIRES_PRIV@ @SDL_REQUIRES_PRIVATE@
 Conflicts:
 Libs: -L${libdir} @SDL_RLD_FLAGS@ @SDL_LIBS@ @PKGCONFIG_LIBS_PRIV@ @SDL_STATIC_LIBS@
 Cflags: -I${includedir} -I${includedir}/SDL2 @SDL_CFLAGS@

From 77713901fe0b2ea98b9f66bad1ae8f626e1b4a33 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Tue, 23 Aug 2022 01:28:47 +0200
Subject: [PATCH 03/10] cmake: find DirectFB through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt              |  1 +
 SDL2Config.cmake.in         | 17 ++++++++-
 cmake/FindDirectFBSDL.cmake | 69 +++++++++++++++++++++++++++++++++++++
 cmake/common.cmake          |  2 +-
 cmake/sdlchecks.cmake       | 23 ++++++++-----
 5 files changed, 102 insertions(+), 10 deletions(-)
 create mode 100644 cmake/FindDirectFBSDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ba8e310e1077..f562279d16be 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3328,6 +3328,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2Config.cmake
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2ConfigVersion.cmake
       cmake/common.cmake
+      cmake/FindDirectFBSDL.cmake
     DESTINATION ${PKG_PREFIX}
     COMPONENT Devel
   )
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 8c18aa5d44d8..7446e53ca6cc 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -1,5 +1,6 @@
 # sdl2 cmake project-config input for CMakeLists.txt script
 
+include(CMakeFindDependencyMacro)
 include(FeatureSummary)
 set_package_properties(SDL2 PROPERTIES
   URL "https://www.libsdl.org/"
@@ -32,6 +33,19 @@ endif()
 
 check_required_components(SDL2)
 
+# Find dependencies of SDL2
+
+set(_sdl_cmake_module_path ${CMAKE_MODULE_PATH})
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
+
+set(_sdl_directfb @HAVE_DIRECTFB@)
+if(_sdl_directfb)
+  find_dependency(DirectFBSDL)
+endif()
+unset(_sdl_directfb)
+
+set(CMAKE_MODULE_PATH ${_sdl_cmake_module_path})
+
 # Create SDL2::SDL2 alias for static-only builds
 if(TARGET SDL2::SDL2-static AND NOT TARGET SDL2::SDL2)
   if(CMAKE_VERSION VERSION_LESS "3.18")
@@ -62,4 +76,5 @@ if(TARGET SDL2::SDL2main)
   list(INSERT SDL2_STATIC_LIBRARIES 0 SDL2::SDL2main)
 endif()
 
-set(SDL2TEST_LIBRARY SDL2::SDL2test)
\ No newline at end of file
+set(SDL2TEST_LIBRARY SDL2::SDL2test)
+
diff --git a/cmake/FindDirectFBSDL.cmake b/cmake/FindDirectFBSDL.cmake
new file mode 100644
index 000000000000..83d076cc900d
--- /dev/null
+++ b/cmake/FindDirectFBSDL.cmake
@@ -0,0 +1,69 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(DirectFBSDL_PKGCONFIG_MODULESPEC directfb>=1.0.0)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_DIRECTFB "${DirectFBSDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(DirectFBSDL_INCLUDE_PATHS
+  NAMES "directfb.h"
+  PATHS ${PKG_DIRECTFB_INCLUDE_DIRS}
+  PATH_SUFFIXES directfb
+)
+
+find_library(DirectFBSDL_LIBRARY
+  NAMES directfb
+  PATHS ${PKG_DIRECTFB_LIBRARY_DIRS}
+)
+
+set(DirectFBSDL_COMPILE_FLAGS "${PKG_DIRECTFB_CFLAGS}" CACHE STRING "Extra compile flags of DirectFB")
+
+set(DirectFBSDL_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of DirectFB")
+
+set(DirectFBSDL_LINK_FLAGS "${PKG_DIRECTFB_LDFLAGS}" CACHE STRING "Extra link flags of DirectFB")
+
+set(_directfb_required_vars )
+
+set(_directfb_library_required 0)
+if(NOT DirectFBSDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST DirectFBSDL_FIND_COMPONENTS)
+  list(APPEND _directfb_required_vars DirectFBSDL_LIBRARY)
+  set(_directfb_library_required 1)
+endif()
+
+set(_directfb_headers_required 0)
+if(NOT DirectFBSDL_FIND_COMPONENTS OR "HEADERS" IN_LIST DirectFBSDL_FIND_COMPONENTS)
+  set(_directfb_headers_required 1)
+endif()
+list(APPEND _directfb_required_vars DirectFBSDL_INCLUDE_PATHS)
+
+find_package_handle_standard_args(DirectFBSDL
+  REQUIRED_VARS ${_directfb_required_vars}
+)
+
+if(DirectFBSDL_FOUND)
+  if(NOT TARGET DirectFBSDL::Headers AND _directfb_headers_required)
+    add_library(DirectFBSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(DirectFBSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${DirectFBSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${DirectFBSDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET DirectFBSDL::DirectFBSDL AND _directfb_library_required)
+    add_library(DirectFBSDL::DirectFBSDL SHARED IMPORTED)
+    set_target_properties(DirectFBSDL::DirectFBSDL
+      PROPERTIES
+        IMPORTED_LOCATION "${DirectFBSDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${DirectFBSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${DirectFBSDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${DirectFBSDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${DirectFBSDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(DirectFBSDL::DirectFBSDL)
+  endif()
+endif()
diff --git a/cmake/common.cmake b/cmake/common.cmake
index 304a6738a913..851434574608 100644
--- a/cmake/common.cmake
+++ b/cmake/common.cmake
@@ -33,4 +33,4 @@ function(sdl_add_soname_library TARGET)
         IMPORTED_NO_SONAME "1"
     )
   endif()
-endfunction()
\ No newline at end of file
+endfunction()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index e1939dc30091..128cafc301c0 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -761,24 +761,31 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckDirectFB)
   if(SDL_DIRECTFB)
-    pkg_check_modules(PKG_DIRECTFB directfb>=1.0.0)
-    if(PKG_DIRECTFB_FOUND)
+    find_package(DirectFBSDL)
+    if(DirectFBSDL_FOUND)
       set(HAVE_DIRECTFB TRUE)
       file(GLOB DIRECTFB_SOURCES ${SDL2_SOURCE_DIR}/src/video/directfb/*.c)
       list(APPEND SOURCE_FILES ${DIRECTFB_SOURCES})
       set(SDL_VIDEO_DRIVER_DIRECTFB 1)
       set(SDL_VIDEO_RENDER_DIRECTFB 1)
-      list(APPEND EXTRA_CFLAGS ${PKG_DIRECTFB_CFLAGS})
-      list(APPEND SDL_CFLAGS ${PKG_DIRECTFB_CFLAGS})
+      get_cflags_from_target(directfb_cflags DirectFBSDL::DirectFBSDL)
+      list(APPEND EXTRA_CFLAGS ${directfb_cflags})
+      list(APPEND SDL_CFLAGS ${directfb_cflags})
+      # directfb.h is publicly visible through SDL_syswm.h
+      list(APPEND SDL_LINK_LIBRARIES_PUBLIC DirectFBSDL::Headers)
       if(SDL_DIRECTFB_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic DirectFB loading")
       endif()
-      FindLibraryAndSONAME("directfb")
-      if(SDL_DIRECTFB_SHARED AND DIRECTFB_LIB AND HAVE_SDL_LOADSO)
-        set(SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC "\"${DIRECTFB_LIB_SONAME}\"")
+      if(SDL_DIRECTFB_SHARED AND TARGET DirectFBSDL::DirectFBSDL AND HAVE_SDL_LOADSO)
+        set(SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:DirectFBSDL::DirectFBSDL>\"")
         set(HAVE_DIRECTFB_SHARED TRUE)
+        # .pc files don't allow to only add include flags of dependency
+        list(APPEND SDL_PKGCONFIG_INCLUDES_PUBLIC ${DirectFBSDL_INCLUDE_PATHS})
       else()
-        list(APPEND EXTRA_LDFLAGS ${PKG_DIRECTFB_LDFLAGS})
+        get_ldflags_from_target(directfb_ldflags DirectFBSDL::DirectFBSDL)
+        list(APPEND EXTRA_LDFLAGS ${directfb_ldflags})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE DirectFBSDL::DirectFBSDL)
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PUBLIC ${DirectFBSDL_PKGCONFIG_MODULESPEC})
       endif()
       set(HAVE_SDL_VIDEO TRUE)
     endif()

From fceb11c9627ac8d9b3a9c3782f87db9232fa025c Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Tue, 23 Aug 2022 01:31:22 +0200
Subject: [PATCH 04/10] cmake: find SndIO through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt           |  1 +
 SDL2Config.cmake.in      |  8 +++++
 cmake/FindSndIOSDL.cmake | 68 ++++++++++++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake    | 15 +++++----
 4 files changed, 84 insertions(+), 8 deletions(-)
 create mode 100644 cmake/FindSndIOSDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f562279d16be..bb99df2b3265 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3329,6 +3329,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2ConfigVersion.cmake
       cmake/common.cmake
       cmake/FindDirectFBSDL.cmake
+      cmake/FindSndIOSDL.cmake
     DESTINATION ${PKG_PREFIX}
     COMPONENT Devel
   )
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 7446e53ca6cc..7af9972744ce 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -44,6 +44,14 @@ if(_sdl_directfb)
 endif()
 unset(_sdl_directfb)
 
+set(_sdl_sndio @HAVE_SNDIO@)
+set(_sdl_sndio_shared @SDL_SNDIO_SHARED@)
+if(_sdl_sndio AND NOT _sdl_sndio_shared)
+  find_dependency(SndIOSDL COMPONENTS LIBRARY)
+endif()
+unset(_sdl_sndio)
+unset(_sdl_sndio_shared)
+
 set(CMAKE_MODULE_PATH ${_sdl_cmake_module_path})
 
 # Create SDL2::SDL2 alias for static-only builds
diff --git a/cmake/FindSndIOSDL.cmake b/cmake/FindSndIOSDL.cmake
new file mode 100644
index 000000000000..7d7d94b79c05
--- /dev/null
+++ b/cmake/FindSndIOSDL.cmake
@@ -0,0 +1,68 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(SndIOSDL_PKGCONFIG_MODULESPEC sndio)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_SNDIO "${SndIOSDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(SndIOSDL_INCLUDE_PATHS
+  NAMES "sndio.h"
+  PATHS ${PKG_SNDIO_INCLUDE_DIRS}
+)
+
+find_library(SndIOSDL_LIBRARY
+  NAMES sndio
+  PATHS ${PKG_SNDIO_LIBRARY_DIRS}
+)
+
+set(SndIOSDL_COMPILE_FLAGS "${PKG_SNDIO_CFLAGS}" CACHE STRING "Extra compile flags of SndIO")
+
+set(SndIOSDL_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of SndIO")
+
+set(SndIOSDL_LINK_FLAGS "${PKG_SNDIO_LDFLAGS_OTHER}" CACHE STRING "Extra link flags of SndIO")
+
+set(_sndio_required_vars )
+
+set(_sndio_library_required 0)
+if(NOT SndIOSDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST SndIOSDL_FIND_COMPONENTS)
+  list(APPEND _sndio_required_vars SndIOSDL_LIBRARY)
+  set(_sndio_library_required 1)
+endif()
+
+set(_sndio_headers_required 0)
+if(NOT SndIOSDL_FIND_COMPONENTS OR "HEADERS" IN_LIST SndIOSDL_FIND_COMPONENTS)
+  set(_sndio_headers_required 1)
+endif()
+list(APPEND _sndio_required_vars SndIOSDL_INCLUDE_PATHS)
+
+find_package_handle_standard_args(SndIOSDL
+  REQUIRED_VARS ${_sndio_required_vars}
+)
+
+if(SndIOSDL_FOUND)
+  if(NOT TARGET SndIOSDL::Headers AND _sndio_headers_required)
+    add_library(SndIOSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(SndIOSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${SndIOSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${SndIOSDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET SndIOSDL::SndIOSDL AND _sndio_library_required)
+    add_library(SndIOSDL::SndIOSDL SHARED IMPORTED)
+    set_target_properties(SndIOSDL::SndIOSDL
+      PROPERTIES
+        IMPORTED_LOCATION "${SndIOSDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${SndIOSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${SndIOSDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${SndIOSDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${SndIOSDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(SndIOSDL::SndIOSDL)
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index 128cafc301c0..b0c3c88c7e18 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -310,10 +310,8 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckSNDIO)
   if(SDL_SNDIO)
-    # TODO: set include paths properly, so the sndio headers are found
-    check_include_file(sndio.h HAVE_SNDIO_H)
-    find_library(D_SNDIO_LIB sndio)
-    if(HAVE_SNDIO_H AND D_SNDIO_LIB)
+    find_package(SndIOSDL)
+    if(SndIOSDL_FOUND)
       set(HAVE_SNDIO TRUE)
       file(GLOB SNDIO_SOURCES ${SDL2_SOURCE_DIR}/src/audio/sndio/*.c)
       list(APPEND SOURCE_FILES ${SNDIO_SOURCES})
@@ -321,12 +319,13 @@ macro(CheckSNDIO)
       if(SDL_SNDIO_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic sndio loading")
       endif()
-      FindLibraryAndSONAME("sndio")
-      if(SDL_SNDIO_SHARED AND SNDIO_LIB AND HAVE_SDL_LOADSO)
-        set(SDL_AUDIO_DRIVER_SNDIO_DYNAMIC "\"${SNDIO_LIB_SONAME}\"")
+      if(SDL_SNDIO_SHARED AND TARGET SndIOSDL::SndIOSDL AND HAVE_SDL_LOADSO)
+        set(SDL_AUDIO_DRIVER_SNDIO_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:SndIOSDL::SndIOSDL>\"")
+        list(APPEND SDL_LINK_LIBRARIES_BUILD_PRIVATE SndIOSDL::Headers)
         set(HAVE_SNDIO_SHARED TRUE)
       else()
-        list(APPEND EXTRA_LIBS ${D_SNDIO_LIB})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE SndIOSDL::SndIOSDL)
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE ${SndIOSDL_PKGCONFIG_MODULESPEC})
       endif()
       set(HAVE_SDL_AUDIO TRUE)
     endif()

From cff56c7d0aad7c689866b546c28f311ea695909a Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Wed, 24 Aug 2022 04:09:43 +0200
Subject: [PATCH 05/10] cmake: find X11 through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt         |   1 +
 SDL2Config.cmake.in    |   6 +++
 cmake/FindX11SDL.cmake | 110 +++++++++++++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake  |  98 ++++++++++++++----------------------
 4 files changed, 155 insertions(+), 60 deletions(-)
 create mode 100644 cmake/FindX11SDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bb99df2b3265..dcc837892530 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3330,6 +3330,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       cmake/common.cmake
       cmake/FindDirectFBSDL.cmake
       cmake/FindSndIOSDL.cmake
+      cmake/FindX11SDL.cmake
     DESTINATION ${PKG_PREFIX}
     COMPONENT Devel
   )
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 7af9972744ce..7c3d7d933a84 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -52,6 +52,12 @@ endif()
 unset(_sdl_sndio)
 unset(_sdl_sndio_shared)
 
+set(_sdl_x11 @HAVE_X11@)
+if(_sdl_x11)
+  find_dependency(X11SDL)
+endif()
+unset(_sdl_x11)
+
 set(CMAKE_MODULE_PATH ${_sdl_cmake_module_path})
 
 # Create SDL2::SDL2 alias for static-only builds
diff --git a/cmake/FindX11SDL.cmake b/cmake/FindX11SDL.cmake
new file mode 100644
index 000000000000..6c14817b7dc0
--- /dev/null
+++ b/cmake/FindX11SDL.cmake
@@ -0,0 +1,110 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+
+cmake_minimum_required(VERSION 3.3)
+
+find_path(X11SDL_INCLUDE_PATH
+  NAMES X11/Xlib.h
+  PATHS
+    /usr/pkg/xorg/include
+    /usr/X11R6/include
+    /usr/X11R7/include
+    /usr/local/include/X11
+    /usr/include/X11
+    /usr/openwin/include
+    /usr/openwin/share/include
+    /opt/graphics/OpenGL/include
+    /opt/X11/include
+)
+
+set(_X11SDL_required_vars X11SDL_INCLUDE_PATH)
+
+function(x11sdl_find_component NAME HDRFILENAME LIBNAME MODULESPEC)
+  set(header_found FALSE)
+  set(lib_found FALSE)
+  if(MODULESPEC)
+    set(X11SDL_${NAME}_PKGCONFIG_MODULESPEC "${MODULESPEC}")
+  endif()
+  if(HDRFILENAME)
+    find_path(X11SDL_${NAME}_INCLUDE_PATH
+      NAMES "${HDRFILENAME}"
+      HINTS "${X11SDL_INCLUDE_PATHS}"
+    )
+
+    if(X11SDL_${NAME}_INCLUDE_PATH)
+      set(header_found TRUE)
+    endif()
+    set(X11SDL_${NAME}_HEADERS_FOUND ${header_found} PARENT_COPE)
+
+    if("${NAME}_HEADERS" IN_LIST X11SDL_FIND_COMPONENTS)
+      list(APPEND _X11SDL_required_vars X11SDL_${NAME}_INCLUDE_PATHS)
+    endif()
+
+    if(header_found AND NOT TARGET X11SDL::${NAME}::Headers)
+      add_library(X11SDL::${NAME}::Headers INTERFACE IMPORTED)
+      set_target_properties(X11SDL::${NAME}::Headers
+        PROPERTIES
+          INTERFACE_INCLUDE_DIRECTORIES "${X11SDL_${NAME}_INCLUDE_PATH}"
+      )
+    endif()
+
+  endif()
+
+  if(LIBNAME)
+    set(X11SDL_${NAME}_FOUND FALSE)
+    find_library(X11SDL_${NAME}_LIBRARY
+      NAMES "${LIBNAME}"
+    )
+
+    if(HDRFILENAME)
+      if(header_found AND X11SDL_${NAME}_LIBRARY)
+        set(lib_found TRUE)
+      endif()
+    else()
+      if(X11SDL_${NAME}_LIBRARY)
+        set(lib_found TRUE)
+      endif()
+    endif()
+    set(X11SDL_${NAME}_FOUND ${lib_found} PARENT_SCOPE)
+
+    if("${NAME}" IN_LIST X11SDL_FIND_COMPONENTS)
+      list(APPEND _X11SDL_required_vars X11SDL_${NAME}_LIBRARY)
+      if(HDRFILENAME)
+        list(APPEND _X11SDL_required_vars X11SDL_${NAME}_INCLUDE_PATHS)
+      endif()
+    endif()
+
+    if(lib_found AND NOT TARGET X11SDL::${NAME})
+      add_library(X11SDL::${NAME} SHARED IMPORTED)
+      set_target_properties(X11SDL::${NAME}
+        PROPERTIES
+          IMPORTED_LOCATION "${X11SDL_${NAME}_LIBRARY}"
+      )
+      sdl_add_soname_library(X11SDL::${NAME})
+      if(header_found)
+        set_target_properties(X11SDL::${NAME}
+          PROPERTIES
+            INTERFACE_INCLUDE_DIRECTORIES "${X11SDL_${NAME}_INCLUDE_PATH}"
+        )
+      endif()
+    endif()
+
+  endif()
+  set(_X11SDL_required_vars "${_X11SDL_required_vars}" PARENT_SCOPE)
+endfunction()
+
+x11sdl_find_component(X11       "X11/Xlib.h"                  "X11"       "")
+x11sdl_find_component(XCURSOR   "X11/Xcursor/Xcursor.h"       "Xcursor"   "xcursor")
+x11sdl_find_component(XDBE      "X11/extensions/Xdbe.h"       ""          "")
+x11sdl_find_component(XEXT      "X11/extensions/Xext.h"       "Xext"      "xext")
+x11sdl_find_component(XFIXES    "X11/extensions/Xfixes.h"     "Xfixes"    "xfixes")
+x11sdl_find_component(XINPUT    "X11/extensions/XInput2.h"    "Xi"        "xi")
+x11sdl_find_component(XRANDR    "X11/extensions/Xrandr.h"     "Xrandr"    "")
+x11sdl_find_component(XRENDER   "X11/extensions/Xrender.h"    "Xrender"   "xrender")
+x11sdl_find_component(XSHAPE    "X11/extensions/shape.h"      ""          "xcb-shape")
+x11sdl_find_component(XSS       "X11/extensions/scrnsaver.h"  "Xss"       "xscrnsaver")
+
+find_package_handle_standard_args(X11SDL
+  REQUIRED_VARS ${_X11SDL_required_vars}
+)
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index b0c3c88c7e18..ee48792265a5 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -416,42 +416,14 @@ endmacro()
 # - SDL_X11_SHARED opt
 # - HAVE_SDL_LOADSO opt
 macro(CheckX11)
-  if(SDL_X11)
-    foreach(_LIB X11 Xext Xcursor Xi Xfixes Xrandr Xrender Xss)
-        FindLibraryAndSONAME("${_LIB}")
-    endforeach()
-
-    set(X11_dirs)
-    find_path(X_INCLUDEDIR
-      NAMES X11/Xlib.h
-      PATHS
-        /usr/pkg/xorg/include
-        /usr/X11R6/include
-        /usr/X11R7/include
-        /usr/local/include/X11
-        /usr/include/X11
-        /usr/openwin/include
-        /usr/openwin/share/include
-        /opt/graphics/OpenGL/include
-        /opt/X11/include
-    )
+  find_package(X11SDL)
+  if(X11SDL_FOUND)
+    if(TARGET X11SDL::X11)
 
-    if(X_INCLUDEDIR)
-      list(APPEND EXTRA_CFLAGS "-I${X_INCLUDEDIR}")
-    endif()
+      list(APPEND SDL_PKGCONFIG_INCLUDES_PUBLIC "-I${X11SDL_INCLUDE_PATH}")
+      list(APPEND SDL_LINK_LIBRARIES_PUBLIC X11SDL::X11::Headers)
 
-    find_file(HAVE_XCURSOR_H NAMES "X11/Xcursor/Xcursor.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XINPUT2_H NAMES "X11/extensions/XInput2.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XRANDR_H NAMES "X11/extensions/Xrandr.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XFIXES_H_ NAMES "X11/extensions/Xfixes.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XRENDER_H NAMES "X11/extensions/Xrender.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XSS_H NAMES "X11/extensions/scrnsaver.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XSHAPE_H NAMES "X11/extensions/shape.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XDBE_H NAMES "X11/extensions/Xdbe.h" HINTS "${X_INCLUDEDIR}")
-    find_file(HAVE_XEXT_H NAMES "X11/extensions/Xext.h" HINTS "${X_INCLUDEDIR}")
-
-    if(X11_LIB)
-      if(NOT HAVE_XEXT_H)
+      if(NOT TARGET X11SDL::XEXT::Headers)
         message_error("Missing Xext.h, maybe you need to install the libxext-dev package?")
       endif()
 
@@ -485,25 +457,26 @@ macro(CheckX11)
         else()
           set(HAVE_X11_SHARED TRUE)
         endif()
-        if(X11_LIB)
+        if(TARGET X11SDL::X11)
           if(HAVE_X11_SHARED)
-            set(SDL_VIDEO_DRIVER_X11_DYNAMIC "\"${X11_LIB_SONAME}\"")
+            set(SDL_VIDEO_DRIVER_X11_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:X11SDL::X11>\"")
           else()
-            list(APPEND EXTRA_LIBS ${X11_LIB})
+            list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::X11)
           endif()
         endif()
-        if(XEXT_LIB)
+        if(TARGET X11SDL::XEXT)
           if(HAVE_X11_SHARED)
-            set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT "\"${XEXT_LIB_SONAME}\"")
+            set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XEXT>\"")
           else()
-            list(APPEND EXTRA_LIBS ${XEXT_LIB_SONAME})
+            list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XEXT)
           endif()
         endif()
       else()
-          list(APPEND EXTRA_LIBS ${X11_LIB} ${XEXT_LIB})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::X11 X11SDL::XEXT)
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE x11 xext)
       endif()
 
-      set(CMAKE_REQUIRED_LIBRARIES ${X11_LIB} ${X11_LIB})
+      set(CMAKE_REQUIRED_LIBRARIES X11SDL::X11)
 
       check_c_source_compiles("
           #include <X11/Xlib.h>
@@ -521,27 +494,29 @@ macro(CheckX11)
 
       check_symbol_exists(XkbKeycodeToKeysym "X11/Xlib.h;X11/XKBlib.h" SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM)
 
-      if(SDL_X11_XCURSOR AND HAVE_XCURSOR_H AND XCURSOR_LIB)
+      if(SDL_X11_XCURSOR AND TARGET X11SDL::XCURSOR)
         set(HAVE_X11_XCURSOR TRUE)
         if(HAVE_X11_SHARED)
-          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR "\"${XCURSOR_LIB_SONAME}\"")
+          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XCURSOR>\"")
         else()
-          list(APPEND EXTRA_LIBS ${XCURSOR_LIB})
+          list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XCURSOR)
+          list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE xcursor)
         endif()
         set(SDL_VIDEO_DRIVER_X11_XCURSOR 1)
       endif()
 
-      if(SDL_X11_XDBE AND HAVE_XDBE_H)
+      if(SDL_X11_XDBE AND TARGET X11SDL::XDBE::Headers)
         set(HAVE_X11_XDBE TRUE)
         set(SDL_VIDEO_DRIVER_X11_XDBE 1)
       endif()
 
-      if(SDL_X11_XINPUT AND HAVE_XINPUT2_H AND XI_LIB)
+      if(SDL_X11_XINPUT AND TARGET X11SDL::XINPUT)
         set(HAVE_X11_XINPUT TRUE)
         if(HAVE_X11_SHARED)
-          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 "\"${XI_LIB_SONAME}\"")
+          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XINPUT>\"")
         else()
-          list(APPEND EXTRA_LIBS ${XI_LIB})
+          list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XINPUT)
+          list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE xi)
         endif()
         set(SDL_VIDEO_DRIVER_X11_XINPUT2 1)
 
@@ -562,7 +537,7 @@ macro(CheckX11)
       endif()
 
       # check along with XInput2.h because we use Xfixes with XIBarrierReleasePointer
-      if(SDL_X11_XFIXES AND HAVE_XFIXES_H_ AND HAVE_XINPUT2_H)
+      if(SDL_X11_XFIXES AND TARGET X11SDL::XFIXES::Headers AND TARGET X11SDL::XINPUT::Headers)
         check_c_source_compiles("
             #include <X11/Xlib.h>
             #include <X11/Xproto.h>
@@ -571,37 +546,40 @@ macro(CheckX11)
             BarrierEventID b;
             int main(int argc, char **argv) { return 0; }" HAVE_XFIXES_H)
       endif()
-      if(SDL_X11_XFIXES AND HAVE_XFIXES_H AND HAVE_XINPUT2_H AND XFIXES_LIB)
+      if(SDL_X11_XFIXES AND HAVE_XFIXES_H AND TARGET X11SDL::XFIXES AND TARGET X11SDL::XINPUT::Headers)
         if(HAVE_X11_SHARED)
-          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES "\"${XFIXES_LIB_SONAME}\"")
+          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XFIXES>\"")
         else()
-          list(APPEND EXTRA_LIBS ${XFIXES_LIB})
+          list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XFIXES)
+          list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE xfixes)
         endif()
         set(SDL_VIDEO_DRIVER_X11_XFIXES 1)
         set(HAVE_X11_XFIXES TRUE)
       endif()
 
-      if(SDL_X11_XRANDR AND HAVE_XRANDR_H AND XRANDR_LIB)
+      if(SDL_X11_XRANDR AND TARGET X11SDL::XRANDR)
         if(HAVE_X11_SHARED)
-          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR "\"${XRANDR_LIB_SONAME}\"")
+          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XRANDR>\"")
         else()
-          list(APPEND EXTRA_LIBS ${XRANDR_LIB})
+          list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XRANDR)
+          list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE xrandr)
         endif()
         set(SDL_VIDEO_DRIVER_X11_XRANDR 1)
         set(HAVE_X11_XRANDR TRUE)
       endif()
 
-      if(SDL_X11_XSCRNSAVER AND HAVE_XSS_H AND XSS_LIB)
+      if(SDL_X11_XSCRNSAVER AND TARGET X11SDL::XSS)
         if(HAVE_X11_SHARED)
-          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS "\"${XSS_LIB_SONAME}\"")
+          set(SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS "\"$<TARGET_SONAME_FILE_NAME:X11SDL::XSS>\"")
         else()
-          list(APPEND EXTRA_LIBS ${XSS_LIB})
+          list(APPEND SDL_LINK_LIBRARIES_PRIVATE X11SDL::XSS)
+          list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE xscrnsaver)
         endif()
         set(SDL_VIDEO_DRIVER_X11_XSCRNSAVER 1)
         set(HAVE_X11_XSCRNSAVER TRUE)
       endif()
 
-      if(SDL_X11_XSHAPE AND HAVE_XSHAPE_H)
+      if(SDL_X11_XSHAPE AND TARGET X11SDL::XSHAPE::Headers)
         set(SDL_VIDEO_DRIVER_X11_XSHAPE 1)
         set(HAVE_X11_XSHAPE TRUE)
       endif()

From 6e4c5b5c41d18162d6ff507d4c211f9c659a0e53 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Thu, 25 Aug 2022 01:52:09 +0200
Subject: [PATCH 06/10] cmake: find ALSA through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt          |  1 +
 SDL2Config.cmake.in     |  8 ++++++
 cmake/FindALSASDL.cmake | 60 +++++++++++++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake   | 16 +++++------
 4 files changed, 76 insertions(+), 9 deletions(-)
 create mode 100644 cmake/FindALSASDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index dcc837892530..aa997a8c9919 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3328,6 +3328,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2Config.cmake
       ${CMAKE_CURRENT_BINARY_DIR}/SDL2ConfigVersion.cmake
       cmake/common.cmake
+      cmake/FindALSASDL.cmake
       cmake/FindDirectFBSDL.cmake
       cmake/FindSndIOSDL.cmake
       cmake/FindX11SDL.cmake
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 7c3d7d933a84..fc67c0b4824a 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -44,6 +44,14 @@ if(_sdl_directfb)
 endif()
 unset(_sdl_directfb)
 
+set(_sdl_alsa @HAVE_ALSA@)
+set(_sdl_alsa_shared @SDL_ALSA_SHARED@)
+if(_sdl_alsa AND NOT _sdl_alsa_shared)
+  find_dependency(ALSASDL COMPONENTS LIBRARY)
+endif()
+unset(_sdl_alsa)
+unset(_sdl_alsa_shared)
+
 set(_sdl_sndio @HAVE_SNDIO@)
 set(_sdl_sndio_shared @SDL_SNDIO_SHARED@)
 if(_sdl_sndio AND NOT _sdl_sndio_shared)
diff --git a/cmake/FindALSASDL.cmake b/cmake/FindALSASDL.cmake
new file mode 100644
index 000000000000..82aa55c77997
--- /dev/null
+++ b/cmake/FindALSASDL.cmake
@@ -0,0 +1,60 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(ALSASDL_PKGCONFIG_MODULESPEC alsa)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_ALSASDL "${ALSASDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(ALSASDL_INCLUDE_PATH
+  NAMES "alsa/asoundlib.h"
+  PATHS ${PKG_ALSASDL_INCLUDE_DIRS}
+)
+
+find_library(ALSASDL_LIBRARY
+  NAMES asound
+  PATHS ${PKG_ALSASDL_LIBRARY_DIRS}
+)
+
+set(ALSASDL_COMPILE_FLAGS "${PKG_ALSASDL_CFLAGS}" CACHE STRING "Extra compile flags of ALSA")
+
+set(ALSASDL_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of ALSA")
+
+set(ALSASDL_LINK_FLAGS "${PKG_ALSASDL_LDFLAGS_OTHER}" CACHE STRING "Extra link flags of ALSA")
+
+set(_alsa_required_vars )
+if(NOT ALSASDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST ALSASDL_FIND_COMPONENTS)
+  list(APPEND _alsa_required_vars ALSASDL_LIBRARY)
+endif()
+list(APPEND _alsa_required_vars ALSASDL_INCLUDE_PATH)
+
+find_package_handle_standard_args(ALSASDL
+  REQUIRED_VARS ${_alsa_required_vars}
+)
+
+if(ALSASDL_FOUND)
+  if(NOT TARGET ALSASDL::Headers)
+    add_library(ALSASDL::Headers INTERFACE IMPORTED)
+    set_target_properties(ALSASDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${ALSASDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${ALSASDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET ALSASDL::ALSASDL)
+    add_library(ALSASDL::ALSASDL SHARED IMPORTED)
+    set_target_properties(ALSASDL::ALSASDL
+      PROPERTIES
+        IMPORTED_LOCATION "${ALSASDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${ALSASDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${ALSASDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${ALSASDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${ALSASDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(ALSASDL::ALSASDL)
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index ee48792265a5..008fafab016f 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -99,11 +99,8 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckALSA)
   if(SDL_ALSA)
-    CHECK_INCLUDE_FILE(alsa/asoundlib.h HAVE_ASOUNDLIB_H)
-    if(HAVE_ASOUNDLIB_H)
-      CHECK_LIBRARY_EXISTS(asound snd_pcm_recover "" HAVE_LIBASOUND)
-    endif()
-    if(HAVE_LIBASOUND)
+    find_package(ALSASDL)
+    if(TARGET ALSASDL::ALSASDL)
       set(HAVE_ALSA TRUE)
       file(GLOB ALSA_SOURCES ${SDL2_SOURCE_DIR}/src/audio/alsa/*.c)
       list(APPEND SOURCE_FILES ${ALSA_SOURCES})
@@ -111,12 +108,13 @@ macro(CheckALSA)
       if(SDL_ALSA_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic ALSA loading")
       endif()
-      FindLibraryAndSONAME("asound")
-      if(SDL_ALSA_SHARED AND ASOUND_LIB AND HAVE_SDL_LOADSO)
-        set(SDL_AUDIO_DRIVER_ALSA_DYNAMIC "\"${ASOUND_LIB_SONAME}\"")
+      if(SDL_ALSA_SHARED AND HAVE_SDL_LOADSO)
+        set(SDL_AUDIO_DRIVER_ALSA_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:ALSASDL::ALSASDL>\"")
         set(HAVE_ALSA_SHARED TRUE)
+        list(APPEND SDL_LINK_LIBRARIES_BUILD_PRIVATE ALSASDL::Headers)
       else()
-        list(APPEND EXTRA_LIBS asound)
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE ALSASDL::ALSASDL)
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE ${ALSASDL_PKGCONFIG_MODULESPEC})
       endif()
       set(HAVE_SDL_AUDIO TRUE)
     endif()

From ee98f0cfbf8aa5a805f3491550ab54d262b72b2d Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Thu, 25 Aug 2022 02:12:33 +0200
Subject: [PATCH 07/10] cmake: find Jack through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt          |  1 +
 SDL2Config.cmake.in     |  8 ++++++
 cmake/FindJackSDL.cmake | 60 +++++++++++++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake   | 13 ++++-----
 4 files changed, 76 insertions(+), 6 deletions(-)
 create mode 100644 cmake/FindJackSDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index aa997a8c9919..832d3e83d3bf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3330,6 +3330,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       cmake/common.cmake
       cmake/FindALSASDL.cmake
       cmake/FindDirectFBSDL.cmake
+      cmake/FindJackSDL.cmake
       cmake/FindSndIOSDL.cmake
       cmake/FindX11SDL.cmake
     DESTINATION ${PKG_PREFIX}
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index fc67c0b4824a..6bc5a27d1536 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -52,6 +52,14 @@ endif()
 unset(_sdl_alsa)
 unset(_sdl_alsa_shared)
 
+set(_sdl_jack @HAVE_JACK@)
+set(_sdl_jack_shared @SDL_JACK_SHARED@)
+if(_sdl_jack AND NOT _sdl_jack_shared)
+  find_dependency(JackSDL COMPONENTS LIBRARY)
+endif()
+unset(_sdl_jack)
+unset(_sdl_jack_shared)
+
 set(_sdl_sndio @HAVE_SNDIO@)
 set(_sdl_sndio_shared @SDL_SNDIO_SHARED@)
 if(_sdl_sndio AND NOT _sdl_sndio_shared)
diff --git a/cmake/FindJackSDL.cmake b/cmake/FindJackSDL.cmake
new file mode 100644
index 000000000000..fd0ba84d5965
--- /dev/null
+++ b/cmake/FindJackSDL.cmake
@@ -0,0 +1,60 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(JackSDL_PKGCONFIG_MODULESPEC jack)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_JackSDL "${JackSDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(JackSDL_INCLUDE_PATH
+  NAMES "jack/jack.h"
+  PATHS ${PKG_JackSDL_INCLUDE_DIRS}
+)
+
+find_library(JackSDL_LIBRARY
+  NAMES jack
+  PATHS ${PKG_JackSDL_LIBRARY_DIRS}
+)
+
+set(JackSDL_COMPILE_FLAGS "${PKG_JackSDL_CFLAGS}" CACHE STRING "Extra compile flags of Jack")
+
+set(JackSDL_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of Jack")
+
+set(JackSDL_LINK_FLAGS "${PKG_JackSDL_LDFLAGS_OTHER}" CACHE STRING "Extra link flags of Jack")
+
+set(_jack_required_vars )
+if(NOT JackSDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST JackSDL_FIND_COMPONENTS)
+  list(APPEND _jack_required_vars JackSDL_LIBRARY)
+endif()
+list(APPEND _jack_required_vars JackSDL_INCLUDE_PATH)
+
+find_package_handle_standard_args(JackSDL
+  REQUIRED_VARS ${_jack_required_vars}
+)
+
+if(JackSDL_FOUND)
+  if(NOT TARGET JackSDL::Headers)
+    add_library(JackSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(JackSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${JackSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${JackSDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET JackSDL::JackSDL)
+    add_library(JackSDL::JackSDL SHARED IMPORTED)
+    set_target_properties(JackSDL::JackSDL
+      PROPERTIES
+        IMPORTED_LOCATION "${JackSDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${JackSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${JackSDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${JackSDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${JackSDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(JackSDL::JackSDL)
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index 008fafab016f..bb8823f13b99 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -186,22 +186,23 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckJACK)
   if(SDL_JACK)
-    pkg_check_modules(PKG_JACK jack)
-    if(PKG_JACK_FOUND)
+    find_package(JackSDL)
+    if(TARGET JackSDL::JackSDL)
       set(HAVE_JACK TRUE)
       file(GLOB JACK_SOURCES ${SDL2_SOURCE_DIR}/src/audio/jack/*.c)
       list(APPEND SOURCE_FILES ${JACK_SOURCES})
       set(SDL_AUDIO_DRIVER_JACK 1)
-      list(APPEND EXTRA_CFLAGS ${PKG_JACK_CFLAGS})
       if(SDL_JACK_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic JACK audio loading")
       endif()
       FindLibraryAndSONAME("jack")
-      if(SDL_JACK_SHARED AND JACK_LIB AND HAVE_SDL_LOADSO)
-        set(SDL_AUDIO_DRIVER_JACK_DYNAMIC "\"${JACK_LIB_SONAME}\"")
+      if(SDL_JACK_SHARED AND TARGET JackSDL::JackSDL AND HAVE_SDL_LOADSO)
+        list(APPEND JackSDL::Headers)
+        set(SDL_AUDIO_DRIVER_JACK_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:JackSDL::JackSDL>\"")
         set(HAVE_JACK_SHARED TRUE)
       else()
-        list(APPEND EXTRA_LDFLAGS ${PKG_JACK_LDFLAGS})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE JackSDL::JackSDL)
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE ${JackSDL_PKGCONFIG_MODULESPEC})
       endif()
       set(HAVE_SDL_AUDIO TRUE)
     endif()

From d19fe0d4b45ac0081d79b15b6cda45189d0df3b2 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Thu, 25 Aug 2022 19:30:06 +0200
Subject: [PATCH 08/10] cmake: find OSS through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt                     |  1 +
 SDL2Config.cmake.in                |  8 ++++
 cmake/FindOpenSoundSystemSDL.cmake | 60 ++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake              | 29 +++++++--------
 4 files changed, 82 insertions(+), 16 deletions(-)
 create mode 100644 cmake/FindOpenSoundSystemSDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 832d3e83d3bf..adf80766b195 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3331,6 +3331,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       cmake/FindALSASDL.cmake
       cmake/FindDirectFBSDL.cmake
       cmake/FindJackSDL.cmake
+      cmake/FindOpenSoundSystemSDL.cmake
       cmake/FindSndIOSDL.cmake
       cmake/FindX11SDL.cmake
     DESTINATION ${PKG_PREFIX}
diff --git a/SDL2Config.cmake.in b/SDL2Config.cmake.in
index 6bc5a27d1536..6080850ad3e2 100644
--- a/SDL2Config.cmake.in
+++ b/SDL2Config.cmake.in
@@ -60,6 +60,14 @@ endif()
 unset(_sdl_jack)
 unset(_sdl_jack_shared)
 
+set(_sdl_oss @HAVE_OSS@)
+set(_sdl_oss_needs_library @NEEDS_OSS_LIBRARY@)
+if(_sdl_oss AND _sdl_oss_needs_library)
+  find_dependency(OpenSoundSystemSDL COMPONENTS LIBRARY)
+endif()
+unset(_sdl_oss)
+unset(_sdl_oss_needs_library)
+
 set(_sdl_sndio @HAVE_SNDIO@)
 set(_sdl_sndio_shared @SDL_SNDIO_SHARED@)
 if(_sdl_sndio AND NOT _sdl_sndio_shared)
diff --git a/cmake/FindOpenSoundSystemSDL.cmake b/cmake/FindOpenSoundSystemSDL.cmake
new file mode 100644
index 000000000000..0aacd934cd15
--- /dev/null
+++ b/cmake/FindOpenSoundSystemSDL.cmake
@@ -0,0 +1,60 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(OpenSoundSystemSDL_INCLUDE_PATH )
+
+find_path(OpenSoundSystemSDL_SYS_SOUNDCARD_H_INCLUDE_PATH
+  NAMES "sys/soundcard.h"
+)
+if(OpenSoundSystemSDL_SYS_SOUNDCARD_H_INCLUDE_PATH)
+  set(OpenSoundSystemSDL_INCLUDE_PATH ${OpenSoundSystemSDL_SYS_SOUNDCARD_H_INCLUDE_PATH})
+else()
+  find_path(OpenSoundSystemSDL_SOUNDCARD_H_INCLUDE_PATH
+    NAMES "soundcard.h"
+  )
+  if(OpenSoundSystemSDL_SOUNDCARD_H_INCLUDE_PATH)
+    set(OpenSoundSystemSDL_INCLUDE_PATH ${OpenSoundSystemSDL_SOUNDCARD_H_INCLUDE_PATH})
+  endif()
+endif()
+
+set(_opensoundsystem_needs_library 0)
+if(_opensoundsystem_needs_library)
+  set(_opensoundsystem_needs_library 1)
+  find_library(OpenSoundSystemSDL_LIBRARY
+    NAMES ossaudio
+  )
+endif()
+
+set(_opensoundsystem_required_vars )
+if(_opensoundsystem_needs_library)
+  list(APPEND _opensoundsystem_required_vars OpenSoundSystemSDL_LIBRARY)
+endif()
+list(APPEND _opensoundsystem_required_vars OpenSoundSystemSDL_INCLUDE_PATH)
+
+find_package_handle_standard_args(OpenSoundSystemSDL
+  REQUIRED_VARS ${_opensoundsystem_required_vars}
+)
+
+if(OpenSoundSystemSDL_FOUND)
+  if(NOT TARGET OpenSoundSystemSDL::Headers)
+    add_library(OpenSoundSystemSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(OpenSoundSystemSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${OpenSoundSystemSDL_INCLUDE_PATH}"
+    )
+  endif()
+  if(_opensoundsystem_needs_library AND OpenSoundSystemSDL_LIBRARY)
+    if(NOT TARGET OpenSoundSystemSDL::OpenSoundSystemSDL)
+        add_library(OpenSoundSystemSDL::OpenSoundSystemSDL SHARED IMPORTED)
+        set_target_properties(OpenSoundSystemSDL::OpenSoundSystemSDL
+          PROPERTIES
+            IMPORTED_LOCATION "${OpenSoundSystemSDL_LIBRARY}"
+            INTERFACE_INCLUDE_DIRECTORIES "${OpenSoundSystemSDL_INCLUDE_PATH}"
+        )
+        sdl_add_soname_library(OpenSoundSystemSDL::OpenSoundSystemSDL)
+    endif()
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index bb8823f13b99..18f821cf6f12 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -65,27 +65,24 @@ endmacro()
 # - n/a
 macro(CheckOSS)
   if(SDL_OSS)
-    set(OSS_HEADER_FILE "sys/soundcard.h")
-    check_c_source_compiles("
-        #include <sys/soundcard.h>
-        int main(int argc, char **argv) { int arg = SNDCTL_DSP_SETFRAGMENT; return 0; }" OSS_FOUND)
-    if(NOT OSS_FOUND)
-      set(OSS_HEADER_FILE "soundcard.h")
-      check_c_source_compiles("
-          #include <soundcard.h>
-          int main(int argc, char **argv) { int arg = SNDCTL_DSP_SETFRAGMENT; return 0; }" OSS_FOUND)
+    set(_oss_components HEADERS)
+    if(NETBSD OR OPENBSD)
+      list(APPEND _oss_components LIBRARY)
+      set(NEEDS_OSS_LIBRARY TRUE)
     endif()
-
-    if(OSS_FOUND)
+    find_package(OpenSoundSystemSDL COMPONENTS ${_oss_components})
+    if(OpenSoundSystemSDL_FOUND)
       set(HAVE_OSS TRUE)
       file(GLOB OSS_SOURCES ${SDL2_SOURCE_DIR}/src/audio/dsp/*.c)
-      if(OSS_HEADER_FILE STREQUAL "soundcard.h")
+      list(APPEND SOURCE_FILES ${OSS_SOURCES})
+      set(SDL_AUDIO_DRIVER_OSS 1)
+      if(OpenSoundSystemSDL_SOUNDCARD_H_INCLUDE_PATH)
         set(SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H 1)
       endif()
-      set(SDL_AUDIO_DRIVER_OSS 1)
-      list(APPEND SOURCE_FILES ${OSS_SOURCES})
-      if(NETBSD OR OPENBSD)
-        list(APPEND EXTRA_LIBS ossaudio)
+      if(TARGET OpenSoundSystemSDL::OpenSoundSystemSDL)
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE OpenSoundSystemSDL::OpenSoundSystemSDL)
+      else()
+        list(APPEND SDL_LINK_LIBRARIES_BUILD_PRIVATE OpenSoundSystemSDL::Headers)
       endif()
       set(HAVE_SDL_AUDIO TRUE)
     endif()

From 9763ffb535efbc541b1c17840bc06cb2479ed0e4 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Thu, 25 Aug 2022 21:54:13 +0200
Subject: [PATCH 09/10] cmake: find PipeWire through a cmake module + use it in
 installed sdl2 prefix

---
 CMakeLists.txt                     |  2 +
 cmake/FindPipeWireSDL.cmake        | 62 ++++++++++++++++++++++++++++++
 cmake/FindSimplePluginAPISDL.cmake | 35 +++++++++++++++++
 cmake/sdlchecks.cmake              | 40 +++++++++----------
 4 files changed, 119 insertions(+), 20 deletions(-)
 create mode 100644 cmake/FindPipeWireSDL.cmake
 create mode 100644 cmake/FindSimplePluginAPISDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index adf80766b195..3154fd44cda8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3332,6 +3332,8 @@ if(NOT SDL2_DISABLE_INSTALL)
       cmake/FindDirectFBSDL.cmake
       cmake/FindJackSDL.cmake
       cmake/FindOpenSoundSystemSDL.cmake
+      cmake/FindPipeWireSDL.cmake
+      cmake/FindSimplePluginAPISDL.cmake
       cmake/FindSndIOSDL.cmake
       cmake/FindX11SDL.cmake
     DESTINATION ${PKG_PREFIX}
diff --git a/cmake/FindPipeWireSDL.cmake b/cmake/FindPipeWireSDL.cmake
new file mode 100644
index 000000000000..16d1439dce6a
--- /dev/null
+++ b/cmake/FindPipeWireSDL.cmake
@@ -0,0 +1,62 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(PipeWireSDL_PKGCONFIG_MODULESPEC libpipewire-0.3>=0.3.20)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_PipeWireSDL "${PipeWireSDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_package(SimplePluginAPISDL)
+
+find_path(PipeWireSDL_INCLUDE_PATH
+  NAMES "pipewire/extensions/metadata.h"
+  PATHS ${PKG_PipeWireSDL_INCLUDE_DIRS}
+)
+
+find_library(PipeWireSDL_LIBRARY
+  NAMES pipewire-0.3
+  PATHS ${PKG_PipeWireSDL_LIBRARY_DIRS}
+)
+
+set(PipeWireSDL_COMPILE_FLAGS "${PKG_PipeWireSDL_CFLAGS}" CACHE STRING "Extra compile flags of PipeWire")
+
+set(PipeWireSDL_LINK_LIBRARIES "" CACHE STRING "Extra link libraries of PipeWire")
+
+set(PipeWireSDL_LINK_FLAGS "${PKG_PipeWireSDL_LDFLAGS_OTHER}" CACHE STRING "Extra link flags of PipeWire")
+
+set(_pipewire_required_vars )
+if(NOT PipeWireSDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST PipeWireSDL_FIND_COMPONENTS)
+  list(APPEND _pipewire_required_vars PipeWireSDL_LIBRARY)
+endif()
+list(APPEND _pipewire_required_vars PipeWireSDL_INCLUDE_PATH SimplePluginAPISDL_FOUND)
+
+find_package_handle_standard_args(PipeWireSDL
+  REQUIRED_VARS ${_pipewire_required_vars}
+)
+
+if(PipeWireSDL_FOUND)
+  if(NOT TARGET PipeWireSDL::Headers)
+    add_library(PipeWireSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(PipeWireSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PipeWireSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${PipeWireSDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET PipeWireSDL::PipeWireSDL)
+    add_library(PipeWireSDL::PipeWireSDL SHARED IMPORTED)
+    set_target_properties(PipeWireSDL::PipeWireSDL
+      PROPERTIES
+        IMPORTED_LOCATION "${PipeWireSDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${PipeWireSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${PipeWireSDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${PipeWireSDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${PipeWireSDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(PipeWireSDL::PipeWireSDL)
+  endif()
+endif()
diff --git a/cmake/FindSimplePluginAPISDL.cmake b/cmake/FindSimplePluginAPISDL.cmake
new file mode 100644
index 000000000000..88babde9aafc
--- /dev/null
+++ b/cmake/FindSimplePluginAPISDL.cmake
@@ -0,0 +1,35 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(SimplePluginAPISDL_PKGCONFIG_MODULESPEC libspa-0.2)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_SimplePluginAPISDL "${SimplePluginAPISDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(SimplePluginAPISDL_INCLUDE_PATH
+  NAMES "spa/support/plugin.h"
+  PATHS ${PKG_SimplePluginAPISDL_INCLUDE_DIRS}
+)
+
+set(SimplePluginAPISDL_COMPILE_FLAGS "${PKG_SimplePluginAPISDL_CFLAGS}" CACHE STRING "Extra compile flags of Simple Plugin API")
+
+set(_sapi_required_vars SimplePluginAPISDL_INCLUDE_PATH)
+
+find_package_handle_standard_args(SimplePluginAPISDL
+  REQUIRED_VARS ${_sapi_required_vars}
+)
+
+if(SimplePluginAPISDL_FOUND)
+  if(NOT TARGET SimplePluginAPISDL::Headers)
+    add_library(SimplePluginAPISDL::Headers INTERFACE IMPORTED)
+    set_target_properties(SimplePluginAPISDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${SimplePluginAPISDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${SimplePluginAPISDL_COMPILE_FLAGS}"
+    )
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index 18f821cf6f12..ec43c72d844c 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -124,27 +124,27 @@ endmacro()
 # - SDL_PIPEWIRE_SHARED opt
 # - HAVE_SDL_LOADSO opt
 macro(CheckPipewire)
-    if(SDL_PIPEWIRE)
-        pkg_check_modules(PKG_PIPEWIRE libpipewire-0.3>=0.3.20)
-        if(PKG_PIPEWIRE_FOUND)
-            set(HAVE_PIPEWIRE TRUE)
-            file(GLOB PIPEWIRE_SOURCES ${SDL2_SOURCE_DIR}/src/audio/pipewire/*.c)
-            list(APPEND SOURCE_FILES ${PIPEWIRE_SOURCES})
-            set(SDL_AUDIO_DRIVER_PIPEWIRE 1)
-            list(APPEND EXTRA_CFLAGS ${PKG_PIPEWIRE_CFLAGS})
-            if(SDL_PIPEWIRE_SHARED AND NOT HAVE_SDL_LOADSO)
-                message_warn("You must have SDL_LoadObject() support for dynamic Pipewire loading")
-            endif()
-            FindLibraryAndSONAME("pipewire-0.3")
-            if(SDL_PIPEWIRE_SHARED AND PIPEWIRE_0.3_LIB AND HAVE_SDL_LOADSO)
-                set(SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC "\"${PIPEWIRE_0.3_LIB_SONAME}\"")
-                set(HAVE_PIPEWIRE_SHARED TRUE)
-            else()
-                list(APPEND EXTRA_LDFLAGS ${PKG_PIPEWIRE_LDFLAGS})
-            endif()
-            set(HAVE_SDL_AUDIO TRUE)
-        endif()
+  if(SDL_PIPEWIRE)
+    find_package(PipeWireSDL)
+    if(PipeWireSDL_FOUND)
+      set(HAVE_PIPEWIRE TRUE)
+      file(GLOB PIPEWIRE_SOURCES ${SDL2_SOURCE_DIR}/src/audio/pipewire/*.c)
+      list(APPEND SOURCE_FILES ${PIPEWIRE_SOURCES})
+      set(SDL_AUDIO_DRIVER_PIPEWIRE 1)
+      if(SDL_PIPEWIRE_SHARED AND NOT HAVE_SDL_LOADSO)
+        message_warn("You must have SDL_LoadObject() support for dynamic Pipewire loading")
+      endif()
+      if(SDL_PIPEWIRE_SHARED AND TARGET PipeWireSDL::PipeWireSDL AND HAVE_SDL_LOADSO)
+        list(APPEND SDL_LINK_LIBRARIES_BUILD_PRIVATE PipeWireSDL::Headers SimplePluginAPISDL::Headers)
+        set(SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:PipeWireSDL::PipeWireSDL>\"")
+        set(HAVE_PIPEWIRE_SHARED TRUE)
+      else()
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE ${PipeWireSDL_PKGCONFIG_MODULESPEC})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE PipeWireSDL::PipeWireSDL SimplePluginAPISDL::Headers)
+      endif()
+      set(HAVE_SDL_AUDIO TRUE)
     endif()
+  endif()
 endmacro()
 
 # Requires:

From 63403a6d1cec79754a9a22dcfd22360951a122b3 Mon Sep 17 00:00:00 2001
From: Anonymous Maarten <anonymous.maarten@gmail.com>
Date: Fri, 26 Aug 2022 00:51:44 +0200
Subject: [PATCH 10/10] cmake: find PulseAudio through a cmake module + use it
 in installed sdl2 prefix

---
 CMakeLists.txt                |  1 +
 cmake/FindPulseAudioSDL.cmake | 68 +++++++++++++++++++++++++++++++++++
 cmake/sdlchecks.cmake         | 14 ++++----
 3 files changed, 76 insertions(+), 7 deletions(-)
 create mode 100644 cmake/FindPulseAudioSDL.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3154fd44cda8..1a92d4c32600 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3333,6 +3333,7 @@ if(NOT SDL2_DISABLE_INSTALL)
       cmake/FindJackSDL.cmake
       cmake/FindOpenSoundSystemSDL.cmake
       cmake/FindPipeWireSDL.cmake
+      cmake/FindPulseAudioSDL.cmake
       cmake/FindSimplePluginAPISDL.cmake
       cmake/FindSndIOSDL.cmake
       cmake/FindX11SDL.cmake
diff --git a/cmake/FindPulseAudioSDL.cmake b/cmake/FindPulseAudioSDL.cmake
new file mode 100644
index 000000000000..bfd3467113b8
--- /dev/null
+++ b/cmake/FindPulseAudioSDL.cmake
@@ -0,0 +1,68 @@
+include("${CMAKE_CURRENT_LIST_DIR}/common.cmake")
+
+include(FindPackageHandleStandardArgs)
+find_package(PkgConfig)
+
+cmake_minimum_required(VERSION 3.3)
+
+set(PulseAudioSDL_PKGCONFIG_MODULESPEC libpulse-simple)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PKG_PULSEAUDIO "${PulseAudioSDL_PKGCONFIG_MODULESPEC}")
+endif()
+
+find_path(PulseAudioSDL_INCLUDE_PATHS
+  NAMES "pulse/pulseaudio.h"
+  PATHS ${PKG_PULSEAUDIO_INCLUDE_DIRS}
+)
+
+find_library(PulseAudioSDL_LIBRARY
+  NAMES pulse-simple
+  PATHS ${PKG_PULSEAUDIO_LIBRARY_DIRS}
+)
+
+set(PulseAudioSDL_COMPILE_FLAGS "${PKG_PULSEAUDIO_CFLAGS}" CACHE STRING "Extra compile flags of PulseAudio")
+
+set(PulseAudioSDL_LINK_LIBRARIES "pulse" CACHE STRING "Extra link libraries of PulseAudio")
+
+set(PulseAudioSDL_LINK_FLAGS "${PKG_PULSEAUDIO_LDFLAGS}" CACHE STRING "Extra link flags of PulseAudio")
+
+set(_pulseaudio_required_vars )
+
+set(_pulseaudio_library_required 0)
+if(NOT PulseAudioSDL_FIND_COMPONENTS OR "LIBRARY" IN_LIST PulseAudioSDL_FIND_COMPONENTS)
+  list(APPEND _pulseaudio_required_vars PulseAudioSDL_LIBRARY)
+  set(_pulseaudio_library_required 1)
+endif()
+
+set(_pulseaudio_headers_required 0)
+if(NOT PulseAudioSDL_FIND_COMPONENTS OR "HEADERS" IN_LIST PulseAudioSDL_FIND_COMPONENTS)
+  set(_pulseaudio_headers_required 1)
+endif()
+list(APPEND _pulseaudio_required_vars PulseAudioSDL_INCLUDE_PATHS)
+
+find_package_handle_standard_args(PulseAudioSDL
+  REQUIRED_VARS ${_pulseaudio_required_vars}
+)
+
+if(PulseAudioSDL_FOUND)
+  if(NOT TARGET PulseAudioSDL::Headers AND _pulseaudio_headers_required)
+    add_library(PulseAudioSDL::Headers INTERFACE IMPORTED)
+    set_target_properties(PulseAudioSDL::Headers
+      PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${PulseAudioSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${PulseAudioSDL_COMPILE_FLAGS}"
+    )
+  endif()
+  if(NOT TARGET PulseAudioSDL::PulseAudioSDL AND _pulseaudio_library_required)
+    add_library(PulseAudioSDL::PulseAudioSDL SHARED IMPORTED)
+    set_target_properties(PulseAudioSDL::PulseAudioSDL
+      PROPERTIES
+        IMPORTED_LOCATION "${PulseAudioSDL_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${PulseAudioSDL_INCLUDE_PATH}"
+        INTERFACE_COMPILE_OPTIONS "${PulseAudioSDL_COMPILE_FLAGS}"
+        INTERFACE_LINK_LIBRARIES "${PulseAudioSDL_LINK_LIBRARIES}"
+        INTERFACE_LINK_FLAGS "${PulseAudioSDL_LINK_FLAGS}"
+    )
+    sdl_add_soname_library(PulseAudioSDL::PulseAudioSDL)
+  endif()
+endif()
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index ec43c72d844c..36460642b517 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -154,22 +154,22 @@ endmacro()
 # - HAVE_SDL_LOADSO opt
 macro(CheckPulseAudio)
   if(SDL_PULSEAUDIO)
-    pkg_check_modules(PKG_PULSEAUDIO libpulse-simple)
-    if(PKG_PULSEAUDIO_FOUND)
+    find_package(PulseAudioSDL)
+    if(PulseAudioSDL_FOUND)
       set(HAVE_PULSEAUDIO TRUE)
       file(GLOB PULSEAUDIO_SOURCES ${SDL2_SOURCE_DIR}/src/audio/pulseaudio/*.c)
       list(APPEND SOURCE_FILES ${PULSEAUDIO_SOURCES})
       set(SDL_AUDIO_DRIVER_PULSEAUDIO 1)
-      list(APPEND EXTRA_CFLAGS ${PKG_PULSEAUDIO_CFLAGS})
       if(SDL_PULSEAUDIO_SHARED AND NOT HAVE_SDL_LOADSO)
         message_warn("You must have SDL_LoadObject() support for dynamic PulseAudio loading")
       endif()
-      FindLibraryAndSONAME("pulse-simple")
-      if(SDL_PULSEAUDIO_SHARED AND PULSE_SIMPLE_LIB AND HAVE_SDL_LOADSO)
-        set(SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC "\"${PULSE_SIMPLE_LIB_SONAME}\"")
+      if(SDL_PULSEAUDIO_SHARED AND TARGET PulseAudioSDL::PulseAudioSDL)
+        list(APPEND SDL_LINK_LIBRARIES_BUILD_PRIVATE PulseAudioSDL::Headers)
+        set(SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC "\"$<TARGET_SONAME_FILE_NAME:PulseAudioSDL::PulseAudioSDL>\"")
         set(HAVE_PULSEAUDIO_SHARED TRUE)
       else()
-        list(APPEND EXTRA_LDFLAGS ${PKG_PULSEAUDIO_LDFLAGS})
+        list(APPEND SDL_PKGCONFIG_MODULESPECS_PRIVATE ${PulseAudioSDL_PKGCONFIG_MODULESPEC})
+        list(APPEND SDL_LINK_LIBRARIES_PRIVATE PulseAudioSDL::PulseAudioSDL)
       endif()
       set(HAVE_SDL_AUDIO TRUE)
     endif()
