rollup of
https://dev.gnupg.org/rM81d4b7f2d7077297d76af5728949d8f2bdff8cd5
https://dev.gnupg.org/rMf2b48de26b8f8c48c293423eda712831544924f6
https://dev.gnupg.org/rM2e7a61b898fccc1c20000b79dee83cd980901fa9
--
diff --git a/lang/qt/tests/t-addexistingsubkey.cpp b/lang/qt/tests/t-addexistingsubkey.cpp
index 589c90b..c0eee57 100644
--- a/lang/qt/tests/t-addexistingsubkey.cpp
+++ b/lang/qt/tests/t-addexistingsubkey.cpp
@@ -168,7 +168,7 @@ private Q_SLOTS:
         QSignalSpy spy (this, SIGNAL(asyncDone()));
         QVERIFY(spy.wait(QSIGNALSPY_TIMEOUT));
 
-        QVERIFY(result.code() == GPG_ERR_NO_ERROR);
+        QCOMPARE(result.code(), static_cast<int>(GPG_ERR_NO_ERROR));
         key.update();
         QCOMPARE(key.numSubkeys(), 3u);
     }
@@ -190,7 +190,7 @@ private Q_SLOTS:
 
         const auto result = job->exec(key, sourceSubkey);
 
-        QVERIFY(result.code() == GPG_ERR_NO_ERROR);
+        QCOMPARE(result.code(), static_cast<int>(GPG_ERR_NO_ERROR));
         key.update();
         QCOMPARE(key.numSubkeys(), 3u);
         QCOMPARE(key.subkey(2).expirationTime(), 0);
@@ -213,24 +213,30 @@ private Q_SLOTS:
 
         const auto result = job->exec(key, sourceSubkey);
 
-        QVERIFY(result.code() == GPG_ERR_NO_ERROR);
-        key.update();
-        QCOMPARE(key.numSubkeys(), 3u);
+        if (sourceSubkey.expirationTime() > 0) {
+            QCOMPARE(result.code(), static_cast<int>(GPG_ERR_NO_ERROR));
+            key.update();
+            QCOMPARE(key.numSubkeys(), 3u);
 
-        // allow 1 second different expiration because gpg calculates with
-        // expiration as difference to current time and takes current time
-        // several times
-        const auto allowedDeltaTSeconds = 1;
-        const auto expectedExpirationRange = std::make_pair(
-            sourceSubkey.expirationTime() - allowedDeltaTSeconds,
-            sourceSubkey.expirationTime() + allowedDeltaTSeconds);
-        const auto actualExpiration = key.subkey(2).expirationTime();
-        QVERIFY2(actualExpiration >= expectedExpirationRange.first,
-                 ("actual: " + std::to_string(actualExpiration) +
-                  "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
-        QVERIFY2(actualExpiration <= expectedExpirationRange.second,
-                 ("actual: " + std::to_string(actualExpiration) +
-                  "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
+            // allow 1 second different expiration because gpg calculates with
+            // expiration as difference to current time and takes current time
+            // several times
+            const auto allowedDeltaTSeconds = 1;
+            const auto expectedExpirationRange = std::make_pair(
+                uint_least32_t(sourceSubkey.expirationTime()) - allowedDeltaTSeconds,
+                uint_least32_t(sourceSubkey.expirationTime()) + allowedDeltaTSeconds);
+            const auto actualExpiration = uint_least32_t(key.subkey(2).expirationTime());
+            QVERIFY2(actualExpiration >= expectedExpirationRange.first,
+                    ("actual: " + std::to_string(actualExpiration) +
+                    "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
+            QVERIFY2(actualExpiration <= expectedExpirationRange.second,
+                    ("actual: " + std::to_string(actualExpiration) +
+                    "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
+        } else {
+            // on 32-bit systems the expiration date of the test key overflows;
+            // in this case we expect an appropriate error code
+            QCOMPARE(result.code(), static_cast<int>(GPG_ERR_INV_TIME));
+        }
     }
 
 private:
diff --git a/lang/qt/tests/t-changeexpiryjob.cpp b/lang/qt/tests/t-changeexpiryjob.cpp
index 090002f..3da74d4 100644
--- a/lang/qt/tests/t-changeexpiryjob.cpp
+++ b/lang/qt/tests/t-changeexpiryjob.cpp
@@ -70,7 +70,7 @@ private Q_SLOTS:
         QVERIFY(!key.isNull());
         QVERIFY(!key.subkey(0).isNull());
         QVERIFY(!key.subkey(1).isNull());
-        const auto subkeyExpiration = key.subkey(1).expirationTime();
+        const auto subkeyExpiration = uint_least32_t(key.subkey(1).expirationTime());
 
         {
             // Create the job
@@ -101,7 +101,7 @@ private Q_SLOTS:
                 newExpirationDate.toSecsSinceEpoch() - 10,
                 QDateTime::currentDateTime().addDays(1).toSecsSinceEpoch());
             {
-                const auto actualExpiration = key.subkey(0).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(0).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                          "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -110,7 +110,7 @@ private Q_SLOTS:
                          "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
             }
             {
-                const auto actualExpiration = key.subkey(1).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(1).expirationTime());
                 QCOMPARE(actualExpiration, subkeyExpiration);  // unchanged
             }
         }
@@ -133,7 +133,7 @@ private Q_SLOTS:
         QVERIFY(!key.isNull());
         QVERIFY(!key.subkey(0).isNull());
         QVERIFY(!key.subkey(1).isNull());
-        const auto primaryKeyExpiration = key.subkey(0).expirationTime();
+        const auto primaryKeyExpiration = uint_least32_t(key.subkey(0).expirationTime());
 
         {
             // Create the job
@@ -164,11 +164,11 @@ private Q_SLOTS:
                 newExpirationDate.toSecsSinceEpoch() - 10,
                 QDateTime::currentDateTime().addDays(2).toSecsSinceEpoch());
             {
-                const auto actualExpiration = key.subkey(0).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(0).expirationTime());
                 QCOMPARE(actualExpiration, primaryKeyExpiration);  // unchanged
             }
             {
-                const auto actualExpiration = key.subkey(1).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(1).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                          "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -196,7 +196,7 @@ private Q_SLOTS:
         QVERIFY(!key.isNull());
         QVERIFY(!key.subkey(0).isNull());
         QVERIFY(!key.subkey(1).isNull());
-        const auto subkeyExpiration = key.subkey(1).expirationTime();
+        const auto subkeyExpiration = uint_least32_t(key.subkey(1).expirationTime());
 
         {
             // Create the job
@@ -228,7 +228,7 @@ private Q_SLOTS:
                 newExpirationDate.toSecsSinceEpoch() - 10,
                 QDateTime::currentDateTime().addDays(3).toSecsSinceEpoch());
             {
-                const auto actualExpiration = key.subkey(0).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(0).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                          "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -237,7 +237,7 @@ private Q_SLOTS:
                          "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
             }
             {
-                const auto actualExpiration = key.subkey(1).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(1).expirationTime());
                 QCOMPARE(actualExpiration, subkeyExpiration);  // unchanged
             }
         }
@@ -291,7 +291,7 @@ private Q_SLOTS:
                 newExpirationDate.toSecsSinceEpoch() - 10,
                 QDateTime::currentDateTime().addDays(4).toSecsSinceEpoch());
             {
-                const auto actualExpiration = key.subkey(0).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(0).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                          "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -300,7 +300,7 @@ private Q_SLOTS:
                          "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
             }
             {
-                const auto actualExpiration = key.subkey(1).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(1).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                           "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -359,7 +359,7 @@ private Q_SLOTS:
                 newExpirationDate.toSecsSinceEpoch() - 10,
                 QDateTime::currentDateTime().addDays(5).toSecsSinceEpoch());
             {
-                const auto actualExpiration = key.subkey(0).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(0).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                          "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
@@ -368,7 +368,7 @@ private Q_SLOTS:
                          "; expected: " + std::to_string(expectedExpirationRange.second)).c_str());
             }
             {
-                const auto actualExpiration = key.subkey(1).expirationTime();
+                const auto actualExpiration = uint_least32_t(key.subkey(1).expirationTime());
                 QVERIFY2(actualExpiration >= expectedExpirationRange.first,
                         ("actual: " + std::to_string(actualExpiration) +
                           "; expected: " + std::to_string(expectedExpirationRange.first)).c_str());
