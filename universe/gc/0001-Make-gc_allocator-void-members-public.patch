From ebe1a40f26aac5e957acb5b4d168144ab390a115 Mon Sep 17 00:00:00 2001
From: Robert Hensing <robert@roberthensing.nl>
Date: Tue, 21 Nov 2023 22:00:12 +0100
Subject: [PATCH] Make gc_allocator<void> members public

PR #586 (bdwgc).

A private value_type is a problem for boost small_vector<X>, which
instantiates rebind<void> at some point.  E.g., instantiating
small_vector<int, 8, traceable_allocator<int>> results in
"'value_type' is a private member of 'traceable_allocator<void>'"
compiler error.

I don't see a reason why any of the members should be private, and
arguably it violates the Liskov substitution principle.  It seems that
these were left private by an accidental omission.

* include/gc/gc_allocator.h (gc_allocator<void>,
gc_allocator_ignore_off_page<void>, traceable_allocator<void>): Declare
all members of the class as public.
---
 include/gc_allocator.h | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/include/gc_allocator.h b/include/gc_allocator.h
index 597c7f13..255e0d3f 100644
--- a/include/gc_allocator.h
+++ b/include/gc_allocator.h
@@ -156,6 +156,7 @@ public:
 
 template<>
 class gc_allocator<void> {
+public:
   typedef size_t      size_type;
   typedef ptrdiff_t   difference_type;
   typedef void*       pointer;
@@ -233,6 +234,7 @@ public:
 
 template<>
 class gc_allocator_ignore_off_page<void> {
+public:
   typedef size_t      size_type;
   typedef ptrdiff_t   difference_type;
   typedef void*       pointer;
@@ -312,6 +314,7 @@ public:
 
 template<>
 class traceable_allocator<void> {
+public:
   typedef size_t      size_type;
   typedef ptrdiff_t   difference_type;
   typedef void*       pointer;
