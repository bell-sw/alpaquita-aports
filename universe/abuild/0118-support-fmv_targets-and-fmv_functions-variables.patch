From f6cf891b1345f3a1cb5ea825f367f975017e6fc3 Mon Sep 17 00:00:00 2001
From: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
Date: Fri, 8 Sep 2023 14:53:40 +0000
Subject: [PATCH] support fmv_targets and fmv_functions variables

* 'fmv_src_prefix' is used for custom build paths.

* 'fmv_check_files' is an optional variable and used for FMV sanity
   checks. It should contain the list of object files to be searched
   for specific FMV symbols.
---
 abuild.in | 56 +++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 54 insertions(+), 2 deletions(-)

diff --git a/abuild.in b/abuild.in
index 6791a02..68f2e78 100644
--- a/abuild.in
+++ b/abuild.in
@@ -776,6 +776,7 @@ default_prepare() {
 	local i failed=
 	[ -n "$builddir" -a -d "$builddir" ] && cd "$builddir"
 	if ! have_patches; then
+		setup_fmv
 		return 0
 	fi
 	[ -d "$builddir" ] || { error "Is \$builddir set correctly?"; return 1; }
@@ -795,6 +796,9 @@ default_prepare() {
 				;;
 		esac
 	done
+
+	setup_fmv
+
 	if [ -z "$failed" ]; then
 		return 0
 	fi
@@ -1977,7 +1981,7 @@ build_abuildrepo() {
 		set_source_date
 
 		for part in remove_libc_tags validate builddeps clean fetch unpack prepare mkusers build \
-				$_check rootpkg; do
+				$_check check_fmv rootpkg; do
 			runpart $part
 		done
 		_endtime=$(date -u +%s)
@@ -2561,7 +2565,7 @@ rootbld_actions() {
 	if ! want_check; then
 		_check=true
 	fi
-	for part in symlinksrc unpack prepare build $_check rootpkg; do
+	for part in symlinksrc unpack prepare build $_check check_fmv rootpkg; do
 		runpart $part
 	done
 }
@@ -3114,6 +3118,54 @@ remove_cflags()
 	export CPPFLAGS="${CPPFLAGS//$f/}"
 }
 
+setup_fmv()
+{
+	if [ -z "$fmv_targets" ] || [ -z "$fmv_functions" ] || [ "$CARCH" != "x86_64" ]; then
+		return 0
+	fi
+
+	local i targets functions
+	local cflags="-fplugin=fmv"
+
+	for i in $fmv_targets; do
+		[ "$targets" ] && targets="$targets,$i" || targets="-fplugin-arg-fmv-targets=$i"
+	done
+	for i in $fmv_functions; do
+		local srcfile="${i%%:*}"
+		local srcpath="$builddir/$srcfile"
+
+		[ "$srcfile" != "*" ] && [ ! -f "$srcpath" ] && die "fmv: missing src file $srcpath"
+
+		local fn="${fmv_src_prefix}$i"
+		[ "$functions" ] && functions="$functions+$fn" || \
+		                    functions="-fplugin-arg-fmv-functions=$fn"
+	done
+
+	cflags="$cflags $targets $functions"
+	export CFLAGS="$CFLAGS $cflags"
+}
+
+check_fmv()
+{
+	[ "$fmv_check_files" ] || return 0
+
+	local files="$fmv_check_files"
+	local pattern
+
+	case "$CARCH" in
+	x86_64) pattern='[.]resolver';;
+	*) return 0;;
+	esac
+
+	msg "fmv: checking '$files' for '$pattern' in symbols"
+
+	local i; for i in $files; do
+		[ -f "$i" ] || die "fmv: cannot find file '$i'"
+		nm -jUC $i | grep -q "$pattern" || die "fmv: file '$i' missing '$pattern' in symbols"
+	done
+}
+
+
 if options_has "!annobin" || [ -n "$ABUILD_DISABLE_ANNOBIN" ] ; then
 	remove_cflags "-fplugin=annobin"
 fi
-- 
2.46.2

