From 78e485d2768a8944c37d74b8aea746525e08d870 Mon Sep 17 00:00:00 2001
From: Arjan Molenaar <gaphor@gmail.com>
Date: Sat, 23 Mar 2024 14:54:52 +0100
Subject: [PATCH 1/4] Add a Bitmask implementation, similar to GStreamer's

This implementation causes trouble when initialized
with the new fundamental type support.
---
 tests/gi/overrides/Regress.py | 27 ++++++++++++--
 tests/regressextra.c          | 66 +++++++++++++++++++++++++++++++++++
 tests/regressextra.h          | 22 ++++++++++++
 3 files changed, 112 insertions(+), 3 deletions(-)

diff --git a/tests/gi/overrides/Regress.py b/tests/gi/overrides/Regress.py
index cb3863113..991e98328 100644
--- a/tests/gi/overrides/Regress.py
+++ b/tests/gi/overrides/Regress.py
@@ -18,9 +18,30 @@
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
 # USA
 
-from ..importer import modules
+from ..importer import get_introspection_module
+from ..overrides import override
 
-Regress = modules['Regress']._introspection_module
+Regress = get_introspection_module('Regress')
 
 REGRESS_OVERRIDE = 42
-__all__ = ['REGRESS_OVERRIDE']
+
+
+class Bitmask(Regress.Bitmask):
+    """Replicate override of Bitmask (uint64), similar to GStreamer."""
+
+    def __init__(self, v):
+        if not isinstance(v, int):
+            raise TypeError("%s is not an int." % (type(v)))
+
+        self.v = int(v)
+
+    def __str__(self):
+        return hex(self.v)
+
+    def __eq__(self, other):
+        return self.v == other
+
+
+Bitmask = override(Bitmask)
+
+__all__ = ['REGRESS_OVERRIDE', "Bitmask"]
diff --git a/tests/regressextra.c b/tests/regressextra.c
index e4c2861f3..07ac3d5fd 100644
--- a/tests/regressextra.c
+++ b/tests/regressextra.c
@@ -485,3 +485,69 @@ static void regress_test_action_class_init (RegressTestActionClass *klass)
         G_CALLBACK (regress_test_action_do_action2), NULL, NULL,
         NULL, regress_test_action_get_type (), 0);
 }
+
+/*
+ * RegressBitmask
+ *
+ * Mimic a primitive, fundamental type.
+ */
+
+static void
+regress_value_init_bitmask (GValue * value)
+{
+  value->data[0].v_uint64 = 0;
+}
+
+static void
+regress_value_copy_bitmask (const GValue * src_value, GValue * dest_value)
+{
+  dest_value->data[0].v_uint64 = src_value->data[0].v_uint64;
+}
+
+static void
+_value_transform_uint64_bitmask (const GValue * src_value, GValue * dest_value)
+{
+    dest_value->data[0].v_uint64 = src_value->data[0].v_uint64;
+}
+
+static void
+_value_transform_bitmask_uint64 (const GValue * src_value, GValue * dest_value)
+{
+    dest_value->data[0].v_uint64 = src_value->data[0].v_uint64;
+}
+
+static const GTypeValueTable _regress_bitmask_value_table = {
+    regress_value_init_bitmask,
+    NULL,
+    regress_value_copy_bitmask,
+    NULL,
+    (char *) NULL,
+    NULL,
+    (char *) NULL,
+    NULL
+};
+
+GType
+regress_bitmask_get_type (void)
+{
+  static GType regress_bitmask_type = 0;
+
+  if (g_once_init_enter (&regress_bitmask_type)) {
+    GTypeInfo _info = { 0, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, &_regress_bitmask_value_table };
+    GTypeFundamentalInfo _finfo = { 0 };
+    GType _type = g_type_register_fundamental (
+        g_type_fundamental_next (),
+        "RegressBitmask", &_info, &_finfo, 0);
+
+    g_once_init_leave(&regress_bitmask_type, _type);
+
+    g_value_register_transform_func (
+      REGRESS_TYPE_BITMASK, G_TYPE_UINT64,
+      _value_transform_bitmask_uint64);
+    g_value_register_transform_func (
+      G_TYPE_UINT64, REGRESS_TYPE_BITMASK,
+      _value_transform_uint64_bitmask);
+  }
+
+  return regress_bitmask_type;
+}
diff --git a/tests/regressextra.h b/tests/regressextra.h
index 1e976f627..86ed14c24 100644
--- a/tests/regressextra.h
+++ b/tests/regressextra.h
@@ -90,4 +90,26 @@ typedef struct {
 _GI_TEST_EXTERN
 GType regress_test_action_get_type (void);
 
+
+/**
+ * RegressBitmask:
+ *
+ * A fundamental type that describes a 64-bit bitmask.
+ *
+ * This type resembles GStreamer's Bitmask type.
+ */
+
+/**
+ * REGRESS_TYPE_BITMASK:
+ *
+ * a #GValue type that represents a 64-bit bitmask.
+ *
+ * Returns: the #GType of RegressBitmask (which is not explicitly typed)
+ */
+
+#define REGRESS_TYPE_BITMASK                 (regress_bitmask_get_type())
+
+_GI_TEST_EXTERN
+GType regress_bitmask_get_type (void);
+
 #endif /* REGRESS_EXTRA_H */
-- 
GitLab


From babdb974f4a0d96a0007b64d5ed39a9f6fcdb81b Mon Sep 17 00:00:00 2001
From: Arjan Molenaar <gaphor@gmail.com>
Date: Sat, 23 Mar 2024 15:37:05 +0100
Subject: [PATCH 2/4] Add test case that fails similarly as for GStreamer

See https://gitlab.gnome.org/GNOME/pygobject/-/issues/624.
---
 tests/test_fundamental.py | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/tests/test_fundamental.py b/tests/test_fundamental.py
index 053ebfd31..815aa7378 100644
--- a/tests/test_fundamental.py
+++ b/tests/test_fundamental.py
@@ -130,6 +130,12 @@ def test_multiple_objects():
     assert obj1 != obj2
 
 
+def test_fundamental_primitive_object():
+    bitmask = Regress.Bitmask(2)
+
+    assert bitmask.v == 2
+
+
 def test_custom_fundamental_type_vfunc_override(capsys):
     obj = MyCustomFundamentalObject()
     del obj
-- 
GitLab


From 27d34e4c1d24d8f8f15035b18630a00d7c5d2e26 Mon Sep 17 00:00:00 2001
From: Arjan Molenaar <gaphor@gmail.com>
Date: Sat, 23 Mar 2024 16:08:32 +0100
Subject: [PATCH 3/4] Do no longer error on arguments

Handle no-arguments check in init function instead of new.
---
 gi/pygi-fundamental.c | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/gi/pygi-fundamental.c b/gi/pygi-fundamental.c
index a52314e99..374b86aba 100644
--- a/gi/pygi-fundamental.c
+++ b/gi/pygi-fundamental.c
@@ -55,17 +55,11 @@ fundamental_new (PyTypeObject *type,
                  PyObject     *args,
                  PyObject     *kwargs)
 {
-    static char *kwlist[] = { NULL };
-
     GIBaseInfo *info;
     gpointer pointer;
     PyGIFundamental *self = NULL;
     GType g_type;
 
-    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "", kwlist)) {
-        return NULL;
-    }
-
     info = _pygi_object_get_gi_info ((PyObject *) type, &PyGIObjectInfo_Type);
     if (info == NULL) {
         if (PyErr_ExceptionMatches (PyExc_AttributeError)) {
@@ -99,6 +93,19 @@ out:
     return (PyObject *) self;
 }
 
+static int
+fundamental_init(PyObject     *self,
+                 PyObject     *args,
+                 PyObject     *kwargs)
+{
+    static char *kwlist[] = { NULL };
+
+    if (!PyArg_ParseTupleAndKeywords (args, kwargs, ":Fundamental.__init__", kwlist)) {
+        return -1;
+    }
+    return 0;
+}
+
 static PyObject*
 fundamental_richcompare (PyObject *self,
                          PyObject *other,
@@ -222,6 +229,7 @@ pygi_fundamental_register_types (PyObject *m)
 
     PyGIFundamental_Type.tp_alloc = PyType_GenericAlloc;
     PyGIFundamental_Type.tp_new = (newfunc) fundamental_new;
+    PyGIFundamental_Type.tp_init = (initproc) fundamental_init;
     PyGIFundamental_Type.tp_dealloc = (destructor) fundamental_dealloc;
     PyGIFundamental_Type.tp_flags = (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE);
     PyGIFundamental_Type.tp_richcompare = fundamental_richcompare;
-- 
GitLab


From d6d937e3da5791420f17b83cf4caaceab1c0e1b9 Mon Sep 17 00:00:00 2001
From: Arjan Molenaar <gaphor@gmail.com>
Date: Sat, 23 Mar 2024 16:14:44 +0100
Subject: [PATCH 4/4] Only wrap instantiatable fundamental types

This should prevent primitive (non-instantiatable) types
from being derived from Fundamental.
Those are -- in the case of GStreamer -- wrapped by Python classes
anyway.
---
 gi/module.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gi/module.py b/gi/module.py
index 91e1be089..0dafa8fe4 100644
--- a/gi/module.py
+++ b/gi/module.py
@@ -76,7 +76,7 @@ def get_parent_for_object(object_info):
         if gtype and gtype.pytype:
             return gtype.pytype
 
-        if object_info.get_fundamental():
+        if object_info.get_fundamental() and gtype.is_instantiatable():
             return Fundamental
 
         # Otherwise use builtins.object as the base
-- 
GitLab

