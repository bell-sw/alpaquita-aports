On the Alpine CI our moby configuration returns ENOSYS instead of EPERM
when attempting to use the unshare(2) system call from a container. The
Go test suite expects unshare(2) to return EPERM in this scenario and
skips tests using it when it does. By treating the ENOSYS errno in the
same way as the EPERM errno we can ensure that the Go test suite
continues to work on the Alpine CI.

diff -upr go.orig/src/internal/testenv/testenv_unix.go go/src/internal/testenv/testenv_unix.go
--- go.orig/src/internal/testenv/testenv_unix.go	2024-02-07 22:22:28.061029248 +0100
+++ go/src/internal/testenv/testenv_unix.go	2024-02-07 22:23:14.987517144 +0100
@@ -28,9 +28,10 @@ func syscallIsNotSupported(err error) bo
 			// User lacks permission: either the call requires root permission and the
 			// user is not root, or the call is denied by a container security policy.
 			return true
-		case syscall.EINVAL:
+		case syscall.EINVAL, syscall.ENOSYS:
 			// Some containers return EINVAL instead of EPERM if a system call is
-			// denied by security policy.
+			// denied by security policy. Some of our Alpine containters also return
+			// ENOSYS in this case.
 			return true
 		}
 	}
