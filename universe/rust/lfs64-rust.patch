Patch-Source: https://github.com/rust-lang/rust/pull/106246
--
From e2355ea7f22219f1fb3919a45e4f07502652ee5c Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 19 May 2023 09:22:21 -0700
Subject: [PATCH] Do not use LFS64 on linux with musl

glibc is providing open64 and other lfs64 functions but musl aliases
them to normal equivalents since off_t is always 64-bit on musl,
therefore check for target env along when target OS is linux before
using open64, this is more available. Latest Musl has made these
namespace changes [1]

[1] https://git.musl-libc.org/cgit/musl/commit/?id=246f1c811448f37a44b41cd8df8d0ef9736d95f4

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 library/std/src/os/linux/fs.rs |  9 ++++++++-
 library/std/src/sys/unix/fd.rs | 14 ++++++++++----
 library/std/src/sys/unix/fs.rs | 25 +++++++++++++++++++------
 3 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/library/std/src/os/linux/fs.rs b/library/std/src/os/linux/fs.rs
index 479bbcc17a89e..ab0b2a3eda3f5 100644
--- a/library/std/src/os/linux/fs.rs
+++ b/library/std/src/os/linux/fs.rs
@@ -329,7 +329,14 @@ pub trait MetadataExt {
 impl MetadataExt for Metadata {
     #[allow(deprecated)]
     fn as_raw_stat(&self) -> &raw::stat {
-        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }
+        #[cfg(target_env = "musl")]
+        unsafe {
+            &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat)
+        }
+        #[cfg(not(target_env = "musl"))]
+        unsafe {
+            &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat)
+        }
     }
     fn st_dev(&self) -> u64 {
         self.as_inner().as_inner().st_dev as u64
diff --git a/library/std/src/sys/unix/fd.rs b/library/std/src/sys/unix/fd.rs
index cb630eede6da0..c1e0c05213ac2 100644
--- a/library/std/src/sys/unix/fd.rs
+++ b/library/std/src/sys/unix/fd.rs
@@ -126,9 +126,12 @@ impl FileDesc {
     }
 
     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
-        #[cfg(not(any(target_os = "linux", target_os = "android", target_os = "hurd")))]
+        #[cfg(not(any(
+            all(target_os = "linux", not(target_env = "musl")),
+            target_os = "android", target_os = "hurd"
+        )))]
         use libc::pread as pread64;
-        #[cfg(any(target_os = "linux", target_os = "android", target_os = "hurd"))]
+        #[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "android", target_os = "hurd"))]
         use libc::pread64;
 
         unsafe {
@@ -285,9 +288,12 @@ impl FileDesc {
     }
 
     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
-        #[cfg(not(any(target_os = "linux", target_os = "android", target_os = "hurd")))]
+        #[cfg(not(any(
+            all(target_os = "linux", not(target_env = "musl")),
+            target_os = "android", target_os = "hurd"
+        )))]
         use libc::pwrite as pwrite64;
-        #[cfg(any(target_os = "linux", target_os = "android", target_os = "hurd"))]
+        #[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "android", target_os = "hurd"))]
         use libc::pwrite64;
 
         unsafe {
diff --git a/library/std/src/sys/unix/fs.rs b/library/std/src/sys/unix/fs.rs
index fbc7f04ce9a..3d9ee5849dd 100644
--- a/library/std/src/sys/unix/fs.rs
+++ b/library/std/src/sys/unix/fs.rs
@@ -40,15 +40,16 @@
 ))]
 use libc::c_char;
 #[cfg(any(
-    target_os = "linux",
+    all(target_os = "linux", not(target_env = "musl")),
     target_os = "emscripten",
     target_os = "android",
     target_os = "hurd",
 ))]
 use libc::dirfd;
-#[cfg(any(target_os = "linux", target_os = "emscripten", target_os = "hurd"))]
+#[cfg(any(not(target_env = "musl"), target_os = "emscripten", target_os = "hurd"))]
 use libc::fstatat64;
 #[cfg(any(
+    target_env = "musl",
     target_os = "android",
     target_os = "solaris",
     target_os = "fuchsia",
@@ -58,7 +59,10 @@
     target_os = "vita",
 ))]
 use libc::readdir as readdir64;
-#[cfg(any(target_os = "linux", target_os = "hurd"))]
+#[cfg(any(
+    all(target_os = "linux", not(target_env = "musl")),
+    target_os = "hurd"
+))]
 use libc::readdir64;
 #[cfg(any(target_os = "emscripten", target_os = "l4re"))]
 use libc::readdir64_r;
@@ -81,7 +85,13 @@
     dirent as dirent64, fstat as fstat64, fstatat as fstatat64, ftruncate64, lseek64,
     lstat as lstat64, off64_t, open as open64, stat as stat64,
 };
+#[cfg(target_env = "musl")]
+use libc::{
+    dirent as dirent64, fstat as fstat64, ftruncate as ftruncate64, lseek as lseek64,
+    lstat as lstat64, off_t as off64_t, open as open64, stat as stat64,
+};
 #[cfg(not(any(
+    target_env = "musl",
     target_os = "linux",
     target_os = "emscripten",
     target_os = "l4re",
@@ -93,7 +103,7 @@
     lstat as lstat64, off_t as off64_t, open as open64, stat as stat64,
 };
 #[cfg(any(
-    target_os = "linux",
+    not(target_env = "musl"),
     target_os = "emscripten",
     target_os = "l4re",
     target_os = "hurd"
@@ -284,6 +294,7 @@
 #[cfg(any(
     target_os = "android",
     target_os = "linux",
+    not(target_env = "musl"),
     target_os = "solaris",
     target_os = "illumos",
     target_os = "fuchsia",
@@ -327,6 +338,7 @@
 }
 
 #[cfg(not(any(
+    target_env = "musl",
     target_os = "android",
     target_os = "linux",
     target_os = "solaris",
@@ -829,7 +841,7 @@
 
     #[cfg(all(
         any(
-            target_os = "linux",
+            not(target_env = "musl"),
             target_os = "emscripten",
             target_os = "android",
             target_os = "hurd",
@@ -858,7 +870,7 @@
 
     #[cfg(any(
         not(any(
-            target_os = "linux",
+            not(target_env = "musl"),
             target_os = "emscripten",
             target_os = "android",
             target_os = "hurd",
