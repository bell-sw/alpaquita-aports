pkgname=rust
pkgver=1.76.0
_llvmver=17
_bootver=1.75.0
pkgrel=0
pkgdesc="Rust Programming Language toolchain"
url="https://www.rust-lang.org/"
arch="all"
license="Apache-2.0 AND MIT"

# 'cc' is needed at runtime just for linking. Someday rustc might invoke
# the linker directly, and then we'll only need 'ld'.
# See: https://github.com/rust-lang/rust/issues/11937
depends="gcc $CLIBC-dev"

# * Rust is self-hosted, so you need rustc (and cargo) to build rustc...
#   The last revision of this abuild that does not depend on itself (uses
#   prebuilt rustc and cargo) is 2e6769eb39eaff3029d8298fc02856623c563cd8.
# * Don't add libgit2-dev into make dependencies. There's no compatibility
#   guarantees between libgit2-sys and arbitrary system libgit2 versions;
#   when system libgit2 is upgraded to a new minor version, it may break
#   cargo and since we need cargo to rebuild cargo... this already happened
#   several times. For this reason we build cargo with vendored libgit2.
makedepends_build="
	!libgit2-dev
	cargo-bootstrap>=$_bootver
	coreutils
	curl-dev
	file
	libssh2-dev
	llvm$_llvmver-dev
	llvm$_llvmver-test-utils
	openssl-dev
	python3
	rust-bootstrap>=$_bootver
	tar
	wasi-libc
	xz-dev
	zlib-dev
	"
makedepends_host="
	curl-dev
	libssh2-dev
	llvm$_llvmver-dev
	openssl-dev
	zlib-dev
	"

# XXX: This is a hack to allow this abuild to depend on itself. Adding "rust"
# to makedepends would not work, because abuild implicitly removes $pkgname
# and $subpackages from the abuild's dependencies.
provides="rust-bootstrap=$pkgver-r$pkgrel"
# This is needed for -src that contains some testing binaries.
options="!archcheck !annobin"

case "$CARCH" in
arm*|riscv64)
	# +crt-static still broken here, last checked with rust 1.75.0
	options="$options !check"
	;;
*)
	;;
esac

subpackages="
	$pkgname-dbg
	$pkgname-doc
	$pkgname-clippy
	$pkgname-gdb::noarch
	$pkgname-lldb::noarch
	$pkgname-src::noarch
	$pkgname-wasm
	cargo
	cargo-bash-completions:_cargo_bashcomp:noarch
	cargo-zsh-completion:_cargo_zshcomp:noarch
	cargo-doc:_cargo_doc:noarch
	rustfmt
	"
source="https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.xz
	alpine-move-py-scripts-to-share.patch
	alpaquita-target.patch
	bootstrap-vendor-remap.patch
	do-not-install-libunwind-source.patch
	musl:gcc-eh-libunwind.patch
	install-template-shebang.patch
	musl:musl-fix-linux_musl_base.patch
	need-rpath.patch
	need-ssp_nonshared.patch
	no-export-ld-library-path.patch
	revert-rustc_codegen_ssa-use-try_canonicalize-in-rpath.patch
	system-wasm-ld.patch
	check-rustc
	"
builddir="$srcdir/rustc-$pkgver-src"

# secfixes:
#   1.71.1-r0:
#     - CVE-2023-38497
#   1.66.1-r0:
#     - CVE-2022-46176
#   1.56.1-r0:
#     - CVE-2021-42574
#   1.52.1-r1:
#     - CVE-2021-29922
#   1.51.0-r2:
#     - CVE-2020-36323
#     - CVE-2021-31162
#   1.34.2-r0:
#     - CVE-2019-12083
#   1.26.0-r0:
#     - CVE-2019-16760

if [ -z "$BOOTSTRAP" ]; then
	makedepends_build="
		$makedepends_build
		patchelf
		"
	makedepends_host="
		$makedepends_host
		scudo-malloc
		"
fi

# We have to add new architectures in multiple steps:
# 1. Compile with the upstream triplets, compiling alpine's triplets in
# 2. Compile again, now with our triplets selected as build/target, now that
#    rustc knows about them
_build="$CBUILD"
_target="$CTARGET"

_rlibdir="usr/lib/rustlib/$_target/lib"
_sharedir="usr/share/rust"

ldpath="/$_rlibdir"

export OPENSSL_NO_VENDOR=1
export RUST_BACKTRACE=1

export gztool="$(command -v pigz || echo gzip)"

# this is useful for when we have to patch vendored projects
_clear_vendor_checksums() {
	sed -i 's/\("files":{\)[^}]*/\1/' vendor/$1/.cargo-checksum.json
}

build() {
	if [ "$_build" != "$_target" ]; then
		export PKG_CONFIG_ALLOW_CROSS=1
	fi

	# absolutely do not set these here, rust "knows" what it's doing
	unset CARGO_PROFILE_RELEASE_LTO
	unset CARGO_PROFILE_RELEASE_OPT_LEVEL
	unset CARGO_PROFILE_RELEASE_PANIC
	unset CARGO_PROFILE_RELEASE_CODEGEN_UNITS

	export CFLAGS="$CFLAGS -O2"
	export CXXFLAGS="$CXXFLAGS -O2"

	case "$CARCH" in
	riscv64)
		;;
	*)
		local lto=--set="rust.lto=thin"
		;;
	esac

	case "$CARCH" in
	aarch64|ppc64le|x86_64)
		# this doesn't build on s390x, but since it's only useful with rust-analyzer,
		# and we enable it on these arches only, just do that
		local rust_analyzer="rust-analyzer-proc-macro-srv,"
		;;
	*)
		local rust_analyzer=""
		;;
	esac

	./configure \
		--build="$_build" \
		--host="$_target" \
		--target="$_target,wasm32-wasi,wasm32-unknown-unknown" \
		--prefix="/usr" \
		--release-channel="stable" \
		--enable-local-rust \
		--local-rust-root="/usr" \
		--llvm-root="/usr/lib/llvm$_llvmver" \
		--disable-docs \
		--enable-extended \
		--tools="cargo,clippy,src,${rust_analyzer}rustdoc,rustfmt,rust-demangler" \
		--enable-llvm-link-shared \
		--enable-option-checking \
		--enable-locked-deps \
		--enable-profiler \
		--enable-vendor \
		--dist-compression-formats=gz \
		--python="python3" \
		--set="rust.musl-root=/usr" \
		--set="rust.backtrace-on-ice=true" \
		--set="rust.codegen-units=1" \
		--set="rust.codegen-units-std=1" \
		--set="rust.deny-warnings=false" \
		--set="rust.parallel-compiler=false" \
		--set="rust.remap-debuginfo=true" \
		--set="rust.description=$VENDOR_DISTRO_NAME Linux $pkgver-r$pkgrel" \
		$lto \
		--set="target.$_target.llvm-config=/usr/lib/llvm$_llvmver/bin/llvm-config" \
		--set="target.$_target.musl-root=/usr" \
		--set="target.$_target.crt-static=false" \
		--set="target.$_target.cc=${CROSS_COMPILE}cc" \
		--set="target.$_target.cxx=${CROSS_COMPILE}c++" \
		--set="target.$_target.ar=${CROSS_COMPILE}ar" \
		--set="target.$_target.linker=${CROSS_COMPILE}cc" \
		--set="target.$_build.musl-root=/usr" \
		--set="target.$_build.crt-static=false" \
		--set="target.$_build.cc=cc" \
		--set="target.$_build.cxx=c++" \
		--set="target.$_build.ar=ar" \
		--set="target.$_build.linker=cc" \
		--set="target.wasm32-unknown-unknown.sanitizers=false" \
		--set="target.wasm32-unknown-unknown.profiler=false" \
		--set="target.wasm32-unknown-unknown.linker=lld" \
		--set="target.wasm32-wasi.sanitizers=false" \
		--set="target.wasm32-wasi.profiler=false" \
		--set="target.wasm32-wasi.wasi-root=/usr/share/wasi-sysroot"

	python3 ./x.py dist --jobs ${JOBS:-2}
}

check() {
	# At this moment lib/rustlib/$CTARGET/lib does not contain a complete
	# copy of the .so libs from lib (they will be copied there during
	# 'x.py install'). Thus we must set LD_LIBRARY_PATH for tests to work.

	msg "Setting up test env..."

	mkdir -p "$builddir/test-rustc"

	tar -I "$gztool -d" -xf "$builddir"/build/dist/rustc-$pkgver-$_target.tar.gz \
		-C "$builddir/test-rustc" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rust-std-$pkgver-$_target.tar.gz \
		-C "$builddir/test-rustc" --strip-components=2 --exclude=manifest.in --no-same-owner &
	wait

	export LD_LIBRARY_PATH="$builddir/test-rustc/lib/rustlib/$CTARGET/lib"

	msg "Sanity checks..."
	"$srcdir"/check-rustc "$builddir"/test-rustc/bin/rustc

	# XXX: There's some problem with these tests, we will figure it out later.
	#	make check \
	#		LD_LIBRARY_PATH="$_stage0dir/lib" \
	#		VERBOSE=1

	# these rebuild the whole compiler which takes a long time
	# msg "Running tests for cargo..."
	# CFG_DISABLE_CROSS_TESTS=1 python3 ./x.py test --no-fail-fast src/tools/cargo

	unset LD_LIBRARY_PATH
}

package() {
	# merged into main package
	provides="$provides rust-stdlib=$pkgver-r$pkgrel"
	replaces="rust-stdlib"

	mkdir -p "$pkgdir/usr"

	cd "$pkgdir"

	tar -I "$gztool -d" -xf "$builddir"/build/dist/rustc-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rust-std-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rustc-dev-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rust-src-$pkgver.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	wait
	tar -I "$gztool -d" -xf "$builddir"/build/dist/cargo-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/clippy-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rustfmt-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rust-std-$pkgver-wasm32-unknown-unknown.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	tar -I "$gztool -d" -xf "$builddir"/build/dist/rust-std-$pkgver-wasm32-wasi.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner &
	wait

	# We don't want to include stuff like rust-llvm-* tools, as we will use the
	# system tools.
	rm -f usr/lib/rustlib/"$_target"/bin/rust-llvm-*

	# Python scripts are noarch, so move them to /usr/share.
	# Requires move-py-scripts-to-share.patch to be applied.
	_mv usr/lib/rustlib/etc/*.py $_sharedir/etc/
	rmdir -p usr/lib/rustlib/etc 2>/dev/null || true

	_mv usr/etc/bash_completion.d/cargo usr/share/bash-completion/completions/
	rmdir -p usr/etc/bash_completion.d 2>/dev/null || true

	_mv usr/lib/rustlib/src/rust usr/src/
	ln -s ../../../src/rust usr/lib/rustlib/src/rust

	# Remove some clutter.
	cd "$pkgdir"/usr/lib/rustlib
	rm -f components install.log manifest-* rust-installer-version uninstall.sh
	if [ "$_build" != "$_target" ]; then
		rm -rf "$pkgdir"/usr/lib/rustlib/$_build
	fi

	# for some reason the tar archive gets some root-only files for rlibs
	find "$pkgdir"/usr/lib/rustlib -type f -perm -600 -exec chmod 0644 {} \+
	find "$pkgdir"/usr/lib/rustlib -type f -perm -700 -exec chmod 0755 {} \+

	if [ -z "$BOOTSTRAP" ]; then
		# link scudo to tools by default on architectures where it works well
		# this is roughly 20+% faster with no downside except slightly higher
		# memory use, but this is a compiler that already uses a ton of memory
		case "$CARCH" in
		arm*) ;;
		*)
			patchelf --add-needed libscudo.so \
				"$pkgdir"/usr/bin/cargo \
				"$pkgdir"/usr/bin/rustc \
				"$pkgdir"/usr/bin/rustdoc
			;;
		esac
	fi
}

wasm() {
	pkgdesc="WebAssembly targets for rust"
	depends="rust=$pkgver-r$pkgrel lld wasi-libc"

	amove usr/lib/rustlib/wasm32-*
}

analysis() {
	pkgdesc="Compiler analysis data for the Rust standard library"
	depends="$pkgname=$pkgver-r$pkgrel"

	amove $_rlibdir/../analysis
}

gdb() {
	pkgdesc="GDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel gdb"

	amove usr/bin/rust-gdb*
	amove $_sharedir/etc/gdb_*.py
}

lldb() {
	pkgdesc="LLDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel lldb py3-lldb"

	amove usr/bin/rust-lldb
	amove $_sharedir/etc/lldb_*.py
}

clippy() {
	pkgdesc="Lints to catch common mistakes and improve your Rust code"
	depends="$pkgname=$pkgver-r$pkgrel"

	amove usr/bin/cargo-clippy
	amove usr/bin/clippy-driver
}

src() {
	pkgdesc="$pkgdesc (source code)"
	depends="$pkgname=$pkgver-r$pkgrel"
	license="$license OFL-1.1 GPL-3.0-or-later GPL-3.0-with-GCC-exception CC-BY-SA-3.0 LGPL-3.0"

	amove usr/src
	amove usr/lib/rustlib/src
}

cargo() {
	pkgdesc="The Rust package manager"
	license="Apache-2.0 MIT UNLICENSE"
	depends="$pkgname=$pkgver-r$pkgrel"
	# XXX: See comment on top-level provides=.
	provides="cargo-bootstrap=$pkgver-r$pkgrel"

	amove usr/bin/cargo
}

rustfmt() {
	pkgdesc="Rust Code Formatter"
	license="Apache-2.0"
	depends="cargo=$pkgver-r$pkgrel"

	amove usr/bin/rustfmt
	amove usr/bin/cargo-fmt
}

_cargo_bashcomp() {
	pkgdesc="Bash completions for cargo"
	license="Apache-2.0 MIT"
	depends=""
	install_if="cargo=$pkgver-r$pkgrel bash-completion"

	amove usr/share/bash-completion
}

_cargo_zshcomp() {
	pkgdesc="ZSH completions for cargo"
	license="Apache-2.0 MIT"
	depends=""
	install_if="cargo=$pkgver-r$pkgrel zsh"

	amove usr/share/zsh/site-functions/_cargo
}

_cargo_doc() {
	pkgdesc="The Rust package manager (documentation)"
	license="Apache-2.0 MIT"
	install_if="docs cargo=$pkgver-r$pkgrel"

	# XXX: This is hackish!
	cd "$pkgdir"/../$pkgname-doc
	_mv usr/share/man/man1/cargo* "$subpkgdir"/usr/share/man/man1/
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv "$@"
}

sha512sums="
92e16cfdeb91bde341fe6c2774d92868275b07aa1d46d870ddc9291eadfe4ea9af93e06586fa7d6b8d60534903945cbbe706d354c90272712989c58d2bf174bf  rustc-1.76.0-src.tar.xz
9de9d7ad05584e3cafddedcac409a4605a1d67e82260220deb3efd965603ee3148062b081c0cd736e50d82daad3a723fb6a7493fdf4dddfe36288645425a7946  alpine-move-py-scripts-to-share.patch
f773202c44c877b042c30c9d94b421fd8b8da1cd1cfbd4db04338b97295f889050ca6ecae5d9dd06770244d1701c7864328d8d5eee12e20826c0900a2927003f  alpaquita-target.patch
bf039bacf62864bcbf1da2a501ec8e32c106252e526468b6222e8c6cacdf32b256ecb39a2fd4e23f73001b585c36f2746407b8ef5a25f7572a258050883b7c7f  bootstrap-vendor-remap.patch
b4f09270f4e1677975d12447be9960271b00ffb8ab55987864c306fa45b8f70bdb82fd89e5fa7ad1cf604a1c91fbac8f3753b29dc98e10e7f47edf13d9071d77  do-not-install-libunwind-source.patch
d4531905520b3fc699fbf57b267130bdbca94e2773a710e8b4c618ae3895149312934dd92d1988860c6dd102af50e05264b49a01662d5621c26de3604c753d6a  gcc-eh-libunwind.patch
b283d31cc8d6559aa639d44f776e97c2a1e0f23c717b6784e549861b881555bd467fa6023180866aae81a9a58c5f83e306940ee645f3c6733a1bdef6130036c9  install-template-shebang.patch
a32f3a9bcab771cce6be2ad936cd4edad3bb638f38da02e79c29cfed967eb0edcdf47ae892bbdd2959cebb5c74dee3fcc752dc2405f761d5c8ecc0021abb24a0  musl-fix-linux_musl_base.patch
7ad05849016a6c69bafcb947373edc0d2649d1ac970ae2b6d4ab80e76c2957cbcd11bf00515a356f1dc96fbf49fc5447a3a5d90a3d8c9fd32fc5ec2e9b086d2a  need-rpath.patch
b83449f86d4bd7f45c28fc12e004c471a7b2a17e336e12543cb39e3d3dc68fd07cac52af4524821374f7fd79a77df8de5cb6837b946bb59eb671bdf459001e20  need-ssp_nonshared.patch
da5ea8ea2360ba6fdc2b3f29063baf978af19f7ff106d0511912b1357e1e613dae0417d3b55fb2aafb4e97d1749cb01046d76c6a27a03e384468e2d26c2a30dc  no-export-ld-library-path.patch
74c0d14a68c2d7355f15ec3704d387556ad337e4991831e94951906d17aeb60387d20586a63cf6cdc62b46c60e1874340a250196ec2b3e75c268af1c41fae7e9  revert-rustc_codegen_ssa-use-try_canonicalize-in-rpath.patch
fc5d13242aaa7f0a5ac78fa2e4fa02c50816daa20ad9671e55738f27218186748694ec973ae9b7f13d97910f35c14ed0d73b6d6fa3e484865a92fad9fc1e86b0  system-wasm-ld.patch
c31fdfe8a9b3411576c75da46645cf0465b9053000a2ab49cf9b2f2733f679d6d33acbf236d67a20e14935d094a685453b7f1840180249f39d610fd0902c3125  check-rustc
"
