This reverts upstream 5aeb6a326f2fa941061b60c9286665847fe0401e that is
part of https://github.com/rust-lang/rust/pull/116487

Since we always enable `-Crpath` with need-rpath.patch things like running
`rustc hello_world.rs` would break, as we noticed with our check-rustc
test.

Related issue: https://github.com/rust-lang/rust/issues/119571

--- a/compiler/rustc_codegen_ssa/src/back/rpath.rs
+++ b/compiler/rustc_codegen_ssa/src/back/rpath.rs
@@ -1,7 +1,8 @@
 use pathdiff::diff_paths;
 use rustc_data_structures::fx::FxHashSet;
-use rustc_fs_util::try_canonicalize;
+use std::env;
 use std::ffi::OsString;
+use std::fs;
 use std::path::{Path, PathBuf};
 
 pub struct RPathConfig<'a> {
@@ -81,11 +82,12 @@ fn get_rpath_relative_to_output(config:
     // Mac doesn't appear to support $ORIGIN
     let prefix = if config.is_like_osx { "@loader_path" } else { "$ORIGIN" };
 
-    // Strip filenames
-    let lib = lib.parent().unwrap();
-    let output = config.out_filename.parent().unwrap();
-    let lib = try_canonicalize(lib).unwrap();
-    let output = try_canonicalize(output).unwrap();
+    let cwd = env::current_dir().unwrap();
+    let mut lib = fs::canonicalize(&cwd.join(lib)).unwrap_or_else(|_| cwd.join(lib));
+    lib.pop(); // strip filename
+    let mut output = cwd.join(&config.out_filename);
+    output.pop(); // strip filename
+    let output = fs::canonicalize(&output).unwrap_or(output);
     let relative = path_relative_from(&lib, &output)
         .unwrap_or_else(|| panic!("couldn't create relative path from {output:?} to {lib:?}"));
 
