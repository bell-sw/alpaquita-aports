From 25ff7fcdb317a1cbcf8907451d9a1684e58cfa44 Mon Sep 17 00:00:00 2001
From: Nick Clifton <nickc@redhat.com>
Date: Tue, 5 Jul 2022 14:24:18 +0100
Subject: [PATCH] Update meson/ninja support.

---
 annobin-global.h            |   1 -
 annobin-global.h.in         |  94 ++++++++++++++++++++++++++
 annocheck/libannocheck.h.in | 128 ++++++++++++++++++++++++++++++++++++
 annocheck/meson.build       |  10 ++-
 clang-plugin/meson.build    |   5 +-
 gcc-plugin/meson.build      |   2 +-
 llvm-plugin/meson.build     |   7 +-
 meson.build                 |  13 +++-
 meson.build~                |  56 ++++++++++++++++
 meson_options.txt           |   2 +-
 tests/clang-test            |  40 +++++++++++
 tests/debuginfod-test       |   6 +-
 tests/hello-llvm-clang.c    |  11 ++++
 tests/llvm-test             |  56 ++++++++++++++++
 tests/meson.build           |  25 ++++++-
 15 files changed, 436 insertions(+), 20 deletions(-)
 create mode 100644 annobin-global.h.in
 create mode 100644 annocheck/libannocheck.h.in
 create mode 100644 meson.build~
 create mode 100755 tests/clang-test
 create mode 100644 tests/hello-llvm-clang.c
 create mode 100755 tests/llvm-test

diff --git a/annobin-global.h b/annobin-global.h
index 62f3573..57f7c2e 100644
--- a/annobin-global.h
+++ b/annobin-global.h
@@ -92,4 +92,3 @@ extern "C" {
 #ifdef __cplusplus
 }
 #endif
-
diff --git a/annobin-global.h.in b/annobin-global.h.in
new file mode 100644
index 0000000..153ce94
--- /dev/null
+++ b/annobin-global.h.in
@@ -0,0 +1,94 @@
+/* annobin - Header file for the annobin package.
+   Copyright (c) 2019 - 2022 Red Hat.
+   Created by Nick Clifton.
+
+  This is free software; you can redistribute it and/or modify it
+  under the terms of the GNU General Public License as published
+  by the Free Software Foundation; either version 3, or (at your
+  option) any later version.
+
+  It is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.  */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* The version of the package.
+
+   NB/ This number is expected to be in the form "NNnn" where
+   "NN" is major version number and "nn" is the minor version number.
+
+   NB/ Keep this value in sync with libannochck_version defined in
+   annocheck/libannocheck.h.  */
+#define ANNOBIN_VERSION @ANNOBIN_VERSION@
+
+/* The version of the annotation specification supported.  */
+#define SPEC_VERSION  3
+
+#if 0 /* This would be the correct thing to do if elf/common.h did not conflict with elf.h.  */
+#include "elf/common.h"
+#else
+#define NT_GNU_PROPERTY_TYPE_0  5		/* Note type for notes generated by gcc.  */
+
+#define GNU_PROPERTY_AARCH64_FEATURE_1_AND	0xc0000000
+#define GNU_PROPERTY_AARCH64_FEATURE_1_BTI	(1U << 0)
+#define GNU_PROPERTY_AARCH64_FEATURE_1_PAC	(1U << 1)
+#define DT_AARCH64_BTI_PLT	                (DT_LOPROC + 1)
+#define DT_AARCH64_PAC_PLT	                (DT_LOPROC + 3)
+  
+#define NT_GNU_BUILD_ATTRIBUTE_OPEN	0x100
+#define NT_GNU_BUILD_ATTRIBUTE_FUNC	0x101
+/* Short-hand versions of the above defines.  */
+#define OPEN NT_GNU_BUILD_ATTRIBUTE_OPEN
+#define FUNC NT_GNU_BUILD_ATTRIBUTE_FUNC
+
+#define GNU_BUILD_ATTRIBUTE_TYPE_NUMERIC	'*'
+#define GNU_BUILD_ATTRIBUTE_TYPE_STRING		'$'
+#define GNU_BUILD_ATTRIBUTE_TYPE_BOOL_TRUE	'+'
+#define GNU_BUILD_ATTRIBUTE_TYPE_BOOL_FALSE	'!'
+
+#define NUMERIC GNU_BUILD_ATTRIBUTE_TYPE_NUMERIC
+#define STRING  GNU_BUILD_ATTRIBUTE_TYPE_STRING
+#define BOOL_T  GNU_BUILD_ATTRIBUTE_TYPE_BOOL_TRUE
+#define BOOL_F  GNU_BUILD_ATTRIBUTE_TYPE_BOOL_FALSE
+
+#define GNU_BUILD_ATTRIBUTE_VERSION	1
+#define GNU_BUILD_ATTRIBUTE_STACK_PROT	2
+#define GNU_BUILD_ATTRIBUTE_RELRO	3
+#define GNU_BUILD_ATTRIBUTE_STACK_SIZE	4
+#define GNU_BUILD_ATTRIBUTE_TOOL	5
+#define GNU_BUILD_ATTRIBUTE_ABI		6
+#define GNU_BUILD_ATTRIBUTE_PIC		7
+#define GNU_BUILD_ATTRIBUTE_SHORT_ENUM	8
+
+#define NOTE_GNU_PROPERTY_SECTION_NAME	".note.gnu.property"
+#define GNU_BUILD_ATTRS_SECTION_NAME	".gnu.build.attributes"
+
+/* Characters used in the GNU_BUILD_ATTRIBUTE_VERSION note to identify the code producer.  */
+#define ANNOBIN_TOOL_ID_CLANG       'L'
+#define ANNOBIN_TOOL_ID_LLVM        'V'
+#define ANNOBIN_TOOL_ID_ASSEMBLER   'a'
+#define ANNOBIN_TOOL_ID_LINKER      'l'
+#define ANNOBIN_TOOL_ID_GCC         'p'
+#define ANNOBIN_TOOL_ID_GCC_COLD    'c'
+#define ANNOBIN_TOOL_ID_GCC_HOT     'h'
+#define ANNOBIN_TOOL_ID_GCC_STARTUP 's'
+#define ANNOBIN_TOOL_ID_GCC_EXIT    'e'
+#define ANNOBIN_TOOL_ID_GCC_LTO     'g'
+
+/* Values used in GNU .note.gnu.property notes (NT_GNU_PROPERTY_TYPE_0).  */
+#define GNU_PROPERTY_STACK_SIZE			1
+#define GNU_PROPERTY_NO_COPY_ON_PROTECTED	2
+#endif /* Copy of elf/common.h  */
+
+/* Utlity macros to make the code cleaner.  */
+#define streq(a,b)	  (strcmp ((a), (b)) == 0)
+#define strneq(a,b,n)	  (strncmp ((a), (b), (n)) == 0)
+#define const_strneq(a,b) (strncmp ((a), (b), sizeof (b) - 1) == 0)
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/annocheck/libannocheck.h.in b/annocheck/libannocheck.h.in
new file mode 100644
index 0000000..0a2736a
--- /dev/null
+++ b/annocheck/libannocheck.h.in
@@ -0,0 +1,128 @@
+/* libannocheck.h - Header file for the libannocheck library.
+   Copyright (c) 2021-2022 Red Hat.
+   Created by Nick Clifton.
+
+  This is free software; you can redistribute it and/or modify it
+  under the terms of the GNU General Public License as published
+  by the Free Software Foundation; either version 3, or (at your
+  option) any later version.
+
+  It is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.  */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* NB/ Keep this value in sync with ANNOBIN_VERSION defined in
+   annobin-global.h.  */
+const unsigned int libannocheck_version = @ANNOBIN_VERSION@;
+
+typedef enum libannocheck_error
+{
+  libannocheck_error_none = 0,
+  libannocheck_error_bad_arguments,
+  libannocheck_error_bad_handle,
+  libannocheck_error_bad_version,
+  libannocheck_error_debug_file_not_found,
+  libannocheck_error_file_corrupt,
+  libannocheck_error_file_not_ELF,
+  libannocheck_error_file_not_found,
+  libannocheck_error_out_of_memory,
+  libannocheck_error_not_supported,
+  libannocheck_error_profile_not_known,
+  libannocheck_error_test_not_found,
+  
+  libannocheck_error_MAX
+} libannocheck_error;
+
+typedef enum libannocheck_test_state
+{
+  libannocheck_test_state_not_run = 0,
+  libannocheck_test_state_passed,
+  libannocheck_test_state_failed,
+  libannocheck_test_state_maybe,
+  libannocheck_test_state_skipped,
+
+  libannocheck_test_state_MAX  
+} libannocheck_test_state;
+    
+typedef struct libannocheck_test
+{
+  const char *             name;
+  const char *             description;
+  const char *             doc_url;
+  const char *             result_reason;
+  const char *             result_source;
+  libannocheck_test_state  state;
+  bool                     enabled;
+} libannocheck_test;
+
+/* Initialise the libannocheck library.
+   Returns a token used to identify the instantiation in future calls.
+   VERSION is the expected version of the libannocheck library.  This should normally be 'libannocheck_version'.
+    If the actual version of the library cannot support VERSION then libannocheck_error_bad_version is returned.
+   FILEPATH is a path the binary to be tested.  It can be absolute or relative.
+   DEBUGPATH is a path the debug info file associated with FILEPATH.  It can be NULL. 
+   Returns an enum libannocheck_error cast to a struct libannocheck_internals * if something goes wrong.  */
+extern struct libannocheck_internals * libannocheck_init (unsigned int VERSION, const char * FILEPATH, const char * DEBUGPATH);
+
+/* Terminates a library session.  Closes any open files.
+   After this any library call using HANDLE should fail.
+   Returns libannocheck_error_none upon successful closure, otherwise returns an error code.  */
+extern libannocheck_error  libannocheck_finish (struct libannocheck_internals * HANDLE);
+
+/* Returns a (read only) string describing an libannocheck error.
+   Returns NULL if the error code is not recognised.
+   Handle can be NULL if one is not available.
+   A more detailed error message may be returned if HANDLE is provided.  */
+extern const char *        libannocheck_get_error_message (struct libannocheck_internals * HANDLE, enum libannocheck_error ERRNUM);
+
+/* Returns the actual version number of the libannocheck_library.
+   This should be >= libannocheck_version as defined in this file.  */
+extern unsigned int        libannocheck_get_version (void);
+
+/* Returns a (read/write) array of tests known to libannocheck in TESTS_RETURN.
+   Returns the number of elements in the array in NUM_TESTS_RETURN.
+   Returns libannocheck_error_none if the retrieval succeeded, or an error result otherwise.
+   The returned array should not be freed.
+   The array is used by libannocheck internally, so if fields are changed
+    this will affect the library's behaviour.  In particular tests can be
+    enabled and disabled without needing to call libannocheck_enable_test()
+    or libannocheck_disable_test().
+   The test_result_reason and test_result_source fields will initially be NULL.
+   They may have their values changed as a result of a call to libannocheck_run_tests().  */
+extern libannocheck_error  libannocheck_get_known_tests (struct libannocheck_internals * HANDLE, libannocheck_test ** TESTS_RETURN, unsigned int * NUM_TESTS_RETURN);
+
+/* The following five function calls affect the data held in the array returned
+   by libannocheck_get_known_tests().  */
+extern libannocheck_error  libannocheck_enable_all_tests (struct libannocheck_internals * HANDLE);
+extern libannocheck_error  libannocheck_disable_all_tests (struct libannocheck_internals * HANDLE);
+/* These functions allow the enabling and disabling of tests by name.
+   This allows tests to be controlled without having to retrieve the entire test array.  */
+extern libannocheck_error  libannocheck_enable_test (struct libannocheck_internals * HANDLE, const char * TEST_NAME);
+extern libannocheck_error  libannocheck_disable_test (struct libannocheck_internals * HANDLE, const char * TEST_NAME);
+/* Enables and disables certain tests known to be relevant to a specific profile.
+   Returns libannocheck_error_profile_not_known if the profile is not recognised.  */
+extern libannocheck_error  libannocheck_enable_profile (struct libannocheck_internals * HANDLE, const char * PROFILE_NAME);
+
+/* Retrieves a (read only) array of profile strings known to libannocheck.
+   The array is returned in PROFILES_RETURN.
+   The number of entries in the array is returned in NUM_PROFILES.
+   Returns libannocheck_error_none upons success, or an error code otherwise.  */
+extern libannocheck_error  libannocheck_get_known_profiles (struct libannocheck_internals * HANDLE, const char *** PROFILES_RETURN, unsigned int * NUM_PROFILES_RETURN);
+
+/* Runs all enabled tests.
+   Returns the number of failed tests in NUM_FAIL_RETURN (if this parameter is not NULL).
+   Returns the number of "maybe" results in NUM_MAYB_RETURN (if this parameter is not NULL).
+   Retuns libannocheck_error_none if everything went OK.
+   Updates the STATE, TEST_RESULT_REASON and TEST_RESULT_SOURCES fields in the entries in
+   the array returned by libannocheck_get_known_tests() for any enabled test.
+   Can be called multiple times.  */
+extern libannocheck_error  libannocheck_run_tests (struct libannocheck_internals * HANDLE, unsigned int * NUM_FAIL_RETURN, unsigned int * NUM_MAYB_RETURN);
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/annocheck/meson.build b/annocheck/meson.build
index 61a964a..a69d190 100644
--- a/annocheck/meson.build
+++ b/annocheck/meson.build
@@ -1,6 +1,14 @@
 # copyright : Copyright (c) 2017-2021 Red Hat
 # license   : GNU GPL v3; see accompanying LICENSE file
 
+configure_file(
+  input: 'libannocheck.h.in',
+  output: 'libannocheck.h',
+  configuration: version_cdata,
+  install: true,
+  install_dir: '/' # FIXME 
+)
+
 elf_lib = cxx.find_library('elf')
 iberty_lib = cxx.find_library('iberty')
 dw_lib = cxx.find_library('dw')
@@ -32,7 +40,7 @@ annocheck = executable(
   ],
 )
 
-libannocheck = static_library(
+libannocheck = shared_library(
   'annocheck',
   files([
     'annocheck.c',
diff --git a/clang-plugin/meson.build b/clang-plugin/meson.build
index 260e8ea..3c7eaa9 100644
--- a/clang-plugin/meson.build
+++ b/clang-plugin/meson.build
@@ -14,7 +14,7 @@ clang_plugin = custom_target(
   command: [
     clang,
     '@INPUT@',
-    '-I' + join_paths(meson.current_source_dir(), '..'),
+    '-I' + join_paths(meson.current_build_dir(), '..'),
     '-lLLVM',
     '-lclang-cpp', # TODO: Is this correct?
     '-o', '@OUTPUT@',
@@ -36,6 +36,3 @@ clang_plugin = custom_target(
     '-D__STDC_LIMIT_MACROS',
   ]
 )
-# TODO: The tests here are missing, but I think they should just go in a
-#       shell script in tests/, like the rest.
-#
diff --git a/gcc-plugin/meson.build b/gcc-plugin/meson.build
index 4b0de0a..225fc0f 100644
--- a/gcc-plugin/meson.build
+++ b/gcc-plugin/meson.build
@@ -58,7 +58,7 @@ gcc_plugin = custom_target(
     '@INPUT@',
     '-g', '-fPIC', '-DPIC', '-shared', '-nostdlib',
     '-DHAVE_CONFIG_H',
-    '-I' + join_paths(meson.current_source_dir(), '..'),
+    '-I' + join_paths(meson.current_build_dir(), '..'),
     '-I' + join_paths(plugin_dev_path, 'include'),
     '-o', '@OUTPUT@',
   ]
diff --git a/llvm-plugin/meson.build b/llvm-plugin/meson.build
index 1594f35..0ada1a6 100644
--- a/llvm-plugin/meson.build
+++ b/llvm-plugin/meson.build
@@ -4,7 +4,7 @@ clang = find_program('clang++')
 search_dirs = run_command(clang , '--print-search-dirs', check: true).stdout().strip()
 install_dir = search_dirs.split('\n')[1].split(':')[1].replace('=', '').strip()
 
-clang_plugin = custom_target(
+llvm_plugin = custom_target(
   'annobin-for-llvm.so',
   input: 'annobin.cpp',
   output: 'annobin-for-llvm.so',
@@ -13,7 +13,7 @@ clang_plugin = custom_target(
   command: [
     clang,
     '@INPUT@',
-    '-I' + join_paths(meson.current_source_dir(), '..'),
+    '-I' + join_paths(meson.current_build_dir(), '..'),
     '-lLLVM',
     '-o', '@OUTPUT@',
 
@@ -34,6 +34,3 @@ clang_plugin = custom_target(
     '-D__STDC_LIMIT_MACROS',
   ]
 )
-# TODO: The tests here are missing, but I think they should just go in a
-#       shell script in tests/, like the rest.
-#
diff --git a/meson.build b/meson.build
index 84df6c7..99e68fb 100644
--- a/meson.build
+++ b/meson.build
@@ -1,7 +1,7 @@
 project(
   'annobin',
   ['c', 'cpp'],
-  version: '9.0',
+  version: '10.78',
   meson_version: '>=0.59'
 )
 
@@ -15,6 +15,17 @@ have_debuginfod = debuginfod_lib.found()
 toplevel_incdir = include_directories('.')
 gcc_plugin_incdir = include_directories('gcc-plugin/')
 
+# Coniguration data for project version information
+major_version = meson.project_version().split('.')[0].to_int()
+minor_version = meson.project_version().split('.')[1].to_int()
+version_cdata = configuration_data()
+version_cdata.set('ANNOBIN_VERSION', major_version * 100 + minor_version)
+configure_file(
+  input: 'annobin-global.h.in',
+  output: 'annobin-global.h',
+  configuration: version_cdata,
+)
+
 
 
 # Subdirs
diff --git a/meson.build~ b/meson.build~
new file mode 100644
index 0000000..a40fb4f
--- /dev/null
+++ b/meson.build~
@@ -0,0 +1,56 @@
+project(
+  'annobin',
+  ['c', 'cpp'],
+  version: '10.77',
+  meson_version: '>=0.59'
+)
+
+cxx = meson.get_compiler('cpp')
+
+# Feature detection
+debuginfod_lib = cxx.find_library('debuginfod', required: get_option('debuginfod'))
+have_debuginfod = debuginfod_lib.found()
+
+# directory variables
+toplevel_incdir = include_directories('.')
+gcc_plugin_incdir = include_directories('gcc-plugin/')
+
+# Coniguration data for project version information
+major_version = meson.project_version().split('.')[0].to_int()
+minor_version = meson.project_version().split('.')[1].to_int()
+version_cdata = configuration_data()
+version_cdata.set('ANNOBIN_VERSION', major_version * 100 + minor_version)
+configure_file(
+  input: 'annobin-global.h.in',
+  output: 'annobin-global.h',
+  configuration: version_cdata,
+)
+
+
+
+# Subdirs
+subdir('gcc-plugin')
+
+if get_option('clang-plugin')
+  subdir('clang-plugin')
+endif
+if get_option('llvm-plugin')
+  subdir('llvm-plugin')
+endif
+if get_option('annocheck')
+  subdir('annocheck')
+endif
+subdir('tests')
+if get_option('docs')
+  subdir('doc')
+endif
+
+
+# Summary
+summary('C++ Compiler', meson.get_compiler('cpp').get_id(), section: 'Toolchain')
+summary('C++ Linker', meson.get_compiler('cpp').get_linker_id(), section: 'Toolchain')
+
+summary('Build LLVM plugin', get_option('llvm-plugin'))
+summary('Build Clang plugin', get_option('clang-plugin'))
+summary('Build annocheck', get_option('annocheck'))
+summary('debuginfod support', have_debuginfod)
diff --git a/meson_options.txt b/meson_options.txt
index 395d26c..2d17be7 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -25,6 +25,6 @@ option('docs',
 
 option('debuginfod',
   type: 'feature',
-  value: 'auto',
+  value: 'enabled',
   description: 'Whether to enabled debuginfod support'
 )
diff --git a/tests/clang-test b/tests/clang-test
new file mode 100755
index 0000000..d5c55d9
--- /dev/null
+++ b/tests/clang-test
@@ -0,0 +1,40 @@
+#!/bin/bash
+
+# Copyright (c) 2017-2021 Red Hat.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published
+# by the Free Software Foundation; either version 3, or (at your
+# option) any later version.
+#
+# It is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+TEST_NAME=clang
+. $srcdir/common.sh
+
+CLANG=clang
+PLUGIN=${CLANG_PLUGIN:-$TOP_BUILDDIR/clang-plugin/annobin-for-clang.so}
+
+start_test
+set -e
+
+PLUGIN_TEST_OPTIONS="\
+   -D_FORTIFY_SOURCE=2 \
+   -O2 \
+   -g -grecord-gcc-switches \
+   -fPIE \
+    -Wall \
+   -fsanitize=safe-stack \
+   -fstack-protector-strong \
+   -fsanitize=cfi-cast-strict"
+
+$CLANG -fplugin=$PLUGIN $PLUGIN_TEST_OPTIONS -c $srcdir/hello-llvm-clang.c
+$READELF --wide --notes hello-llvm-clang.o > clang-plugin-test.out
+grep --silent -e "annobin built by clang version" clang-plugin-test.out
+grep --silent -e "running on clang version" clang-plugin-test.out
+grep --silent -e "sanitize_cfi" clang-plugin-test.out
+grep --silent -e "SpecLoadHarden" clang-plugin-test.out
+echo "PASS Clang plugin test"
diff --git a/tests/debuginfod-test b/tests/debuginfod-test
index 0eb5b86..71204c7 100755
--- a/tests/debuginfod-test
+++ b/tests/debuginfod-test
@@ -130,12 +130,12 @@ wait_ready $PORT 'thread_work_pending{role="scan"}' 0
 wait_ready $PORT 'thread_busy{role="scan"}' 0
 
 export DEBUGINFOD_URLS=http://127.0.0.1:$PORT
-$ANNOCHECK -v -v --ignore-gaps --skip-entry debuginfod-test.exe > debuginfod-test.out
+$ANNOCHECK -v -v --ignore-gaps --skip-entry --skip-property-note --skip-cf-protection debuginfod-test.exe > debuginfod-test.out
 
 if [ $PID != 0 ]; then kill -INT $PID; wait $PID; fi
 
-# FAIL if separate debuginfo is not found in client cache.
-grep --silent -e "Opened separate debug file: .*debuginfod_cache" debuginfod-test.out
+# FAIL if separate debuginfo is not found in client cache (and debuginfod support was enabled).
+grep --silent -e "Opened separate debug file: .*debuginfod_cache" -e "support for debuginfod not built into annocheck" debuginfod-test.out
 if [ $? != 0 ]; then
   echo "$FAIL separate debuginfo not found:"
   cat debuginfod-test.out
diff --git a/tests/hello-llvm-clang.c b/tests/hello-llvm-clang.c
new file mode 100644
index 0000000..17a5ae9
--- /dev/null
+++ b/tests/hello-llvm-clang.c
@@ -0,0 +1,11 @@
+#include <stdio.h>
+#include <string.h>
+
+char buf[128];
+
+int 
+main (int argc, char ** argv)
+{
+  strcpy (buf, argv[0]);
+  return printf ("%s", buf);
+}
diff --git a/tests/llvm-test b/tests/llvm-test
new file mode 100755
index 0000000..26f3b04
--- /dev/null
+++ b/tests/llvm-test
@@ -0,0 +1,56 @@
+#!/bin/bash
+
+# Copyright (c) 2017-2021 Red Hat.
+#
+# This is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published
+# by the Free Software Foundation; either version 3, or (at your
+# option) any later version.
+#
+# It is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+TEST_NAME=llvm
+. $srcdir/common.sh
+
+PLUGIN_OPTS="-fplugin-arg-annobin-no-attach"
+CLANG=clang
+PLUGIN=${LLVM_PLUGIN:-$TOP_BUILDDIR/llvm-plugin/annobin-for-llvm.so}
+
+start_test
+
+set -e
+
+PLUGIN_TEST_OPTIONS="\
+   -D_FORTIFY_SOURCE=2 \
+   -D_GLIBCXX_ASSERTIONS \
+   -O2 \
+   -g -grecord-gcc-switches \
+   -fPIE \
+   -Wall \
+   -fstack-protector-strong \
+   -fsanitize=safe-stack"
+
+
+run_test() {
+    load_plugin_arg=$1
+
+    $CLANG $load_plugin_arg $PLUGIN_TEST_OPTIONS -c $srcdir/hello-llvm-clang.c
+    $READELF --wide --notes hello-llvm-clang.o > llvm-plugin-test.out
+    grep --silent -e "annobin built by llvm version" llvm-plugin-test.out
+    grep --silent -e "running on LLVM version" llvm-plugin-test.out
+    grep --silent -e "stack_clash" llvm-plugin-test.out
+    echo "Pass LLVM plugin test [$load_plugin_arg]"
+}
+
+if [ `echo | clang -dM -E - | grep __clang_major__ | cut -f 3 -d ' '` -gt 12 ] ;
+then
+    run_test "-flegacy-pass-manager -fplugin=$PLUGIN"
+    run_test "-fpass-plugin=$PLUGIN"
+else
+    run_test "-Xclang -load -Xclang $PLUGIN"
+fi
+
+end_test
diff --git a/tests/meson.build b/tests/meson.build
index d03a8e1..49ee46c 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -19,17 +19,22 @@ tests = [
 ]
 
 env = {
-  'srcdir'   : meson.current_source_dir(),
-  'PLUGIN' : gcc_plugin.full_path()
+  'srcdir' : meson.current_source_dir(),
+  'PLUGIN' : gcc_plugin.full_path(),
+  'TOP_BUILDDIR' : join_paths(meson.current_build_dir(), '..'),
 }
 
 if get_option('annocheck')
-  env += {'ANNOCHECK' : annocheck.full_path()}
+  env += {
+    'ANNOCHECK' : annocheck.full_path(),
+    'LIBANNOCHECKDIR' : '../annocheck/',
+  }
 
   tests += [
     'atexit',
     'fortify',
     'assembler-gap',
+    'libannocheck',
     'glibc-notes',
     'lto',
     'objcopy',
@@ -37,6 +42,20 @@ if get_option('annocheck')
     'stat',
     'gaps',
   ]
+
+  if have_debuginfod
+    tests += 'debuginfod'
+  endif
+endif
+
+if get_option('llvm-plugin')
+  env += {'LLVM_PLUGIN' : llvm_plugin.full_path()}
+  tests += ['llvm']
+endif
+
+if get_option('clang-plugin')
+  env += {'CLANG_PLUGIN' : clang_plugin.full_path()}
+  tests += ['clang']
 endif
 
 foreach testname : tests
-- 
2.25.1

