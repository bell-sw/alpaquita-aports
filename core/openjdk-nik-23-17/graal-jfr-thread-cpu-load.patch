diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrEvent.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrEvent.java
index 87f055bdd61..e68be02641d 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrEvent.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrEvent.java
@@ -36,6 +36,7 @@ import com.oracle.svm.core.Uninterruptible;
 public final class JfrEvent {
     public static final JfrEvent ThreadStart = create("jdk.ThreadStart");
     public static final JfrEvent ThreadEnd = create("jdk.ThreadEnd");
+    public static final JfrEvent ThreadCPULoad = create("jdk.ThreadCPULoad");
     public static final JfrEvent DataLoss = create("jdk.DataLoss");
     public static final JfrEvent ClassLoadingStatistics = create("jdk.ClassLoadingStatistics");
     public static final JfrEvent InitialEnvironmentVariable = create("jdk.InitialEnvironmentVariable");
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrNativeEventWriter.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrNativeEventWriter.java
index 9ba620030d5..a4149425088 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrNativeEventWriter.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrNativeEventWriter.java
@@ -190,6 +190,17 @@ public final class JfrNativeEventWriter {
         }
     }
 
+    @Uninterruptible(reason = "Accesses a native JFR buffer.", callerMustBe = true)
+    public static void putFloat(JfrNativeEventWriterData data, float v) {
+        if (ensureSize(data, Float.BYTES)) {
+            int bits = Float.floatToIntBits(v);
+            putUncheckedByte(data, (byte) (bits >>> 24));
+            putUncheckedByte(data, (byte) (bits >>> 16));
+            putUncheckedByte(data, (byte) (bits >>> 8));
+            putUncheckedByte(data, (byte) (bits));
+        }
+    }
+
     @Uninterruptible(reason = "Accesses a native JFR buffer.", callerMustBe = true)
     public static void putString(JfrNativeEventWriterData data, String string) {
         putString(data, string, null);
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadLocal.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadLocal.java
index b9563705bce..6467bcefa46 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadLocal.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadLocal.java
@@ -38,6 +38,7 @@ import com.oracle.svm.core.Uninterruptible;
 import com.oracle.svm.core.UnmanagedMemoryUtil;
 import com.oracle.svm.core.jfr.events.ThreadEndEvent;
 import com.oracle.svm.core.jfr.events.ThreadStartEvent;
+import com.oracle.svm.core.jfr.events.ThreadCPULoadEvent;
 import com.oracle.svm.core.sampler.SamplerBuffer;
 import com.oracle.svm.core.sampler.SamplerSampleWriterData;
 import com.oracle.svm.core.thread.JavaThreads;
@@ -127,6 +128,7 @@ public class JfrThreadLocal implements ThreadListener {
     public void beforeThreadStart(IsolateThread isolateThread, Thread javaThread) {
         if (SubstrateJVM.get().isRecording()) {
             SubstrateJVM.getThreadRepo().registerThread(javaThread);
+            ThreadCPULoadEvent.initCurrentTime(isolateThread);
             ThreadStartEvent.emit(javaThread);
         }
     }
@@ -136,6 +138,7 @@ public class JfrThreadLocal implements ThreadListener {
     public void afterThreadExit(IsolateThread isolateThread, Thread javaThread) {
         if (SubstrateJVM.get().isRecording()) {
             ThreadEndEvent.emit(javaThread);
+            ThreadCPULoadEvent.emit(isolateThread);
         }
 
         /*
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadRepository.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadRepository.java
index 47e103ebedf..428e3dd2f7c 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadRepository.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/JfrThreadRepository.java
@@ -33,6 +33,7 @@ import org.graalvm.word.WordFactory;
 
 import com.oracle.svm.core.Uninterruptible;
 import com.oracle.svm.core.jdk.UninterruptibleUtils;
+import com.oracle.svm.core.jfr.events.ThreadCPULoadEvent;
 import com.oracle.svm.core.jfr.traceid.JfrTraceIdEpoch;
 import com.oracle.svm.core.jfr.utils.JfrVisited;
 import com.oracle.svm.core.jfr.utils.JfrVisitedTable;
@@ -87,6 +88,7 @@ public final class JfrThreadRepository implements JfrRepository {
             if (thread != null) {
                 registerThread(thread);
             }
+            ThreadCPULoadEvent.initCurrentTime(isolateThread);
         }
     }
 
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/EndChunkNativePeriodicEvents.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/EndChunkNativePeriodicEvents.java
index edadb7bfb83..0a1c3b60ac8 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/EndChunkNativePeriodicEvents.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/EndChunkNativePeriodicEvents.java
@@ -60,6 +60,7 @@ public class EndChunkNativePeriodicEvents extends Event {
         emitOSInformation(formatOSInformation());
         emitInitialEnvironmentVariables(getEnvironmentVariables());
         emitInitialSystemProperties(getSystemProperties());
+        emitThreadCPULoad();
     }
 
     @Uninterruptible(reason = "Accesses a JFR buffer.")
@@ -176,6 +177,10 @@ public class EndChunkNativePeriodicEvents extends Event {
         return JfrNativeEventWriter.endEvent(data, isLarge);
     }
 
+    private static void emitThreadCPULoad() {
+        ThreadCPULoadEvent.emitEvents();
+    }
+
     private static StringEntry[] getEnvironmentVariables() {
         Map<String, String> env = System.getenv();
         StringEntry[] result = new StringEntry[env.size()];
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/ThreadCPULoadEvent.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/ThreadCPULoadEvent.java
new file mode 100644
index 00000000000..c98f8fd26e6
--- /dev/null
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jfr/events/ThreadCPULoadEvent.java
@@ -0,0 +1,189 @@
+/*
+ * Copyright (c) 2023, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2023, 2023, BELLSOFT. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package com.oracle.svm.core.jfr.events;
+
+import org.graalvm.nativeimage.StackValue;
+import org.graalvm.nativeimage.IsolateThread;
+
+import com.oracle.svm.core.Uninterruptible;
+import com.oracle.svm.core.jfr.JfrEvent;
+import com.oracle.svm.core.jfr.JfrNativeEventWriter;
+import com.oracle.svm.core.jfr.JfrNativeEventWriterData;
+import com.oracle.svm.core.jfr.JfrNativeEventWriterDataAccess;
+import com.oracle.svm.core.jfr.JfrTicks;
+import com.oracle.svm.core.jfr.JfrThreadLocal;
+import com.oracle.svm.core.heap.VMOperationInfos;
+
+import com.oracle.svm.core.jdk.Jvm;
+
+import com.oracle.svm.core.thread.VMThreads;
+import com.oracle.svm.core.thread.JavaVMOperation;
+import com.oracle.svm.core.thread.ThreadCpuTimeSupport;
+import com.oracle.svm.core.threadlocal.FastThreadLocalLong;
+import com.oracle.svm.core.threadlocal.FastThreadLocalFactory;
+import com.oracle.svm.core.util.TimeUtils;
+
+import com.oracle.svm.core.jdk.UninterruptibleUtils;
+
+public class ThreadCPULoadEvent {
+
+    private static final FastThreadLocalLong cpuTimeTL = FastThreadLocalFactory.createLong("ThreadCPULoadEvent.cpuTimeTL");
+    private static final FastThreadLocalLong userTimeTL = FastThreadLocalFactory.createLong("ThreadCPULoadEvent.userTimeTL");
+    private static final FastThreadLocalLong timeTL = FastThreadLocalFactory.createLong("ThreadCPULoadEvent.timeTL");
+
+    private static volatile int lastActiveProcessorCount;
+
+    public static void emitEvents() {
+        /* This is safe because the VM operation rechecks if the event should be emitted. */
+        if (shouldEmitUnsafe()) {
+            EmitThreadCPULoadEventsOperation vmOp = new EmitThreadCPULoadEventsOperation();
+            vmOp.enqueue();
+        }
+    }
+
+    @Uninterruptible(reason = "Accesses a JFR buffer.")
+    public static void emit(IsolateThread isolateThread) {
+        if (!JfrEvent.ThreadCPULoad.shouldEmit()) {
+            return;
+        }
+
+        long currCpuTime = getThreadCpuTime(isolateThread, true);
+        long prevCpuTime = cpuTimeTL.get(isolateThread);
+
+        long currTime = getCurrentTime();
+        long prevTime = timeTL.get(isolateThread);
+        timeTL.set(isolateThread, currTime);
+
+        // Threshold of 1 ms
+        if (currCpuTime - prevCpuTime < 1 * TimeUtils.nanosPerMilli) {
+            return;
+        }
+
+        long currUserTime = getThreadCpuTime(isolateThread, false);
+        long prevUserTime = userTimeTL.get(isolateThread);
+
+        long currSystemTime = currCpuTime - currUserTime;
+        long prevSystemTime = prevCpuTime - prevUserTime;
+
+        // The user and total cpu usage clocks can have different resolutions, which can
+        // make us see decreasing system time. Ensure time doesn't go backwards.
+        if (prevSystemTime > currSystemTime) {
+            currCpuTime += prevSystemTime - currSystemTime;
+            currSystemTime = prevSystemTime;
+        }
+
+        int processorsCount = getProcessorCount();
+
+        long userTime = currUserTime - prevUserTime;
+        long systemTime = currSystemTime - prevSystemTime;
+        long wallClockTime = currTime - prevTime;
+        float totalAvailableTime = wallClockTime * processorsCount;
+
+        // Avoid reporting percentages above the theoretical max
+        if (userTime + systemTime > wallClockTime) {
+            long excess = userTime + systemTime - wallClockTime;
+            currCpuTime -= excess;
+            if (userTime > excess) {
+                userTime -= excess;
+                currUserTime -= excess;
+            } else {
+                excess -= userTime;
+                currUserTime -= userTime;
+                userTime = 0;
+                systemTime -= excess;
+            }
+        }
+
+        cpuTimeTL.set(isolateThread, currCpuTime);
+        userTimeTL.set(isolateThread, currUserTime);
+
+        JfrNativeEventWriterData data = StackValue.get(JfrNativeEventWriterData.class);
+        JfrNativeEventWriterDataAccess.initializeThreadLocalNativeBuffer(data);
+
+        JfrNativeEventWriter.beginSmallEvent(data, JfrEvent.ThreadCPULoad);
+        JfrNativeEventWriter.putLong(data, JfrTicks.elapsedTicks());
+        JfrNativeEventWriter.putEventThread(data);
+        JfrNativeEventWriter.putFloat(data, userTime / totalAvailableTime);
+        JfrNativeEventWriter.putFloat(data, systemTime / totalAvailableTime);
+        JfrNativeEventWriter.endSmallEvent(data);
+    }
+
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
+    private static int getProcessorCount() {
+        /*
+         * This should but does not take the container support into account. Unfortunately, it is
+         * currently not possible to call Containers.activeProcessorCount() from uninterruptible
+         * code.
+         */
+        int curProcessorCount = Jvm.JVM_ActiveProcessorCount();
+        int prevProcessorCount = lastActiveProcessorCount;
+        lastActiveProcessorCount = curProcessorCount;
+
+        /*
+         * If the number of processors decreases, we don't know at what point during the sample
+         * interval this happened, so use the largest number to try to avoid percentages above 100%.
+         */
+        return UninterruptibleUtils.Math.max(curProcessorCount, prevProcessorCount);
+    }
+
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
+    private static long getThreadCpuTime(IsolateThread isolateThread, boolean includeSystemTime) {
+        long threadCpuTime = ThreadCpuTimeSupport.getInstance().getThreadCpuTime(isolateThread, includeSystemTime);
+        return (threadCpuTime < 0) ? 0 : threadCpuTime;
+    }
+
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
+    private static long getCurrentTime() {
+        return System.nanoTime();
+    }
+
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
+    public static void initCurrentTime(IsolateThread isolateThread) {
+        if (timeTL.get(isolateThread) <= 0) {
+            timeTL.set(isolateThread, getCurrentTime());
+        }
+    }
+
+    @Uninterruptible(reason = "Used to avoid the VM operation if it is not absolutely needed.")
+    private static boolean shouldEmitUnsafe() {
+        /* The returned value is racy. */
+        return JfrEvent.ThreadCPULoad.shouldEmit();
+    }
+
+    private static final class EmitThreadCPULoadEventsOperation extends JavaVMOperation {
+
+        EmitThreadCPULoadEventsOperation() {
+            super(VMOperationInfos.get(EmitThreadCPULoadEventsOperation.class, "Emit ThreadCPULoad events", SystemEffect.SAFEPOINT));
+        }
+
+        @Override
+        protected void operate() {
+            for (IsolateThread isolateThread = VMThreads.firstThread(); isolateThread.isNonNull(); isolateThread = VMThreads.nextThread(isolateThread)) {
+                emit(isolateThread);
+            }
+        }
+    }
+}
diff --git a/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/jfr/TestThreadCPULoadEvent.java b/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/jfr/TestThreadCPULoadEvent.java
new file mode 100644
index 00000000000..bd400b9dfde
--- /dev/null
+++ b/graal/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/jfr/TestThreadCPULoadEvent.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2023, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2023, 2023, BELLSOFT. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.oracle.svm.test.jfr;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.junit.Test;
+
+import jdk.jfr.Recording;
+import jdk.jfr.consumer.RecordedEvent;
+
+public class TestThreadCPULoadEvent extends JfrRecordingTest {
+    private static final int DURATION_MS = 1000;
+    private static final String THREAD_NAME_1 = "Thread-1";
+    private static final String THREAD_NAME_2 = "Thread-2";
+
+    @Test
+    public void test() throws Throwable {
+        String[] events = new String[]{"jdk.ThreadCPULoad"};
+        Recording recording = startRecording(events);
+
+        WeakReference<Thread> thread1 = createAndStartBusyWaitThread(THREAD_NAME_1, 0.1);
+        WeakReference<Thread> thread2 = createAndStartBusyWaitThread(THREAD_NAME_2, 1.0);
+
+        waitUntilCollected(thread1);
+        waitUntilCollected(thread2);
+
+        stopRecording(recording, TestThreadCPULoadEvent::validateEvents);
+    }
+
+    private static void validateEvents(List<RecordedEvent> events) {
+        assertEquals(2, events.size());
+        Map<String, Float> userTimes = new HashMap<>();
+        Map<String, Float> cpuTimes = new HashMap<>();
+
+        for (RecordedEvent e : events) {
+            String threadName = e.getThread().getJavaName();
+            float userTime = e.<Float> getValue("user");
+            float systemTime = e.<Float> getValue("system");
+            assertTrue("User time is outside 0..1 range", 0.0 <= userTime && userTime <= 1.0);
+            assertTrue("System time is outside 0..1 range", 0.0 <= systemTime && systemTime <= 1.0);
+
+            userTimes.put(threadName, userTime);
+            cpuTimes.put(threadName, userTime + systemTime);
+        }
+
+        assertTrue(userTimes.get(THREAD_NAME_1) < userTimes.get(THREAD_NAME_2));
+        assertTrue(cpuTimes.get(THREAD_NAME_1) < cpuTimes.get(THREAD_NAME_2));
+    }
+
+    private static WeakReference<Thread> createAndStartBusyWaitThread(String name, double busyPercent) {
+        Thread thread = new Thread(() -> {
+            assert busyPercent >= 0 && busyPercent <= 1;
+            long busyMs = (long) (DURATION_MS * busyPercent);
+            long idleMs = DURATION_MS - busyMs;
+
+            busyWait(busyMs);
+            sleep(idleMs);
+        });
+        thread.setName(name);
+        thread.start();
+        return new WeakReference<>(thread);
+    }
+
+    private static void busyWait(long delay) {
+        long end = System.currentTimeMillis() + delay;
+        while (end > System.currentTimeMillis()) {
+            /* Nothing to do. */
+        }
+    }
+
+    private static void sleep(long delay) {
+        try {
+            Thread.sleep(delay);
+        } catch (InterruptedException ignored) {
+        }
+    }
+
+    /**
+     * Waits until the thread object was garbage collected. Thread.join() is not sufficient because
+     * it may return before the ThreadCPULoad events are emitted in
+     * JfrThreadLocal.afterThreadExit().
+     */
+    private static void waitUntilCollected(WeakReference<Thread> thread) throws InterruptedException {
+        join(thread);
+
+        while (!thread.refersTo(null)) {
+            Thread.sleep(100);
+            System.gc();
+        }
+    }
+
+    private static void join(WeakReference<Thread> thread) throws InterruptedException {
+        Thread t = thread.get();
+        if (t != null) {
+            t.join();
+        }
+    }
+}
