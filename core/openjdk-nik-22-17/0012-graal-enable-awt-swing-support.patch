diff --git a/sdk/src/org.graalvm.home/src/org/graalvm/home/impl/JLIMemAllocSymbol.java b/sdk/src/org.graalvm.home/src/org/graalvm/home/impl/JLIMemAllocSymbol.java
new file mode 100644
index 00000000000..47990f25d9e
--- /dev/null
+++ b/graal/sdk/src/org.graalvm.home/src/org/graalvm/home/impl/JLIMemAllocSymbol.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2022, 2022, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The Universal Permissive License (UPL), Version 1.0
+ *
+ * Subject to the condition set forth below, permission is hereby granted to any
+ * person obtaining a copy of this software, associated documentation and/or
+ * data (collectively the "Software"), free of charge and under any and all
+ * copyright rights in the Software, and any and all patent rights owned or
+ * freely licensable by each licensor hereunder covering either (i) the
+ * unmodified Software as contributed to or provided by such licensor, or (ii)
+ * the Larger Works (as defined below), to deal in both
+ *
+ * (a) the Software, and
+ *
+ * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
+ * one is included with the Software each a "Larger Work" to which the Software
+ * is contributed by such licensors),
+ *
+ * without restriction, including without limitation the rights to copy, create
+ * derivative works of, display, perform, and distribute the Software and make,
+ * use, sell, offer for sale, import, export, have made, and have sold the
+ * Software and the Larger Work(s), and to sublicense the foregoing rights on
+ * either these or other terms.
+ *
+ * This license is subject to the following condition:
+ *
+ * The above copyright notice and either this complete permission notice or at a
+ * minimum a reference to the UPL must be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+package org.graalvm.home.impl;
+
+import org.graalvm.nativeimage.IsolateThread;
+import org.graalvm.nativeimage.c.function.CEntryPoint;
+import org.graalvm.nativeimage.c.function.CEntryPointLiteral;
+import org.graalvm.nativeimage.c.function.CFunctionPointer;
+
+final class JLIMemAllocSymbol {
+
+    static final CEntryPointLiteral<CFunctionPointer> SYMBOL = CEntryPointLiteral.create(VmLocatorSymbol.class, "JLI_MemAlloc", IsolateThread.class);
+
+    private JLIMemAllocSymbol() {
+        throw new IllegalStateException("No instance allowed");
+    }
+
+    @CEntryPoint(name = "JLI_MemAlloc", publishAs = CEntryPoint.Publish.SymbolOnly)
+    @SuppressWarnings("unused")
+    private static void JLI_MemAlloc(IsolateThread thread) {
+    }
+}
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAWTSupport.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAWTSupport.java
index 358329c2e2e..c1ec1d805ae 100644
--- a/graal/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAWTSupport.java
+++ b/graal/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAWTSupport.java
@@ -31,11 +31,28 @@ import com.oracle.svm.core.feature.InternalFeature;
 import com.oracle.svm.core.feature.AutomaticallyRegisteredFeature;
 import com.oracle.svm.hosted.FeatureImpl.BeforeImageWriteAccessImpl;
 
-@Platforms(Platform.WINDOWS.class)
+import org.graalvm.nativeimage.ImageSingletons;
+import org.graalvm.nativeimage.impl.RuntimeClassInitializationSupport;
+
+import com.oracle.svm.core.jdk.JNIRegistrationUtil;
+
+@Platforms({Platform.WINDOWS.class, Platform.DARWIN.class})
 @AutomaticallyRegisteredFeature
-public class JNIRegistrationAWTSupport implements InternalFeature {
+public class JNIRegistrationAWTSupport extends JNIRegistrationUtil  implements InternalFeature {
+
+    @Override
+    public void afterRegistration(AfterRegistrationAccess access) {
+        RuntimeClassInitializationSupport rci = ImageSingletons.lookup(RuntimeClassInitializationSupport.class);
+        rci.initializeAtBuildTime("sun.awt.FontPropertiesLoader", "AWT fontconfig property file is initialized at build time");
+    }
+
     @Override
     public void afterAnalysis(AfterAnalysisAccess access) {
+
+        if (!isWindows()) {
+            return;
+        }
+
         JNIRegistrationSupport jniRegistrationSupport = JNIRegistrationSupport.singleton();
         if (jniRegistrationSupport.isRegisteredLibrary("awt")) {
             jniRegistrationSupport.addJvmShimExports(
@@ -82,11 +99,15 @@ public class JNIRegistrationAWTSupport implements InternalFeature {
     public void beforeImageWrite(BeforeImageWriteAccess access) {
         if (JNIRegistrationSupport.singleton().isRegisteredLibrary("awt")) {
             ((BeforeImageWriteAccessImpl) access).registerLinkerInvocationTransformer(linkerInvocation -> {
-                /*
-                 * Add a Windows library that is pulled in as a side effect of exporting the
-                 * `getEncodingFromLangID` and `getJavaIDFromLangID` symbols.
-                 */
-                linkerInvocation.addNativeLinkerOption("shell32.lib");
+                if (isWindows()) {
+                    /*
+                     * Add a Windows library that is pulled in as a side effect of exporting the
+                     * `getEncodingFromLangID` and `getJavaIDFromLangID` symbols.
+                     */
+                    linkerInvocation.addNativeLinkerOption("shell32.lib");
+                } else if (isDarwin()) {
+                    linkerInvocation.addNativeLinkerOption("-F/System/Library/Frameworks/JavaVM.framework/Frameworks");
+                }
                 return linkerInvocation;
             });
         }
