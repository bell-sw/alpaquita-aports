# Description: reference implementation of a lossless data compression
# algorithm developed by Yann Collet at Facebook.

pkgname=zstd
pkgver=1.5.5
pkgrel=7
pkgdesc="Zstandard Library"
url="https://www.zstd.net/"
arch="all"
license="BSD-3-Clause OR GPL-2.0-or-later"
depends_dev="$pkgname=$pkgver-r$pkgrel"
makedepends="grep meson fmv"
checkdepends="file"
subpackages="
	$pkgname-dbg
	$pkgname-libs
	$pkgname-static
	$pkgname-dev
	$pkgname-doc
	$pkgname-frugal
	"
source="zstd-$pkgver.tar.gz::https://github.com/facebook/zstd/archive/v$pkgver.tar.gz"
# we run the tests in build() for pgo, so it's tested from there.
# options="!check"

fmv_targets="x86-64-v3 default"
fmv_check_files="output/lib/libzstd.so"
fmv_src_prefix="../"

_bm_fn="lib/compress/zstd_opt.c:ZSTD_btGetAllMatches"
for _t in dictMatchState extDict noDict; do
	for _n1 in 3 4 5 6; do
		fmv_functions="$fmv_functions ${_bm_fn}_${_t}_${_n1}"
	done
done

fmv_functions="$fmv_functions
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesLong_bmi2
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesLong_default
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesSplitLitBuffer_bmi2
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequences_bmi2
	lib/compress/zstd_compress_sequences.c:ZSTD_encodeSequences_bmi2
	lib/compress/zstd_compress_sequences.c:ZSTD_encodeSequences_default
	lib/compress/zstd_double_fast.c:ZSTD_fillDoubleHashTable
	lib/compress/zstd_fast.c:ZSTD_fillHashTable

	lib/compress/zstd_opt.c:ZSTD_insertBt1
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt_dictMatchState
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt_extDict
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra2
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra_dictMatchState
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra_extDict
	lib/compress/zstd_opt.c:ZSTD_compressBlock_opt2

	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast
	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast_dictMatchState
	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast_extDict

	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast
	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast_dictMatchState
	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast_extDict

	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_row
"

# secfixes:
#   1.4.9-r0:
#     - CVE-2021-24032
#   1.4.1-r0:
#     - CVE-2021-24031
#   1.3.8-r0:
#     - CVE-2019-11922

build() {
	export CFLAGS="${CFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"
	export CXXFLAGS="${CXXFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"
	export CPPFLAGS="${CPPFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"
	if [ -z "$BOOTSTRAP" ]; then
		# Disable PGO due to insufficient test coverage of more versatile use
		# of the package.
		# Note that when using PGO with FMV, it also requires running
		# pgo/generate-stage for all fmv_targets.
		local pgo=false
	fi
	# 2-stage pgo+lto build (non-bootstrap), standard meson usage.
	# note that with clang,
	#  llvm-profdata merge --output=output/somefilename(?) output/*.profraw
	# is needed.
	# believe it or not, this is +30% faster on x86_64 than the default makefile build (same params)..
	# maybe needs more testing
	# shellcheck disable=2046
	abuild-meson \
		--default-library=both \
		-Db_ndebug=true \
		$(test $pgo = true && echo -Db_pgo=generate) \
		-Dbin_contrib=true \
		-Dbin_programs=true \
		-Dbin_tests="$(want_check && echo true || echo false)" \
		-Dbacktrace=disabled \
		-Dmulti_thread=enabled \
		-Dlz4=disabled \
		-Dlzma=disabled \
		-Dzlib=disabled \
		build/meson output

	meson compile -C output

	if [ $pgo = true ]; then
		meson test -t 4 --no-rebuild --print-errorlogs -C output
		meson configure -Dbin_tests=false -Db_pgo=use output
		meson compile -C output
	fi
}

check() {
	meson test -t 4 --no-rebuild --print-errorlogs -C output
}

package() {
	DESTDIR="$pkgdir" meson install --no-rebuild -C output
}

frugal() {
	pkgdesc="$pkgdesc (frugal cli)"

	amove usr/bin/zstd-frugal
}

sha512sums="
356994e0d8188ce97590bf86b602eb50cbcb2f951594afb9c2d6e03cc68f966862505afc4a50e76efd55e4cfb11dbc9b15c7837b7827a961a1311ef72cd23505  zstd-1.5.5.tar.gz
"
