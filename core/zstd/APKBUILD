# Description: reference implementation of a lossless data compression
# algorithm developed by Yann Collet at Facebook.

pkgname=zstd
pkgver=1.5.5
pkgrel=1
pkgdesc="Zstandard Library"
url="https://www.zstd.net/"
arch="all"
license="BSD-3-Clause GPL-2.0-or-later"
depends_dev="$pkgname=$pkgver-r$pkgrel"
makedepends="grep meson fmv"
checkdepends="file"
subpackages="
	$pkgname-dbg
	$pkgname-libs
	$pkgname-dev
	$pkgname-doc
	$pkgname-frugal
	"
source="zstd-$pkgver.tar.gz::https://github.com/facebook/zstd/archive/v$pkgver.tar.gz
	zstdConfig.cmake
	zstdConfigVersion.cmake
	zstdTargets.cmake
	zstdTargets-none.cmake
	"
# we run the tests in build() for pgo, so it's tested from there.
# options="!check"

fmv_targets="x86-64-v3 default"
fmv_src_prefix="../"

_bm_fn="lib/compress/zstd_opt.c:ZSTD_btGetAllMatches"
for _t in dictMatchState extDict noDict; do
	for _n1 in 3 4 5 6; do
		fmv_functions="$fmv_functions ${_bm_fn}_${_t}_${_n1}"
	done
done

fmv_functions="$fmv_functions
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesLong_bmi2
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesLong_default
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequencesSplitLitBuffer_bmi2
	lib/decompress/zstd_decompress_block.c:ZSTD_decompressSequences_bmi2
	lib/compress/zstd_compress_sequences.c:ZSTD_encodeSequences_bmi2
	lib/compress/zstd_compress_sequences.c:ZSTD_encodeSequences_default
	lib/compress/zstd_double_fast.c:ZSTD_fillDoubleHashTable
	lib/compress/zstd_fast.c:ZSTD_fillHashTable

	lib/compress/zstd_opt.c:ZSTD_insertBt1
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt_dictMatchState
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btopt_extDict
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra2
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra_dictMatchState
	lib/compress/zstd_opt.c:ZSTD_compressBlock_btultra_extDict
	lib/compress/zstd_opt.c:ZSTD_compressBlock_opt2

	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast
	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast_dictMatchState
	lib/compress/zstd_double_fast.c:ZSTD_compressBlock_doubleFast_extDict

	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast
	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast_dictMatchState
	lib/compress/zstd_fast.c:ZSTD_compressBlock_fast_extDict

	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_btlazy2_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_greedy_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy2_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dedicatedDictSearch
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dedicatedDictSearch_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dictMatchState
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_dictMatchState_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_extDict
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_extDict_row
	lib/compress/zstd_lazy.c:ZSTD_compressBlock_lazy_row
"

# secfixes:
#   1.4.9-r0:
#     - CVE-2021-24032
#   1.4.1-r0:
#     - CVE-2021-24031
#   1.3.8-r0:
#     - CVE-2019-11922

prepare() {
	default_prepare

	sed -i "s/_PKGVER_/$pkgver/g" "$srcdir"/zstdConfigVersion.cmake "$srcdir"/zstdTargets-none.cmake
}

build() {
	export CFLAGS="${CFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"
	export CXXFLAGS="${CXXFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"
	export CPPFLAGS="${CPPFLAGS/-Os/-O3} -flto=auto -ffat-lto-objects"

	if [ -z "$BOOTSTRAP" ]; then
		# Disable PGO due to insufficient test coverage of more versatile use
		# of the package.
		# Note that when using PGO with FMV, it also requires running
		# pgo/generate-stage for all fmv_targets.
		local pgo=false
	fi
	# 2-stage pgo+lto build (non-bootstrap), standard meson usage.
	# note that with clang,
	#  llvm-profdata merge --output=output/somefilename(?) output/*.profraw
	# is needed.
	# believe it or not, this is +30% faster on x86_64 than the default makefile build (same params)..
	# maybe needs more testing
	# shellcheck disable=2046
	abuild-meson \
		--default-library=both \
		$(test $pgo = true && echo -Db_pgo=generate) \
		-Dbin_contrib=true \
		-Dbin_programs=true \
		-Dbin_tests="$(want_check && echo true || echo false)" \
		-Dbacktrace=disabled \
		-Dmulti_thread=enabled \
		-Dlz4=disabled \
		-Dlzma=disabled \
		-Dzlib=disabled \
		build/meson output

	meson compile -C output

	if [ $pgo = true ]; then
		meson test -t 4 --no-rebuild --print-errorlogs -C output
		meson configure -Dbin_tests=false -Db_pgo=use output
		meson compile -C output
	fi
}

check() {
	meson test -t 4 --no-rebuild --print-errorlogs -C output
}

package() {
	DESTDIR="$pkgdir" meson install --no-rebuild -C output

	install -Dm644 -t "$pkgdir"/usr/lib/cmake/zstd/ \
		"$srcdir"/*.cmake
}

frugal() {
	pkgdesc="$pkgdesc (frugal cli)"

	amove usr/bin/zstd-frugal
}

sha512sums="
356994e0d8188ce97590bf86b602eb50cbcb2f951594afb9c2d6e03cc68f966862505afc4a50e76efd55e4cfb11dbc9b15c7837b7827a961a1311ef72cd23505  zstd-1.5.5.tar.gz
14f5b63928c1025c314d861b8937aa86605bbd20f9c6f21403660d6708cc2d5825bec77fb89d9a88b3b473eb92efec6f5222a9f4337d5dc7c478b3db74ea8759  zstdConfig.cmake
9f944061692c1e2e76fc7b818817ab2e4c55b18043d1ee205c277e454f5ef71040aa31a9d515f06ed15e6709bacee6f9cde007a515247d4a3c596b33a8285a3a  zstdConfigVersion.cmake
2139366f16a117bf0f165f5feb0e5aafddd020f1b8f285d45a46280d1293b69f01d01f4196b4e9786eee448e3eeb7a3e16302203fb1ca66fdae4f41ab2e94749  zstdTargets.cmake
7b340a57492a18832a5ed994d7db19f83b2d45f4ac8bb750d219fa12c15f8cb82f12396e7301cb84e959a37be9a708f59334ef0d83deb7f00934c510dac10432  zstdTargets-none.cmake
"
