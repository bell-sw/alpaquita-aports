# Description: standartd C Library designed for Linux. Designed to allow
# efficient static linking and to have realtime-quality robustness by avoiding
# race conditions, internal failures on resource exhaustion and various other
# bad worst-case behaviors present in existing implementations.

pkgname=musl-perf
pkgver=1.2.5
pkgrel=2
pkgdesc="the musl c library (libc) implementation (optimized for performance)"
url="https://musl.libc.org/"
arch="x86_64"
license="MIT"
options="!libc_glibc lib64 !fortify !check !annobin"
makedepends="glibc-string"
subpackages="
	$pkgname-dbg
	$pkgname-libintl:libintl:noarch
	$pkgname-dev
	"

provides="musl=$pkgver-r$pkgrel"
provider_priority=1
replaces="musl-default"
replaces_priority=1
alternative=1

case "$BOOTSTRAP" in
nocc)	pkgname="$pkgname-dev"; subpackages="";;
nolibc) ;;
esac
source="https://musl.libc.org/releases/musl-$pkgver.tar.gz
	ldso-fix-non-functional-fix-to-early-dynamic-PAGE_SI.patch
	loongarch64-Add-lsx-and-lasx-vector-structure-defini.patch

	0100-ldso-dynlink-add-ifunc-support.patch
	0101-support-ifunc-in-static-linking.patch
	0102-Makefile-link-glibc-string-lib.patch
	0103-use-internal-ifunc-symbols-in-libc.patch
	0104-increase-buffer-size-for-stdio-stream-functions.patch

	__stack_chk_fail_local.c
	"
# this is needed for BOOTSTRAP=nocc (see above)
builddir="$srcdir/musl-$pkgver"

# secfixes:
#   1.2.2_pre2-r0:
#     - CVE-2020-28928
#   1.1.23-r2:
#     - CVE-2019-14697
#   1.1.15-r4:
#     - CVE-2016-8859

builddir="$srcdir"/musl-$pkgver

prepare() {
	default_prepare

	echo "$pkgver" > VERSION
}

build() {
	[ "$BOOTSTRAP" = "nocc" ] && return 0

	export CPPFLAGS="${CPPFLAGS/-Os/-O2}"
	export CFLAGS="${CFLAGS/-Os/-O2}"
	export LDFLAGS="${LDFLAGS/-O1/-O2}"

	# provide minimal libssp_nonshared.a so we don't need libssp from gcc
	${CROSS_COMPILE}cc $CFLAGS -c "$srcdir"/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
	${CROSS_COMPILE}ar r libssp_nonshared.a __stack_chk_fail_local.o

	cp /usr/lib/libglibc-string.a "$builddir"/

	local lib_ifunc="$(readelf -Ws libglibc-string.a | grep 'IFUNC.*WEAK' | rev | cut -f1 -d' ' | rev)"
	local n

	for n in $lib_ifunc; do
		echo "Removing default implementation for $n"
		rm -f ./src/string/$n.c ./src/string/$CARCH/$n*
	done

	# note: not autotools
	# shellcheck disable=2153
	LDFLAGS="$LDFLAGS -Wl,-soname,libc.musl-$CARCH.so.1" \
	./configure \
		--build=$CBUILD \
		--host=$CHOST \
		--prefix=/usr \
		--syslibdir=/usr/lib \
		--sysconfdir=/etc \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--localstatedir=/var \
		--enable-optimize \
		--enable-debug
	make
}

package() {
	case "$CARCH" in
	aarch64*)	ARCH="aarch64" ;;
	x86_64)		ARCH="x86_64" ;;
	esac

	if [ "$BOOTSTRAP" = "nocc" ]; then
		make ARCH="$ARCH" prefix=/usr DESTDIR="$pkgdir" install-headers
	else
		make DESTDIR="$pkgdir" install

		cp libssp_nonshared.a "$pkgdir"/usr/lib

		# make LDSO the be the real file, and libc the symlink
		local rule="$(printf "%s\n\t%s\n" 'print-ldso:' '@echo $$(basename $(LDSO_PATHNAME))')"
		local LDSO=$(make -f Makefile --eval "$rule" print-ldso)
		mv -f "$pkgdir"/usr/lib/libc.so "$pkgdir"/usr/lib/"$LDSO"
		ln -sf "$LDSO" "$pkgdir"/usr/lib/libc.musl-${CARCH}.so.1
		ln -sf ../../usr/lib/"$LDSO" "$pkgdir"/usr/lib/libc.so
		mkdir -p "$pkgdir"/usr/bin
	fi

	ln -sf usr/lib "$pkgdir"/lib
	ln -sf usr/bin $pkgdir/bin
	ln -sf usr/sbin $pkgdir/sbin
}

# currently we don't want by default any NLS
# and use GNU gettext where needed. the plan is to migrate to
# musl gettext() later on as fully as possible.
libintl() {
	provides="musl-libintl=1"
	replaces="musl-default-libintl"
	depends="$pkgname=$pkgver-r$pkgrel"

	pkgdesc="musl libintl.h header"
	mkdir -p "$subpkgdir"/usr/include
	mv "$pkgdir"/usr/include/libintl.h \
		"$subpkgdir"/usr/include/
}

dev() {
	default_dev

	# libc-dev is for backwards compatibility
	provides="musl-dev=1 libc-dev=1"
	replaces="musl-default-dev"

	strip --strip-debug "$subpkgdir"/usr/lib/*crt*.o
}

dbg() {
	provides="musl-dbg=1"
	replaces="musl-default-dbg"
	depends="$pkgname=$pkgver-r$pkgrel"

	default_dbg
}

sha512sums="
7bb7f7833923cd69c7a1a9b8a5f1784bfd5289663eb6061dcd43d583e45987df8a68a1be05d75cc1c88a3f5b610653d1a70f4a9cff4d8f7fd41ae73ee058c17c  musl-1.2.5.tar.gz
1b85079c706b017106ecbf4afbc65b4a2171297a673035645e4c3ddb7e2aae0549b04932df83778323b7329ae8d32160a89e0c1b2534c278708c61b1f40a1ed8  ldso-fix-non-functional-fix-to-early-dynamic-PAGE_SI.patch
b4d95231944fd236827a62343bbce74b20a56739e2b8937bda69bfc7b53f2ce5bd709459ee61615bd10d2839f43311eced9344ee8185701fd38ec0de0d43c6ae  loongarch64-Add-lsx-and-lasx-vector-structure-defini.patch
560ebc146d4e4880367f15264c06f0905865f1850db10777e7ae9ce5d6cf8bb5bd1118a92e473a7d8c4c798e921048e60624c2610abc4ca52e2a04b9892ebaf5  0100-ldso-dynlink-add-ifunc-support.patch
6bb5771cea35415c25e80afd8bf064782eef66c3bd574d153ea13e78f771bad4e5b7c0b4fec0d5c5b2bde08aa1b24a646e65b71af4af61fea54d71a55cc3707d  0101-support-ifunc-in-static-linking.patch
21972d5abd3bf40aadfb04f13fda68cab69a5ee7aa517165ae88d6eeef71b43d0431943b28c1c50e092acb5aa0e4bb4ecab7b3e328926abd1c3a1511c5647f50  0102-Makefile-link-glibc-string-lib.patch
d69efdf797a7affe037c156428c206165eb6e0d23955530ef8324a2fb5ae5552750de8505b57ca34e5dc45b21682633a7effe5fae22e46564307f3f9df1a9b1b  0103-use-internal-ifunc-symbols-in-libc.patch
ffc1da978ee14e1eb58364ff78b3a6421d1db5ce76ae4ba77bc997af22c524f5319d30b4d34a5904e65aa55569bd1d7a21b1f5f3590197fd5fb08a66cad4b2b1  0104-increase-buffer-size-for-stdio-stream-functions.patch
062bb49fa54839010acd4af113e20f7263dde1c8a2ca359b5fb2661ef9ed9d84a0f7c3bc10c25dcfa10bb3c5a4874588dff636ac43d5dbb3d748d75400756d0b  __stack_chk_fail_local.c
"
