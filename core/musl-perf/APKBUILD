
# Description: standartd C Library designed for Linux. Designed to allow
# efficient static linking and to have realtime-quality robustness by avoiding
# race conditions, internal failures on resource exhaustion and various other
# bad worst-case behaviors present in existing implementations.

pkgname=musl-perf
pkgver=1.2.4_git20230717
pkgrel=9
pkgdesc="the musl c library (libc) implementation (optimized for performance)"
url="https://musl.libc.org/"
arch="x86_64"
license="MIT"
options="!libc_glibc lib64 !fortify !check !annobin"
makedepends="glibc-string"
subpackages="
	$pkgname-dbg
	$pkgname-libintl:libintl:noarch
	$pkgname-dev
	"

provides="musl=$pkgver-r$pkgrel"
provider_priority=1
replaces="musl-default"
replaces_priority=1
alternative=1

case "$BOOTSTRAP" in
nocc)	pkgname="$pkgname-dev"; subpackages="";;
nolibc) ;;
esac
_commit="83b858f83b658bd34eca5d8ad4d145f673ae7e5e"
source="musl-$_commit.tar.gz::https://git.musl-libc.org/cgit/musl/snapshot/$_commit.tar.gz
	remove-dns-63-records-limit.patch
	0001-elf.h-add-typedefs-for-Elf-_Relr.patch
	0002-remove-non-prototype-declaration-of-basename-from-st.patch

	0100-ldso-dynlink-add-ifunc-support.patch
	0101-support-ifunc-in-static-linking.patch
	0102-Makefile-link-glibc-string-lib.patch
	0103-use-internal-ifunc-symbols-in-libc.patch
	0104-increase-buffer-size-for-stdio-stream-functions.patch

	__stack_chk_fail_local.c
	"

# secfixes:
#   1.2.2_pre2-r0:
#     - CVE-2020-28928
#   1.1.23-r2:
#     - CVE-2019-14697
#   1.1.15-r4:
#     - CVE-2016-8859

builddir="$srcdir"/$_commit

prepare() {
	default_prepare

	echo "$pkgver" > VERSION
}

build() {
	[ "$BOOTSTRAP" = "nocc" ] && return 0

	export CPPFLAGS="${CPPFLAGS/-Os/-O2}"
	export CFLAGS="${CFLAGS/-Os/-O2}"
	export LDFLAGS="${LDFLAGS/-O1/-O2}"

	# provide minimal libssp_nonshared.a so we don't need libssp from gcc
	${CROSS_COMPILE}cc $CFLAGS -c "$srcdir"/__stack_chk_fail_local.c -o __stack_chk_fail_local.o
	${CROSS_COMPILE}ar r libssp_nonshared.a __stack_chk_fail_local.o

	cp /usr/lib/libglibc-string.a "$builddir"/

	local lib_ifunc="$(readelf -Ws libglibc-string.a | grep 'IFUNC.*WEAK' | rev | cut -f1 -d' ' | rev)"
	local n

	for n in $lib_ifunc; do
		echo "Removing default implementation for $n"
		rm -f ./src/string/$n.c ./src/string/$CARCH/$n*
	done

	# note: not autotools
	# shellcheck disable=2153
	LDFLAGS="$LDFLAGS -Wl,-soname,libc.musl-$CARCH.so.1" \
	./configure \
		--build=$CBUILD \
		--host=$CHOST \
		--prefix=/usr \
		--syslibdir=/usr/lib \
		--sysconfdir=/etc \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--localstatedir=/var \
		--enable-optimize \
		--enable-debug
	make
}

package() {
	case "$CARCH" in
	aarch64*)	ARCH="aarch64" ;;
	x86_64)		ARCH="x86_64" ;;
	esac

	if [ "$BOOTSTRAP" = "nocc" ]; then
		make ARCH="$ARCH" prefix=/usr DESTDIR="$pkgdir" install-headers
	else
		make DESTDIR="$pkgdir" install

		cp libssp_nonshared.a "$pkgdir"/usr/lib

		# make LDSO the be the real file, and libc the symlink
		local rule="$(printf "%s\n\t%s\n" 'print-ldso:' '@echo $$(basename $(LDSO_PATHNAME))')"
		local LDSO=$(make -f Makefile --eval "$rule" print-ldso)
		mv -f "$pkgdir"/usr/lib/libc.so "$pkgdir"/usr/lib/"$LDSO"
		ln -sf "$LDSO" "$pkgdir"/usr/lib/libc.musl-${CARCH}.so.1
		ln -sf ../../usr/lib/"$LDSO" "$pkgdir"/usr/lib/libc.so
		mkdir -p "$pkgdir"/usr/bin
	fi

	ln -sf usr/lib "$pkgdir"/lib
	ln -sf usr/bin $pkgdir/bin
	ln -sf usr/sbin $pkgdir/sbin
}

# currently we don't want by default any NLS
# and use GNU gettext where needed. the plan is to migrate to
# musl gettext() later on as fully as possible.
libintl() {
	provides="musl-libintl=1"
	replaces="musl-default-libintl"
	depends="$pkgname=$pkgver-r$pkgrel"

	pkgdesc="musl libintl.h header"
	mkdir -p "$subpkgdir"/usr/include
	mv "$pkgdir"/usr/include/libintl.h \
		"$subpkgdir"/usr/include/
}

dev() {
	# libc-dev is for backwards compatibility
	provides="musl-dev=1 libc-dev=1"
	replaces="musl-default-dev"

	default_dev

	strip --strip-debug "$subpkgdir"/usr/lib/*crt*.o
}

dbg() {
	provides="musl-dbg=1"
	replaces="musl-default-dbg"
	depends="$pkgname=$pkgver-r$pkgrel"

	default_dbg
}

sha512sums="
29c8b33565f2f7aeacf274e8029b94dc515c569f2e3fc27acb0cf8254e22d6248bf0948076f2c2887ba0495ff2e2db59f760d69d2b4ee6697fea4cda1adf9136  musl-83b858f83b658bd34eca5d8ad4d145f673ae7e5e.tar.gz
088620aeeea1a407a103728f839d21c10c830820e1dae970edd70282534758d7fdb6d1d2d2761ccecac7a3e56ffb79c7b7085f3fe80a01d324d7bc0d94bb15f7  remove-dns-63-records-limit.patch
b1f5c1b849f7ec8de6a5f619476f560ea6bf02aad2becfb4e35873d05e01777d5447992b96b0c7f2903c2d8ff094c06927a6ff85f2f006e2441af52fe98c5c42  0001-elf.h-add-typedefs-for-Elf-_Relr.patch
e4e04e7f5dd8c5eac90070c42562d224f71dc3d0888054734e708da1a4f33ed442365d240e0d53f41a4f4f946b8c7407b16a6212913e17ccb80a242c1fa04a1b  0002-remove-non-prototype-declaration-of-basename-from-st.patch
26fa733450c3b9f0e84668c6ae48b218a34de233f9d8cd2cf239648b825c9e9fcad1e91b02802605628be2c971cc64e5c90e7fca5ccbea9f370672cf9c71b3b4  0100-ldso-dynlink-add-ifunc-support.patch
476fd0214911edbc4e36114c6c2a32ccb3e85d776e2de0427bbfd7ac1aaf46e6b1c3e00bd83cd998380c7db83b2a67ac3e6d840867472131eae69a1ce99d5a86  0101-support-ifunc-in-static-linking.patch
5ed91362c40f18bf1af4c744a234c828e3c4979ecbc21f8dbf0d8b96c9d7662615163a9ce13372249f5be7472366c6e8f68e6f984c0172d6a22b21e8161cd07c  0102-Makefile-link-glibc-string-lib.patch
52f89fc89789b06eaaeaf2d6e47f296de8cb0742ccd1c0b41e280e0691ab5f056af23daebf497dfc3b183d05dacc670980f0eaac330e3d6033d05ee07f55b8e2  0103-use-internal-ifunc-symbols-in-libc.patch
93709be81eb6d13e00e3408651ccd1aa53f28ada09f9a45356d03188afbae486381069321c67a341f18c44afabf7b98c0471da7594d3983fdff7cbe21b9a3265  0104-increase-buffer-size-for-stdio-stream-functions.patch
062bb49fa54839010acd4af113e20f7263dde1c8a2ca359b5fb2661ef9ed9d84a0f7c3bc10c25dcfa10bb3c5a4874588dff636ac43d5dbb3d748d75400756d0b  __stack_chk_fail_local.c
"
