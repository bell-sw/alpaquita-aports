From ae4566faab38ff04fde4d79d46eb11db3e2808ab Mon Sep 17 00:00:00 2001
From: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
Date: Wed, 15 Sep 2021 16:23:31 +0300
Subject: [PATCH] ldso/dynlink: add ifunc support

---
 arch/x86_64/reloc.h    |  1 +
 ldso/dynlink.c         | 40 ++++++++++++++++++++++++++++++++++++++--
 src/internal/dynlink.h |  1 +
 3 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/arch/x86_64/reloc.h b/arch/x86_64/reloc.h
index fac0c0ae..fb6be3ea 100644
--- a/arch/x86_64/reloc.h
+++ b/arch/x86_64/reloc.h
@@ -10,6 +10,7 @@
 #define REL_DTPOFF      R_X86_64_DTPOFF64
 #define REL_TPOFF       R_X86_64_TPOFF64
 #define REL_TLSDESC     R_X86_64_TLSDESC
+#define REL_IRELATIVE   R_X86_64_IRELATIVE
 
 #define CRTJMP(pc,sp) __asm__ __volatile__( \
 	"mov %1,%%rsp ; jmp *%0" : : "r"(pc), "r"(sp) : "memory" )
diff --git a/ldso/dynlink.c b/ldso/dynlink.c
index 42687da2..e9d166ae 100644
--- a/ldso/dynlink.c
+++ b/ldso/dynlink.c
@@ -301,7 +301,7 @@ static Sym *gnu_lookup_filtered(uint32_t h1, uint32_t *hashtab, struct dso *dso,
 	return gnu_lookup(h1, hashtab, dso, s);
 }
 
-#define OK_TYPES (1<<STT_NOTYPE | 1<<STT_OBJECT | 1<<STT_FUNC | 1<<STT_COMMON | 1<<STT_TLS)
+#define OK_TYPES (1<<STT_NOTYPE | 1<<STT_OBJECT | 1<<STT_FUNC | 1<<STT_COMMON | 1<<STT_TLS | 1<<STT_GNU_IFUNC)
 #define OK_BINDS (1<<STB_GLOBAL | 1<<STB_WEAK | 1<<STB_GNU_UNIQUE)
 
 #ifndef ARCH_SYM_REJECT_UND
@@ -381,6 +381,20 @@ nomatch:
 	return (struct symdef){ 0 };
 }
 
+static int resolve_ifunc_addr(size_t *addr)
+{
+	if (!addr || !*addr || ldd_mode)
+		return 0;
+
+	void *new_addr = ((void *(*)(void))*addr)();
+
+	if (!new_addr)
+		return -1;
+
+	*addr = (size_t)new_addr;
+	return 0;
+}
+
 static void do_relocs(struct dso *dso, size_t *rel, size_t rel_size, size_t stride)
 {
 	unsigned char *base = dso->base;
@@ -397,17 +411,22 @@ static void do_relocs(struct dso *dso, size_t *rel, size_t rel_size, size_t stri
 	size_t tls_val;
 	size_t addend;
 	int skip_relative = 0, reuse_addends = 0, save_slot = 0;
+	int ifunc, skip_ifunc = 0;
 
 	if (dso == &ldso) {
 		/* Only ldso's REL table needs addend saving/reuse. */
 		if (rel == apply_addends_to)
 			reuse_addends = 1;
 		skip_relative = 1;
+		/* Resolve internal ifunc's only in stage 2 */
+		skip_ifunc = head != &ldso;
 	}
 
 	for (; rel_size; rel+=stride, rel_size-=stride*sizeof(size_t)) {
+		ifunc = 0;
 		if (skip_relative && IS_RELATIVE(rel[1], dso->syms)) continue;
 		type = R_TYPE(rel[1]);
+		if (skip_ifunc && type == REL_IRELATIVE) continue;
 		if (type == REL_NONE) continue;
 		reloc_addr = laddr(dso, rel[0]);
 
@@ -473,10 +492,14 @@ static void do_relocs(struct dso *dso, size_t *rel, size_t rel_size, size_t stri
 		case REL_GOT:
 		case REL_PLT:
 			*reloc_addr = sym_val + addend;
+			if (def.sym && (def.sym->st_info&0xf) == STT_GNU_IFUNC)
+				ifunc = 1;
 			break;
 		case REL_USYMBOLIC:
 			memcpy(reloc_addr, &(size_t){sym_val + addend}, sizeof(size_t));
 			break;
+		case REL_IRELATIVE:
+			ifunc = 1;
 		case REL_RELATIVE:
 			*reloc_addr = (size_t)base + addend;
 			break;
@@ -558,6 +581,11 @@ static void do_relocs(struct dso *dso, size_t *rel, size_t rel_size, size_t stri
 			if (runtime) longjmp(*rtld_fail, 1);
 			continue;
 		}
+
+		if (ifunc && resolve_ifunc_addr(reloc_addr) < 0) {
+			error("Error relocating %s: ifunc resolver failed", dso->name);
+			if (runtime) longjmp(*rtld_fail, 1);
+		}
 	}
 }
 
@@ -2290,7 +2318,15 @@ static void *do_dlsym(struct dso *p, const char *s, void *ra)
 		return __tls_get_addr((tls_mod_off_t []){def.dso->tls_id, def.sym->st_value-DTP_OFFSET});
 	if (DL_FDPIC && (def.sym->st_info&0xf) == STT_FUNC)
 		return def.dso->funcdescs + (def.sym - def.dso->syms);
-	return laddr(def.dso, def.sym->st_value);
+
+	size_t sym_val = (size_t)laddr(def.dso, def.sym->st_value);
+
+	if ((def.sym->st_info&0xf) == STT_GNU_IFUNC && resolve_ifunc_addr(&sym_val) < 0) {
+		error("Error in resolving ifunc address for symbol: %s", s);
+		return 0;
+	}
+
+	return (void *)sym_val;
 }
 
 int dladdr(const void *addr_arg, Dl_info *info)
diff --git a/src/internal/dynlink.h b/src/internal/dynlink.h
index 40c743e2..996ca6a2 100644
--- a/src/internal/dynlink.h
+++ b/src/internal/dynlink.h
@@ -43,6 +43,7 @@ enum {
 	REL_TLSDESC,
 	REL_FUNCDESC,
 	REL_FUNCDESC_VAL,
+	REL_IRELATIVE,
 };
 
 struct fdpic_loadseg {
-- 
2.25.1

