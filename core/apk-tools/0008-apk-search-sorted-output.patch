From 14e7ad21e793e58ca1a317ec71230fd0c35ff66a Mon Sep 17 00:00:00 2001
From: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
Date: Mon, 16 May 2022 12:27:52 +0300
Subject: [PATCH] apk-search: sorted output

Changes in '-o|--origin' option: it now prints additional information
with the name of the base package in curly braces (similar to apk list):

Before the patch, '-o' replaces matching packages with the base name:

    $ apk search -o dracut
    dracut-055-r17
    dracut-055-r17
    zfs-2.1.2-r0
    dracut-055-r17

After the patch, base name printed in curly braces:

    $ apk search -o dracut
    dracut-055-r17 {dracut}
    dracut-bash-completion-055-r17 {dracut}
    dracut-doc-055-r17 {dracut}
    zfs-dracut-2.1.2-r0 {zfs}

Changes in reverse '-r|--rdepends' option:

* sorting is performed not only for packages, but also for each
  found group of reverse dependencies

* fixed duplicated entries

* added indent when printing reverse dependencies

Before the patch:

    $ apk search -r dracut
    dracut-055-r17 is required by:
    syslinux-6.04_pre2_git20190206-r300
    grub-2.06-r302
    linux-lts-5.10.111-r0
    linux-lts-debug-extra-modules-5.10.111-r0
    linux-lts-debug-5.10.111-r0
    linux-lts-extra-modules-5.10.111-r0
    grub-xenhost-2.06-r302
    dracut-doc-055-r17 is required by:
    dracut-055-r17 is required by:
    dracut-055-r17 is required by:
    zfs-dracut-2.1.2-r0 is required by:
    dracut-055-r17 is required by:
    dracut-bash-completion-055-r17 is required by:

After the patch:

    $ apk search -r dracut
    dracut-055-r17 is required by:
      grub-2.06-r302
      grub-xenhost-2.06-r302
      linux-lts-5.10.111-r0
      linux-lts-debug-5.10.111-r0
      linux-lts-debug-extra-modules-5.10.111-r0
      linux-lts-extra-modules-5.10.111-r0
      syslinux-6.04_pre2_git20190206-r300
    dracut-bash-completion-055-r17 is required by:
    dracut-doc-055-r17 is required by:
    zfs-dracut-2.1.2-r0 is required by:
---
 src/app_search.c | 134 ++++++++++++++++++++++++++++++++---------------
 1 file changed, 91 insertions(+), 43 deletions(-)

diff --git a/src/app_search.c b/src/app_search.c
index 866bb7a..4d375b4 100644
--- a/src/app_search.c
+++ b/src/app_search.c
@@ -15,18 +15,45 @@
 #include "apk_database.h"
 
 struct search_ctx {
-	void (*print_result)(struct search_ctx *ctx, struct apk_package *pkg);
-	void (*print_package)(struct search_ctx *ctx, struct apk_package *pkg);
-
 	int show_all : 1;
 	int search_exact : 1;
 	int search_description : 1;
 	int search_origin : 1;
+	int print_origin : 1;
+	int search_rdeps: 1;
 
 	unsigned int matches;
 	struct apk_string_array *filter;
+	struct apk_package_array *pkg_array;
+	struct apk_package_array *rdep_pkg_array;
 };
 
+static int compare_pkgs(const void *p1, const void *p2)
+{
+	const struct apk_package *pkg1 = *(const void **)p1,
+				 *pkg2 = *(const void **)p2;
+
+	int ret = strcmp(pkg1->name->name, pkg2->name->name);
+
+	if (ret)
+		return ret;
+
+	switch (apk_version_compare_blob(*pkg1->version, *pkg2->version)) {
+	case APK_VERSION_EQUAL:
+		return 0;
+	case APK_VERSION_LESS:
+		return -1;
+	case APK_VERSION_GREATER:
+		return 1;
+	}
+	return 0;
+}
+
+static void sort_array(struct apk_package_array *array)
+{
+	qsort(array->item, array->num, sizeof(array->item[0]), compare_pkgs);
+}
+
 static int unique_match(struct apk_package *pkg)
 {
 	if (pkg->state_int) return 0;
@@ -34,42 +61,52 @@ static int unique_match(struct apk_package *pkg)
 	return 1;
 }
 
-static void print_package_name(struct search_ctx *ctx, struct apk_package *pkg)
+static void add_package(struct search_ctx *ctx, struct apk_package *pkg)
 {
 	if (!unique_match(pkg)) return;
-	printf("%s", pkg->name->name);
-	if (apk_verbosity > 0)
-		printf("-" BLOB_FMT, BLOB_PRINTF(*pkg->version));
-	if (apk_verbosity > 1)
-		printf(" - %s", pkg->description);
-	printf("\n");
+
+	*apk_package_array_add(&ctx->pkg_array) = pkg;
 }
 
-static void print_origin_name(struct search_ctx *ctx, struct apk_package *pkg)
+static void print_package_name(struct search_ctx *ctx, struct apk_package *pkg)
 {
-	if (!unique_match(pkg)) return;
-	if (pkg->origin != NULL)
-		printf(BLOB_FMT, BLOB_PRINTF(*pkg->origin));
-	else
-		printf("%s", pkg->name->name);
+	printf("%s", pkg->name->name);
 	if (apk_verbosity > 0)
 		printf("-" BLOB_FMT, BLOB_PRINTF(*pkg->version));
+	if (apk_verbosity > 1)
+		printf(" - %s", pkg->description);
+	if (ctx->print_origin && pkg->origin != NULL)
+		printf(" {"BLOB_FMT"}", BLOB_PRINTF(*pkg->origin));
 	printf("\n");
 }
 
-static void print_rdep_pkg(struct apk_package *pkg0, struct apk_dependency *dep0, struct apk_package *pkg, void *pctx)
+static void add_rdep_package(struct apk_package *pkg0, struct apk_dependency *dep0, struct apk_package *pkg, void *pctx)
 {
 	struct search_ctx *ctx = (struct search_ctx *) pctx;
-	ctx->print_package(ctx, pkg0);
+
+	*apk_package_array_add(&ctx->rdep_pkg_array) = pkg0;
 }
 
 static void print_rdepends(struct search_ctx *ctx, struct apk_package *pkg)
 {
+	struct apk_package **rdep_pkg;
+
 	if (apk_verbosity > 0) {
 		ctx->matches = apk_foreach_genid() | APK_DEP_SATISFIES;
 		printf(PKG_VER_FMT " is required by:\n", PKG_VER_PRINTF(pkg));
 	}
-	apk_pkg_foreach_reverse_dependency(pkg, ctx->matches, print_rdep_pkg, ctx);
+
+	apk_package_array_init(&ctx->rdep_pkg_array);
+	apk_pkg_foreach_reverse_dependency(pkg, ctx->matches, add_rdep_package, ctx);
+
+	sort_array(ctx->rdep_pkg_array);
+
+	foreach_array_item(rdep_pkg, ctx->rdep_pkg_array) {
+		printf("  ");
+		print_package_name(ctx, *rdep_pkg);
+	}
+
+	apk_package_array_free(&ctx->rdep_pkg_array);
 }
 
 #define SEARCH_OPTIONS(OPT) \
@@ -99,10 +136,10 @@ static int option_parse_applet(void *ctx, struct apk_db_options *dbopts, int opt
 		ictx->search_exact = 1;
 		break;
 	case OPT_SEARCH_origin:
-		ictx->print_package = print_origin_name;
+		ictx->print_origin = 1;
 		break;
 	case OPT_SEARCH_rdepends:
-		ictx->print_result = print_rdepends;
+		ictx->search_rdeps = 1;
 		break;
 	case OPT_SEARCH_has_origin:
 		ictx->search_origin = 1;
@@ -120,7 +157,7 @@ static const struct apk_option_group optgroup_applet = {
 	.parse = option_parse_applet,
 };
 
-static void print_result_pkg(struct search_ctx *ctx, struct apk_package *pkg)
+static void process_result_pkg(struct search_ctx *ctx, struct apk_package *pkg)
 {
 	char **pmatch;
 
@@ -140,10 +177,10 @@ static void print_result_pkg(struct search_ctx *ctx, struct apk_package *pkg)
 		return;
 	}
 match:
-	ctx->print_result(ctx, pkg);
+	add_package(ctx, pkg);
 }
 
-static void print_result(struct apk_database *db, const char *match, struct apk_name *name, void *pctx)
+static void find_packages(struct apk_database *db, const char *match, struct apk_name *name, void *pctx)
 {
 	struct search_ctx *ctx = pctx;
 	struct apk_provider *p;
@@ -153,7 +190,7 @@ static void print_result(struct apk_database *db, const char *match, struct apk_
 
 	if (ctx->show_all) {
 		foreach_array_item(p, name->providers)
-			print_result_pkg(ctx, p->pkg);
+			process_result_pkg(ctx, p->pkg);
 	} else {
 		foreach_array_item(p, name->providers) {
 			if (pkg == NULL ||
@@ -161,13 +198,13 @@ static void print_result(struct apk_database *db, const char *match, struct apk_
 				pkg = p->pkg;
 		}
 		if (pkg)
-			print_result_pkg(ctx, pkg);
+			process_result_pkg(ctx, pkg);
 	}
 }
 
-static int print_pkg(apk_hash_item item, void *pctx)
+static int add_result_pkg(apk_hash_item item, void *pctx)
 {
-	print_result_pkg((struct search_ctx *) pctx, (struct apk_package *) item);
+	process_result_pkg((struct search_ctx *) pctx, (struct apk_package *) item);
 	return 0;
 }
 
@@ -175,27 +212,38 @@ static int search_main(void *pctx, struct apk_database *db, struct apk_string_ar
 {
 	struct search_ctx *ctx = (struct search_ctx *) pctx;
 	char *tmp, **pmatch;
+	struct apk_package **pkg;
+
+	apk_package_array_init(&ctx->pkg_array);
 
 	ctx->filter = args;
 	ctx->matches = apk_foreach_genid() | APK_DEP_SATISFIES;
-	if (ctx->print_package == NULL)
-		ctx->print_package = print_package_name;
-	if (ctx->print_result == NULL)
-		ctx->print_result = ctx->print_package;
 
-	if (ctx->search_description || ctx->search_origin)
-		return apk_hash_foreach(&db->available.packages, print_pkg, ctx);
-
-	if (!ctx->search_exact) {
-		foreach_array_item(pmatch, ctx->filter) {
-			tmp = alloca(strlen(*pmatch) + 3);
-			sprintf(tmp, "*%s*", *pmatch);
-			*pmatch = tmp;
+	if (ctx->search_description || ctx->search_origin) {
+		apk_hash_foreach(&db->available.packages, add_result_pkg, ctx);
+	} else {
+		if (!ctx->search_exact) {
+			foreach_array_item(pmatch, ctx->filter) {
+				tmp = alloca(strlen(*pmatch) + 3);
+				sprintf(tmp, "*%s*", *pmatch);
+				*pmatch = tmp;
+			}
 		}
+		apk_name_foreach_matching(
+			db, args, APK_FOREACH_NULL_MATCHES_ALL | apk_foreach_genid(),
+			find_packages, ctx);
 	}
-	apk_name_foreach_matching(
-		db, args, APK_FOREACH_NULL_MATCHES_ALL | apk_foreach_genid(),
-		print_result, ctx);
+
+	sort_array(ctx->pkg_array);
+
+	foreach_array_item(pkg, ctx->pkg_array) {
+		if (ctx->search_rdeps)
+			print_rdepends(ctx, *pkg);
+		else
+			print_package_name(ctx, *pkg);
+	}
+
+	apk_package_array_free(&ctx->pkg_array);
 	return 0;
 }
 
-- 
2.25.1

