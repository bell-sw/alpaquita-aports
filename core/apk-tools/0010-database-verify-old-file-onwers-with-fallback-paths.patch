From a019ba2492ce98ee78c0ace75a8e9a3dcf9a54ed Mon Sep 17 00:00:00 2001
From: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
Date: Tue, 26 Dec 2023 10:27:22 +0000
Subject: [PATCH] database: verify old file onwers with fallback paths

This is because the old and new package versions may have different
dir-paths pointing to the same location (e.g. /lib -> usr/lib). In
this particular case, the previous owner won't be found when
upgrading and downgrading.

Fix it for system symlinks: lib, bin and sbin.
---
 src/database.c | 78 ++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 76 insertions(+), 2 deletions(-)

diff --git a/src/database.c b/src/database.c
index 5ec7f7d..3b091cf 100644
--- a/src/database.c
+++ b/src/database.c
@@ -2734,9 +2734,56 @@ static void apk_db_purge_pkg(struct apk_database *db,
 	}
 }
 
+static int dir_incl_path(const apk_blob_t *dir, const apk_blob_t *path)
+{
+	if (dir->len < path->len || strncmp(dir->ptr, path->ptr, path->len))
+		return FALSE;
+	if (dir->len > path->len && dir->ptr[path->len] != '/')
+		return FALSE;
+
+	return TRUE;
+}
+
+static apk_blob_t make_fallback_dir(struct apk_db_dir *dir, char *tmpdir)
+{
+	apk_blob_t orig = APK_BLOB_PTR_LEN(dir->name, dir->namelen);
+	apk_blob_t links[] = {
+		{ .ptr = "lib",  .len = 3},
+		{ .ptr = "bin",  .len = 3},
+		{ .ptr = "sbin", .len = 4},
+	};
+	apk_blob_t d = orig;
+	size_t i, remove_usr_path = 0;
+
+	if (d.len >= 4 && strncmp(d.ptr, "usr/", 4) == 0) {
+		remove_usr_path = 1;
+		d.ptr += 4;
+		d.len -= 4;
+	}
+	for (i = 0; i < ARRAY_SIZE(links); ++i) {
+		if (dir_incl_path(&d, &links[i]))
+			break;
+	}
+	if (i >= ARRAY_SIZE(links))
+		return orig;
+
+	if (remove_usr_path)
+		return d;
+
+	/* add 'usr/' + '\0' */
+	d.len += 4;
+	if (d.len + 1 > PATH_MAX)
+		return orig;
+	snprintf(tmpdir, d.len + 1, "usr/%s", d.ptr);
+	d.ptr = tmpdir;
+
+	return d;
+}
 
 static void apk_db_migrate_files(struct apk_database *db,
-				 struct apk_installed_package *ipkg)
+				 struct apk_installed_package *ipkg,
+				 struct apk_package *oldpkg
+				 )
 {
 	struct apk_db_dir_instance *diri;
 	struct apk_db_dir *dir;
@@ -2746,6 +2793,7 @@ static void apk_db_migrate_files(struct apk_database *db,
 	struct hlist_node *dc, *dn, *fc, *fn;
 	unsigned long hash;
 	char name[PATH_MAX], tmpname[TMPNAME_MAX];
+	char tmpdir[PATH_MAX];
 	int cstype, r;
 
 	hlist_for_each_entry_safe(diri, dc, dn, &ipkg->owned_dirs, pkg_dirs_list) {
@@ -2767,6 +2815,32 @@ static void apk_db_migrate_files(struct apk_database *db,
 			ofile = (struct apk_db_file *) apk_hash_get_hashed(
 				&db->installed.files, APK_BLOB_BUF(&key), hash);
 
+			/* re-check with fallback directory on upgrade/downgrade */
+			if (!ofile && oldpkg && dir->namelen >= 3) {
+				apk_blob_t new_dir = make_fallback_dir(dir, tmpdir);
+
+				if (new_dir.ptr != dir->name) {
+					if (apk_verbosity >= 2) {
+						apk_message("re-check file %.*s (%.*s) in new dir: %.*s",
+							    (int)file->namelen, file->name,
+							    (int)dir->namelen, dir->name,
+							    (int)new_dir.len, new_dir.ptr);
+					}
+
+					key = (struct apk_db_file_hash_key) {
+						.dirname = new_dir,
+						.filename = APK_BLOB_PTR_LEN(file->name, file->namelen),
+					};
+					unsigned long dir_hash = apk_hash_from_key(&db->installed.dirs, key.dirname);
+					hash = apk_blob_hash_seed(key.filename, dir_hash);
+
+					ofile = (struct apk_db_file *) apk_hash_get_hashed(
+						&db->installed.files, APK_BLOB_BUF(&key), hash);
+					if (ofile && apk_verbosity >= 2)
+						apk_message("re-check: found previous file");
+				}
+			}
+
 			/* We want to compare checksums only if one exists
 			 * in db, and the file is in a protected path */
 			cstype = APK_CHECKSUM_NONE;
@@ -2970,7 +3044,7 @@ int apk_db_install_pkg(struct apk_database *db, struct apk_package *oldpkg,
 			apk_pkg_uninstall(db, newpkg);
 			goto ret_r;
 		}
-		apk_db_migrate_files(db, ipkg);
+		apk_db_migrate_files(db, ipkg, oldpkg);
 	}
 
 	if (oldpkg != NULL && oldpkg != newpkg && oldpkg->ipkg != NULL) {
-- 
2.25.1

