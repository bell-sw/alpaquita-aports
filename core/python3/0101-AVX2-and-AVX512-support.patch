From 26d53bf82ecd5b3f5c4163b794435b7e3e257fba Mon Sep 17 00:00:00 2001
From: Guobing Chen <guobing.chen@intel.com>
Date: Fri, 21 Oct 2022 18:55:20 +0300
Subject: [PATCH] AVX2 and AVX512 support

Merged the original AVX2/AVX512 support patch together with fix to
enable using AVX version static libs when linking binaries. The
static lib should be libname-avx2 or libname-avx512. An example
usage is scikit-learn.

Signed-off-by: Guobing Chen <guobing.chen@intel.com>
Signed-off-by: Alexey Kodanev <aleksei.kodanev@bell-sw.com>
---
 Lib/distutils/unixccompiler.py | 45 ++++++++++++++++++++++++++++++++++
 Python/dynload_shlib.c         | 15 +++++++++++-
 2 files changed, 59 insertions(+), 1 deletion(-)

diff --git a/Lib/distutils/unixccompiler.py b/Lib/distutils/unixccompiler.py
index d00c48981e..619ff8e7ee 100644
--- a/Lib/distutils/unixccompiler.py
+++ b/Lib/distutils/unixccompiler.py
@@ -116,6 +116,16 @@ def _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts):
         try:
             self.spawn(compiler_so + cc_args + [src, '-o', obj] +
                        extra_postargs)
+            self.spawn(compiler_so + cc_args + ["-march=haswell", "-O3",
+                                                "-fno-semantic-interposition",
+                                                "-ffat-lto-objects",
+                                                "-flto=auto"] +
+                       [src, '-o', obj + ".avx2"] + extra_postargs)
+            self.spawn(compiler_so + cc_args + ["-march=skylake-avx512", "-O3",
+                                                "-fno-semantic-interposition",
+                                                "-ffat-lto-objects", "-flto=auto", "-Wa,-mbranches-within-32B-boundaries",
+                                                "-mprefer-vector-width=256"] +
+                       [src, '-o', obj + ".avx512"] + extra_postargs)
         except DistutilsExecError as msg:
             raise CompileError(msg)
 
@@ -157,6 +167,23 @@ def link(self, target_desc, objects,
 
         lib_opts = gen_lib_options(self, library_dirs, runtime_library_dirs,
                                    libraries)
+
+        lib_opts_avx = dict(avx2=[], avx512=[])
+        for avx in "avx2", "avx512":
+            for element in lib_opts:
+                if element.startswith('-l'):
+                    element_tmp = element + f'-{avx}'
+                    lib_opts_avx[avx].append(element_tmp)
+                    # Try with gcc to check whether there are avx2/avx512 lib versions.
+                    # subprocess or os.popen() cannot be used as not support in python
+                    # self-boost building.
+                    ret = os.system(f"echo 'main() {{}}' | gcc -o /dev/null {element_tmp} -xc - >/dev/null 2>&1")
+                    if ret:
+                        lib_opts_avx[avx].pop()
+                        lib_opts_avx[avx].append(element)
+                else:
+                    lib_opts_avx[avx].append(element)
+
         if not isinstance(output_dir, (str, type(None))):
             raise TypeError("'output_dir' must be a string or None")
         if output_dir is not None:
@@ -202,6 +229,24 @@ def link(self, target_desc, objects,
                     linker = _osx_support.compiler_fixup(linker, ld_args)
 
                 self.spawn(linker + ld_args)
+
+                for avx in "avx2", "avx512":
+                    avx_objects = []
+                    for obj in objects:
+                        avx_obj = f"{obj}.{avx}"
+                        if os.path.exists(avx_obj):
+                            avx_objects.append(avx_obj)
+                        else:
+                            avx_objects.append(obj)
+                    ld_args = (avx_objects + self.objects +
+                               lib_opts_avx[avx] + ['-o', f"{output_filename}.{avx}"])
+                    if debug:
+                        ld_args[:0] = ['-g']
+                    if extra_preargs:
+                        ld_args[:0] = extra_preargs
+                    if extra_postargs:
+                        ld_args.extend(extra_postargs + ['-lgfortran'])
+                    self.spawn(linker + ld_args)
             except DistutilsExecError as msg:
                 raise LinkError(msg)
         else:
diff --git a/Python/dynload_shlib.c b/Python/dynload_shlib.c
index 23828898d3..93a7b8a7a3 100644
--- a/Python/dynload_shlib.c
+++ b/Python/dynload_shlib.c
@@ -65,6 +65,9 @@ _PyImport_FindSharedFuncptr(const char *prefix,
     void *handle;
     char funcname[258];
     char pathbuf[260];
+    char pathname2[sizeof(pathbuf)];
+    char pathname3[sizeof(pathbuf)];
+    char *dl_path;
     int dlopenflags=0;
 
     if (strchr(pathname, '/') == NULL) {
@@ -97,7 +100,17 @@ _PyImport_FindSharedFuncptr(const char *prefix,
 
     dlopenflags = _PyInterpreterState_GET()->dlopenflags;
 
-    handle = dlopen(pathname, dlopenflags);
+    PyOS_snprintf(pathname2, sizeof(pathname2), "%s%s", pathname, ".avx2");
+    PyOS_snprintf(pathname3, sizeof(pathname3), "%s%s", pathname, ".avx512");
+
+    if (__builtin_cpu_supports("avx512dq") && access(pathname3, R_OK) == 0)
+        dl_path = pathname3;
+    else if (__builtin_cpu_supports("avx2") && access(pathname2, R_OK) == 0)
+        dl_path = pathname2;
+    else
+        dl_path = pathname;
+
+    handle = dlopen(dl_path, dlopenflags);
 
     if (handle == NULL) {
         PyObject *mod_name;
-- 
2.38.1

