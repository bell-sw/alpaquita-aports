diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/monitor/MultiThreadedMonitorSupport.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/monitor/MultiThreadedMonitorSupport.java
index 39ce7a19aa0..941d5595243 100644
--- a/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/monitor/MultiThreadedMonitorSupport.java
+++ b/graal/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/monitor/MultiThreadedMonitorSupport.java
@@ -72,7 +72,7 @@ import jdk.internal.misc.Unsafe;
  * monitor slot because it would increase the size of every array and it is not possible to
  * distinguish between arrays with different header sizes. See
  * {@code UniverseBuilder.getImmutableTypes()} for details.
- * 
+ *
  * Synchronization on {@link String}, arrays, and other types not having a monitor slot fall back to
  * a monitor stored in {@link #additionalMonitors}. Synchronization of such objects is very slow and
  * not scaling well with more threads because the {@link #additionalMonitorsLock additional monitor
@@ -230,8 +230,31 @@ public class MultiThreadedMonitorSupport extends MonitorSupport {
     @RestrictHeapAccess(reason = NO_LONGER_UNINTERRUPTIBLE, access = Access.UNRESTRICTED)
     @Override
     public void monitorEnter(Object obj, MonitorInflationCause cause) {
-        JavaMonitor lockObject = getOrCreateMonitor(obj, cause);
-        lockObject.monitorEnter(obj);
+        JavaMonitor monitor;
+        int monitorOffset = getMonitorOffset(obj);
+        if (monitorOffset != 0) {
+            /*
+             * Optimized path takes advantage of the knowledge that, when a new monitor object is
+             * created, it is not shared with other threads, so we can set its state without CAS. It
+             * also has acquisitions == 1 by construction, so we don't need to set that too.
+             */
+            long current = JavaMonitor.getCurrentThreadIdentity();
+            monitor = (JavaMonitor) BarrieredAccess.readObject(obj, monitorOffset);
+            if (monitor == null) {
+                long startTicks = JfrTicks.elapsedTicks();
+                JavaMonitor newMonitor = newMonitorLock();
+                newMonitor.setState(current);
+                monitor = (JavaMonitor) UNSAFE.compareAndExchangeObject(obj, monitorOffset, null, newMonitor);
+                if (monitor == null) { // successful
+                    JavaMonitorInflateEvent.emit(obj, startTicks, MonitorInflationCause.MONITOR_ENTER);
+                    newMonitor.latestJfrTid = current;
+                    return;
+                }
+            }
+        } else {
+            monitor = getOrCreateMonitor(obj, cause);
+        }
+        monitor.monitorEnter(obj);
     }
 
     @SubstrateForeignCallTarget(stubCallingConvention = false)
@@ -271,8 +294,18 @@ public class MultiThreadedMonitorSupport extends MonitorSupport {
     @RestrictHeapAccess(reason = NO_LONGER_UNINTERRUPTIBLE, access = Access.UNRESTRICTED)
     @Override
     public void monitorExit(Object obj, MonitorInflationCause cause) {
-        JavaMonitor lockObject = getOrCreateMonitor(obj, cause);
-        lockObject.monitorExit();
+        JavaMonitor monitor;
+        int monitorOffset = getMonitorOffset(obj);
+        if (monitorOffset != 0) {
+            /*
+             * Optimized path: we know that a monitor object exists, due to structured locking, so
+             * one does not need to be created/inflated.
+             */
+            monitor = (JavaMonitor) BarrieredAccess.readObject(obj, monitorOffset);
+        } else {
+            monitor = getOrCreateMonitor(obj, cause);
+        }
+        monitor.monitorExit();
     }
 
     @Override
