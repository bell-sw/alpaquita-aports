# Description:

# secfixes:
#   6.1.83-r0:
#     - CVE-2023-6270
#   6.1.80-r0:
#     - CVE-2022-3061
#   6.1.75-r0:
#     - CVE-2023-46838
#   6.1.74-r0:
#     - CVE-2023-6610
#   6.1.70-r0:
#     - CVE-2023-6606
#   6.1.64-r0:
#     - CVE-2023-28464
#   6.1.62-r0:
#     - CVE-2023-5090
#   6.1.60-r0:
#     - CVE-2020-26555
#   6.1.57-r0:
#     - CVE-2023-34324
_flavor=lts
pkgname=linux-${_flavor}
pkgver=6.1.83
pkgrel=0
_kernver=${pkgver%.*}
pkgdesc="$VENDOR_DISTRO_NAME Linux lts kernel"
url="https://www.kernel.org"
depends="dracut kmod"
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"
makedepends="$_depends_dev sed installkernel bc linux-headers openssl-dev
	diffutils findutils xz sbsigntool"
options="!strip !annobin"
_config=${config:-config-lts.${CARCH}}
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	config-lts.x86_64
	config-lts-debug.x86_64
	extramods
	x509.genkey
	../shim/bellsoft-uefi-ca.pem

	0100-efi-Add-an-EFI_SECURE_BOOT-flag-to-indicate-secure-b.patch
	0101-efi-Lock-down-the-kernel-if-booted-in-secure-boot-mo.patch
	0102-mtd-phram-slram-Disable-when-the-kernel-is-locked-do.patch
	0103-arm64-add-kernel-config-option-to-lock-down-when-in-.patch
	0104-livepatch-Use-kallsyms_on_each_match_symbol-to-impro.patch
	0105-livepatch-Call-klp_match_callback-in-klp_find_callba.patch
	0106-kernel-params.c-defer-most-of-param_sysfs_init-to-la.patch
	0107-pci-pme-wakeups.patch
	0108-ksm-wakeups.patch
	0109-intel_idle-tweak-cpuidle-cstates.patch
	0110-smpboot-reuse-timer-calibration.patch
	0111-initialize-ata-before-graphics.patch
	0112-ata-libahci-ignore-staggered-spin-up.patch
	0113-net-skb-disable-a-single-page-frag-cache.patch
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
subpackages="$subpackages $pkgname-extra-modules:_extramods:$CBUILD_ARCH"

_flavors=
for _i in $source; do
	case $_i in
	config-*.$CARCH)
		_f=${_i%.$CARCH}
		_f=${_f#config-}
		_flavors="$_flavors ${_f}"

		[ "linux-$_f" = "$pkgname" ] && continue

		_fn="$(echo $_f | tr - _)"
		subpackages="$subpackages linux-${_f}:_${_fn}:$CBUILD_ARCH \
			linux-${_f}-dev:_dev:$CBUILD_ARCH \
			linux-${_f}-extra-modules:_extramods:$CBUILD_ARCH"
		;;
	esac
done

if [ "${pkgver%.0}" = "$pkgver" ]; then
	source="$source
	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
fi
arch="all"
license="GPL-2.0"

_carch=${CARCH}
case "$_carch" in
aarch64*) _carch="arm64" ;;
arm*) _carch="arm" ;;
mips*) _carch="mips" ;;
ppc*) _carch="powerpc" ;;
s390*) _carch="s390" ;;
esac

prepare_patches() {
	local _ret=0

	cd "$srcdir"/linux-$_kernver
	if [ "$_kernver" != "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	fi

	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				error "Patch failed to apply"
				_ret=1
			fi
			;;
		esac
	done
	return $_ret
}

prepare_config()
{
	local _flavor=$i
	local _config=config-$_flavor.${CARCH}
	local _builddir="$srcdir"/build-$_flavor.$CARCH
	local _cfg_file="$_builddir"/.config

	mkdir -p "$_builddir"
	echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-$VENDOR_DISTRO

	cp "$srcdir"/$_config "$_cfg_file"

	make -C "$srcdir"/linux-$_kernver \
		O="$_builddir" \
		ARCH="$_carch" \
		listnewconfig oldconfig

	mkdir -p "$_builddir"/certs
	cp "$srcdir"/x509.genkey "$_builddir"/certs/

	if [ "$KERNEL_SIGNKEY_X509" ]; then
		cp $KERNEL_SIGNKEY_X509 "$_builddir"/certs/bellsoft_signkey.pem
		scripts/config --file "$_cfg_file" --set-str system_trusted_keys "certs/bellsoft_signkey.pem"
		msg "Using trusted keys: '$KERNEL_SIGNKEY_X509'"
	fi

	if [ "$KERNEL_DEV_BUILD" ]; then
		# increase build speed for development kernels
		scripts/config --file "$_cfg_file" --disable x86_decoder_selftest
	fi
}

prepare() {
	prepare_patches

	for i in $_flavors; do
		prepare_config $i
	done
}

build() {
	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for i in $_flavors; do
		cd "$srcdir"/build-$i.$CARCH
		make ARCH="$_carch" CC="${CC:-gcc}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-$VENDOR_DISTRO_NAME"
	done
}

_move_extra_modules() {
	local _outdir="$1"
	local _abi_release="$2"
	local _buildflavor="$3"
	local _extra_path="${srcdir}/extra_modules_${_buildflavor}"
	local _mods_path="$_outdir/lib/modules/${_abi_release}/kernel"
	local _extramods="$(cat "$srcdir"/extramods)"
	local _dir_name _mod_path _m _c _src _dst
	local err=0

	for _m in $_extramods; do
		_c="${_m:0:1}"

		case "$_c" in
			#) continue;;
			-) _m="${_m:1}";;
		esac

		_dir_name="$(dirname $_m)"
		[ "${_m: -3}" = ".ko" ] && _m="$_m.xz"

		if [ "$_c" = "-" ]; then
			_src="$_extra_path/$_m"
			_dst="$_mods_path/$_dir_name"
		else
			_src="$_mods_path/$_m"
			_dst="$_extra_path/$_dir_name"
		fi

		mkdir -p "$_dst"
		mv -f "$_src" "$_dst"
	done
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	sign_list="boot/vmlinuz-${_abi_release}"
	sign_verify="bellsoft-uefi-ca.pem"

	cd "$srcdir"/build-$_buildflavor.$CARCH
	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make -j1 modules_install $_install \
		ARCH="$_carch" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

	_move_extra_modules $_outdir $_abi_release $_buildflavor

	rm -f "$_outdir"/lib/modules/${_abi_release}/build \
		"$_outdir"/lib/modules/${_abi_release}/source
	rm -rf "$_outdir"/lib/firmware

	install -D -m644 include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

package() {
	install="$pkgname.pre-upgrade $pkgname.post-deinstall $pkgname.post-install $pkgname.post-upgrade"
	_package lts "$pkgdir"

	msg "Checking modules dependencies"
	local _abi_release=${pkgver}-${pkgrel}-lts

	cd "$pkgdir"/lib/modules/${_abi_release}

	local _mods="$(find kernel -name *.ko.xz)"
	local _d _m _deps _failed=0

	for _m in $_mods; do
		_deps="$(grep "^$_m:" modules.dep | cut -f2 -d: | xargs)"
		for _d in $_deps; do
			if ! echo "$_mods" | grep -q "$_d"; then
				msg "moddep error: $_m -> $_d"
				_failed=1
			fi
		done
	done

	return $_failed
}

_lts_debug() {
	install="$subpkgname.post-deinstall $subpkgname.post-install $subpkgname.post-upgrade"
	_package lts-debug "$subpkgdir"
}

_extramods() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-extra-modules$)//g')
	local _abi_release=${pkgver}-${pkgrel}-${_flavor}
	local _dir="$subpkgdir"/lib/modules/${_abi_release}/kernel

	depends="$depends linux-${_flavor}=$pkgver-r$pkgrel linux-firmware-extra-modules-any"
	pkgdesc="Additional modules for $VENDOR_DISTRO_NAME Linux $_flavor kernel"

	mkdir -p "$_dir"
	cp -r "$srcdir"/extra_modules_${_flavor}/* "$_dir"/
}

_dev() {
	pkgdesc="Headers and scripts for third-party modules for $VENDOR_DISTRO_NAME Linux $_flavor kernel"
	depends="$_depends_dev"

	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _abi_release=${pkgver}-${pkgrel}-$_flavor
	local _dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}

	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	mkdir -p "$_dir"

	cp "$srcdir"/config-$_flavor.${CARCH} "$_dir"/.config
	echo "-$pkgrel-$_flavor" > "$_dir"/localversion-$VENDOR_DISTRO

	make -j1 -C "$srcdir"/linux-$_kernver \
		O="$_dir" \
		ARCH="$_carch" \
		syncconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the sources
	rm "$_dir"/Makefile "$_dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-$_kernver
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$_dir"

	cp -a scripts include "$_dir"

	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$_dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$_dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	ln -sf /usr/src/linux-headers-${_abi_release} \
		"$subpkgdir"/lib/modules/${_abi_release}/build
}

sha512sums="
6ed2a73c2699d0810e54753715635736fc370288ad5ce95c594f2379959b0e418665cd71bc512a0273fe226fe90074d8b10d14c209080a6466498417a4fdda68  linux-6.1.tar.xz
9a33c9bf61877b4eb52c94454dbb63b472366aa6e41fd6f8564bcda69e78fbf35c09f52d293c225830292a05c3aa8cd6403051b7af7c96ee0006f91e97e44d50  patch-6.1.83.xz
c1b16de185d0d4b4eb03897c570efd7f12b677b957d90dcbadc19bfa1ffeb373c29df47425585143985f13f4d58e01c8a34bc6af90d2d55425f3bfa070fdbf36  config-lts.x86_64
88e586e8ef3c30b3d1c548a08f736aaabd1b54b53999410b139f7e489c46d1e0893300684bc35bd5cdd0a860b0825e76aeb308bea810f1b9cade537a2f4ca271  config-lts-debug.x86_64
1f25004a998bd423b77df13e22a23317866a7a36acaed5de01d50ad8d601cc7937cfb4487c1e5cbc8ed9356b7b04d356c5b6d2290eeaba161f0c7b859a272af7  extramods
8ab1221f07d35b710da7e27d6e443ca303e03b69f29a21d2a8fef236a48e0b95b5521cd1e4adb1046d048a37a9d52989e5a5c55647da6f57f1ba7bb69230ce4f  x509.genkey
304d6a2d2c25af142b2cf2222079ebf59b8174f0825840dfc88e60016e5fcfe12973e0a250b4172ff7ea77cdb014cb5fec1a474965fee97478a6dcd0cbe6bdd3  bellsoft-uefi-ca.pem
3e3d21971766bd7cbb840349ff89b280e4da0997b4a4210cf337bf294739827a833aa91da846703aa040231e5228c6e39fefaa51c639f46b4bb2084bd9cecc56  0100-efi-Add-an-EFI_SECURE_BOOT-flag-to-indicate-secure-b.patch
3cba00d463dd0eab3432f58089f39dea849b35e167c08c024f62610a97267625ffa0e86213d55c27b151fb7cb2ba9dc12110cd4707e61323c73da312e9e73207  0101-efi-Lock-down-the-kernel-if-booted-in-secure-boot-mo.patch
6c5693891863f626510ed9c8089bd62a39f054269e41d95c1b204c2be9467d376c041fe57dac0571cb8ad622e2a201f86dbdd42cb7ddbeff2a4aaa1de550d83b  0102-mtd-phram-slram-Disable-when-the-kernel-is-locked-do.patch
9df1efb8cb3f999d77645102115a77a0079669846e7014c007cabc028172bf0e6e8efd2d96ca14ec19b2a4e69d91c83ee4133e92b0ab99ac0887478895e4ee06  0103-arm64-add-kernel-config-option-to-lock-down-when-in-.patch
3cd54a622eab7b22b3a13f644d54d2a3cf04c58b22f74c806a50f57f9df4c93a2aaeee9b1a104073049b773b4cfb8ce35c73fb61321f133be136f9063e74d7dd  0104-livepatch-Use-kallsyms_on_each_match_symbol-to-impro.patch
87607431e83a202bcaee12a24380b25097ea5bd5afd35fdc188155bbbc5d25a74debabddce8e86ee85e9c210d14aba93355fb353c2031a1be6b996ef79a71164  0105-livepatch-Call-klp_match_callback-in-klp_find_callba.patch
d5bf6f8b92fdfc9484f121c9862440dc1902147e9346807f22241d14fd19dc171fb0b88037a05baa918772cc0ec6c581df2961aec513ce4ed699eeb95466a9c0  0106-kernel-params.c-defer-most-of-param_sysfs_init-to-la.patch
94173acf89409bf5b36419ff9a8331380e26468a2dcd76c6515250087b15d928b520689e89cdb3dd814c32836f17c146621d572a8950baea64ca14688fba9c24  0107-pci-pme-wakeups.patch
ce30be2da9f4e41dade6280e507fd889aa1fc53ee030abfb5530808b169394c68ce4102b2c6a868a4e1c10bac0cba58de9eeb0c2fefddf61f03d9963c22ebd14  0108-ksm-wakeups.patch
85326e2d9333a851fec9f65efdbf4431d5a76d2519fa3bd15f9ed7f1c228f8b45df83886ddce30c517bf88b4ce6a490967a9168fce5d0e590f8cb90a543930b2  0109-intel_idle-tweak-cpuidle-cstates.patch
b850e6addf2491e22dd3b1a16299d679adabf26b999d994e2ad7389abee7a5bcb9283c5bed521fd91bbc20500246e3a7ca10cfe8f355763f78e2c27b94d42e5f  0110-smpboot-reuse-timer-calibration.patch
889828e0d3392cd8903b052da11348f80d57eaced8ea55dae4324486e9b332ec4e3450bb8587b5e2ec82e9ac7307bf4c640f9ba92df730a042a71bcb3570cffb  0111-initialize-ata-before-graphics.patch
19eb895787790b2a2205528cacf2b3f2e707df7ee165988c0569887928da35d4206a554e69ca3ae40468d1570d36254b05786b63b688b0cf245b09685bbd0188  0112-ata-libahci-ignore-staggered-spin-up.patch
a3cd4a65a74dcff4a999bdb468c3b3a01a77337db61e3420b7be7eba668dfc1fa282901d51e6b5a5bff9b3b106bebb6c6f2f9a315ccd1fdaf5c26197aff4a55d  0113-net-skb-disable-a-single-page-frag-cache.patch
"
