Mainly affects x86, as the floating point mode
switching macros are no-ops on other platforms.

Patch-Source: https://core.tcl-lang.org/tcl/info/50ecdc3e87fb5d77

Index: generic/tclStrToD.c
==================================================================
--- a/generic/tclStrToD.c
+++ b/generic/tclStrToD.c
@@ -1625,30 +1625,36 @@
     int signum,			/* 1 if the number is negative, 0 otherwise */
     Tcl_WideUInt significand,	/* Significand of the number */
     int numSigDigs,		/* Number of digits in the significand */
     long exponent)		/* Power of ten */
 {
-    double retval;		/* Value of the number. */
     mp_int significandBig;	/* Significand expressed as a bignum. */
 
     /*
      * With gcc on x86, the floating point rounding mode is double-extended.
      * This causes the result of double-precision calculations to be rounded
      * twice: once to the precision of double-extended and then again to the
      * precision of double. Double-rounding introduces gratuitous errors of 1
-     * ulp, so we need to change rounding mode to 53-bits.
+     * ulp, so we need to change rounding mode to 53-bits. We also make
+     * 'retval' volatile, so that it doesn't get promoted to a register.
      */
-
-    TCL_IEEE_DOUBLE_ROUNDING;
+    volatile double retval;		/* Value of the number. */
 
     /*
-     * Test for the easy cases.
+     * Test for zero significand, which requires explicit construction
+     * of -0.0. (Unary minus returns a positive zero.)
      */
-
     if (significand == 0) {
 	return copysign(0.0, -signum);
     }
+
+    /*
+     * Set the FP control word for 53 bits, WARNING: It must be reset
+     * before returning.
+     */
+    TCL_IEEE_DOUBLE_ROUNDING;
+
     if (numSigDigs <= QUICK_MAX) {
 	if (exponent >= 0) {
 	    if (exponent <= mmaxpow) {
 		/*
 		 * The significand is an exact integer, and so is
@@ -1742,31 +1748,41 @@
     int signum,			/* 1=negative, 0=nonnegative */
     mp_int *significand,	/* Exact significand of the number */
     int numSigDigs,		/* Number of significant digits */
     long exponent)		/* Power of 10 by which to multiply */
 {
-    double retval;
     int machexp;		/* Machine exponent of a power of 10. */
 
     /*
      * With gcc on x86, the floating point rounding mode is double-extended.
      * This causes the result of double-precision calculations to be rounded
      * twice: once to the precision of double-extended and then again to the
      * precision of double. Double-rounding introduces gratuitous errors of 1
-     * ulp, so we need to change rounding mode to 53-bits.
-     */
-
-    TCL_IEEE_DOUBLE_ROUNDING;
-
-    /*
-     * Quick checks for zero, and over/underflow. Be careful to avoid
-     * integer overflow when calculating with 'exponent'.
-     */
-
+     * ulp, so we need to change rounding mode to 53-bits. We also make
+     * 'retval' volatile to make sure that it doesn't get promoted to a
+     * register.
+     */
+    volatile double retval;
+
+    /* 
+     * A zero significand requires explicit construction of -0.0.
+     * (Unary minus returns positive zero.)
+     */
     if (mp_iszero(significand)) {
 	return copysign(0.0, -signum);
     }
+
+    /*
+     * Set the 53-bit rounding mode. WARNING: It must be reset before
+     * returning.
+     */
+    TCL_IEEE_DOUBLE_ROUNDING;
+
+    /*
+     * Make quick checks for over/underflow. Be careful to avoid
+     * integer overflow when calculating with 'exponent'.
+     */
     if (exponent >= 0 && exponent-1 > maxDigits-numSigDigs) {
 	retval = HUGE_VAL;
 	goto returnValue;
     } else if (exponent < 0 && numSigDigs+exponent < minDigits+1) {
 	retval = 0.0;

