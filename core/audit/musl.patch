--- a/auparse/auparse.h
+++ b/auparse/auparse.h
@@ -55,7 +55,7 @@
 void auparse_destroy(auparse_state_t *au);
 void auparse_destroy_ext(auparse_state_t *au, auparse_destroy_what_t what);
 auparse_state_t *auparse_init(ausource_t source, const void *b)
-	__attribute_malloc__ __attr_dealloc (auparse_destroy, 1);
+	__attribute__((__malloc__)) __attr_dealloc (auparse_destroy, 1);
 int auparse_new_buffer(auparse_state_t *au, const char *data, size_t data_len)
 	__attr_access ((__read_only__, 2, 3));
 int auparse_feed(auparse_state_t *au, const char *data, size_t data_len)
--- a/audisp/plugins/remote/queue.c
+++ b/audisp/plugins/remote/queue.c
@@ -49,10 +49,8 @@
 };
 
 /* Local Declarations */
-static int full_pread(int fd, void *buf, size_t size, off_t offset)
-	__attr_access ((__write_only__, 2, 3));
-static int full_pwrite(int fd, const void *buf, size_t size, off_t offset)
-	__attr_access ((__read_only__, 2, 3));
+static int full_pread(int fd, void *buf, size_t size, off_t offset);
+static int full_pwrite(int fd, const void *buf, size_t size, off_t offset);
 
 /* Compile-time expression verification */
 #define verify(E) do {				\
--- a/audisp/plugins/remote/queue.h
+++ b/audisp/plugins/remote/queue.h
@@ -53,15 +53,14 @@
  * On error, return NULL and set errno. */
 struct queue *q_open(int q_flags, const char *path, size_t num_entries,
 		     size_t entry_size)
-	__attribute_malloc__ __attr_dealloc (q_close, 1) __wur;
+	__attribute__((__malloc__));
 
 /* Add DATA to tail of Q. Return 0 on success, -1 on error and set errno. */
 int q_append(struct queue *q, const char *data);
 
 /* Peek at head of Q, storing it into BUF of SIZE. Return 1 if an entry 
  * exists, 0 if queue is empty. On error, return -1 and set errno. */
-int q_peek(struct queue *q, char *buf, size_t size)
-	__attr_access ((__write_only__, 2, 3));
+int q_peek(struct queue *q, char *buf, size_t size);
 
 /* Drop head of Q and return 0. On error, return -1 and set errno. */
 int q_drop_head(struct queue *q);
